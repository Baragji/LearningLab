generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int            @id @default(autoincrement())
  email                String         @unique
  name                 String?
  createdAt            DateTime       @default(now())
  passwordHash         String
  role                 Role           @default(STUDENT)
  updatedAt            DateTime       @updatedAt
  deletedAt            DateTime?
  passwordResetExpires DateTime?
  passwordResetToken   String?        @unique
  
  // Nye felter til brugerprofildata
  profileImage         String?
  bio                  String?
  socialLinks          Json?          // Gemmer sociale links som JSON (f.eks. {twitter: "url", linkedin: "url"})
  settings             Json?          // Brugerindstillinger som JSON (f.eks. {notifications: true, privacy: {...}})
  xp                   Int            @default(0)  // Experience points for gamification
  
  quizAttempts         QuizAttempt[]
  progress             UserProgress[]
  
  // User groups relation
  groups               UserGroup[]    @relation("UserToUserGroup")

  // Relations for createdBy and updatedBy
  createdByUser   User?   @relation("CreatedByUser", fields: [createdBy], references: [id])
  createdBy       Int?
  updatedByUser   User?   @relation("UpdatedByUser", fields: [updatedBy], references: [id])
  updatedBy       Int?

  // Self-relations
  createdUsers    User[]  @relation("CreatedByUser")
  updatedUsers    User[]  @relation("UpdatedByUser")

  // Relations for created and updated entities
  createdSubjectAreas   SubjectArea[]  @relation("SubjectAreaCreatedByUser")
  updatedSubjectAreas   SubjectArea[]  @relation("SubjectAreaUpdatedByUser")
  createdCourses        Course[]       @relation("CourseCreatedByUser")
  updatedCourses        Course[]       @relation("CourseUpdatedByUser")
  createdModules        Module[]       @relation("ModuleCreatedByUser")
  updatedModules        Module[]       @relation("ModuleUpdatedByUser")
  createdLessons        Lesson[]       @relation("LessonCreatedByUser")
  updatedLessons        Lesson[]       @relation("LessonUpdatedByUser")
  createdContentBlocks  ContentBlock[] @relation("ContentBlockCreatedByUser")
  updatedContentBlocks  ContentBlock[] @relation("ContentBlockUpdatedByUser")
  createdQuizzes        Quiz[]         @relation("QuizCreatedByUser")
  updatedQuizzes        Quiz[]         @relation("QuizUpdatedByUser")
  createdQuestions      Question[]     @relation("QuestionCreatedByUser")
  updatedQuestions      Question[]     @relation("QuestionUpdatedByUser")
  createdAnswerOptions  AnswerOption[] @relation("AnswerOptionCreatedByUser")
  updatedAnswerOptions  AnswerOption[] @relation("AnswerOptionUpdatedByUser")
  
  // User groups created and updated
  createdUserGroups     UserGroup[]    @relation("UserGroupCreatedByUser")
  updatedUserGroups     UserGroup[]    @relation("UserGroupUpdatedByUser")
}

model SubjectArea {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String   @unique
  description String?
  tags        String[] @default([])
  categories  String[] @default([])
  image       String?
  banner      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  courses     Course[]

  // Relations for createdBy and updatedBy
  createdByUser   User?   @relation("SubjectAreaCreatedByUser", fields: [createdBy], references: [id])
  createdBy       Int?
  updatedByUser   User?   @relation("SubjectAreaUpdatedByUser", fields: [updatedBy], references: [id])
  updatedBy       Int?
}

model Course {
  id            Int         @id @default(autoincrement())
  title         String
  description   String
  slug          String      @unique
  subjectAreaId Int
  tags          String[]    @default([])
  difficulty    Difficulty  @default(BEGINNER)
  estimatedHours Int?
  status        CourseStatus @default(DRAFT)
  image         String?
  banner        String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deletedAt     DateTime?
  subjectArea   SubjectArea @relation(fields: [subjectAreaId], references: [id])
  modules       Module[]

  // Relations for createdBy and updatedBy
  createdByUser   User?   @relation("CourseCreatedByUser", fields: [createdBy], references: [id])
  createdBy       Int?
  updatedByUser   User?   @relation("CourseUpdatedByUser", fields: [updatedBy], references: [id])
  updatedBy       Int?
}

model Module {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  order       Int
  courseId    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  lessons     Lesson[]
  course      Course   @relation(fields: [courseId], references: [id])
  quizzes     Quiz[]   @relation("ModuleQuizzes")

  // Relations for createdBy and updatedBy
  createdByUser   User?   @relation("ModuleCreatedByUser", fields: [createdBy], references: [id])
  createdBy       Int?
  updatedByUser   User?   @relation("ModuleUpdatedByUser", fields: [updatedBy], references: [id])
  updatedBy       Int?
}

model Lesson {
  id            Int            @id @default(autoincrement())
  title         String
  description   String
  order         Int
  moduleId      Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  contentBlocks ContentBlock[]
  module        Module         @relation(fields: [moduleId], references: [id])
  quizzes       Quiz[]         @relation("LessonQuizzes")
  userProgress  UserProgress[] @relation("LessonProgress")

  // Relations for createdBy and updatedBy
  createdByUser   User?   @relation("LessonCreatedByUser", fields: [createdBy], references: [id])
  createdBy       Int?
  updatedByUser   User?   @relation("LessonUpdatedByUser", fields: [updatedBy], references: [id])
  updatedBy       Int?
}

model ContentBlock {
  id        Int              @id @default(autoincrement())
  type      ContentBlockType
  content   String
  order     Int
  lessonId  Int
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  deletedAt DateTime?
  lesson    Lesson           @relation(fields: [lessonId], references: [id])

  // Relations for createdBy and updatedBy
  createdByUser   User?   @relation("ContentBlockCreatedByUser", fields: [createdBy], references: [id])
  createdBy       Int?
  updatedByUser   User?   @relation("ContentBlockUpdatedByUser", fields: [updatedBy], references: [id])
  updatedBy       Int?
}

model Quiz {
  id                 Int            @id @default(autoincrement())
  title              String
  description        String
  lessonId           Int?
  moduleId           Int?
  timeLimit          Int?           // in seconds
  maxAttempts        Int?
  randomizeQuestions Boolean        @default(false)
  showAnswers        Boolean        @default(true)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  deletedAt          DateTime?
  questions          Question[]
  lesson             Lesson?        @relation("LessonQuizzes", fields: [lessonId], references: [id])
  module             Module?        @relation("ModuleQuizzes", fields: [moduleId], references: [id])
  attempts           QuizAttempt[]
  userProgress       UserProgress[] @relation("QuizProgress")

  // Relations for createdBy and updatedBy
  createdByUser   User?   @relation("QuizCreatedByUser", fields: [createdBy], references: [id])
  createdBy       Int?
  updatedByUser   User?   @relation("QuizUpdatedByUser", fields: [updatedBy], references: [id])
  updatedBy       Int?
}

model Question {
  id            Int            @id @default(autoincrement())
  text          String
  type          QuestionType
  quizId        Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  answerOptions AnswerOption[]
  quiz          Quiz           @relation(fields: [quizId], references: [id])
  userAnswers   UserAnswer[]

  // Relations for createdBy and updatedBy
  createdByUser   User?   @relation("QuestionCreatedByUser", fields: [createdBy], references: [id])
  createdBy       Int?
  updatedByUser   User?   @relation("QuestionUpdatedByUser", fields: [updatedBy], references: [id])
  updatedBy       Int?
}

model AnswerOption {
  id          Int          @id @default(autoincrement())
  text        String
  isCorrect   Boolean
  questionId  Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  question    Question     @relation(fields: [questionId], references: [id])
  userAnswers UserAnswer[]

  // Relations for createdBy and updatedBy
  createdByUser   User?   @relation("AnswerOptionCreatedByUser", fields: [createdBy], references: [id])
  createdBy       Int?
  updatedByUser   User?   @relation("AnswerOptionUpdatedByUser", fields: [updatedBy], references: [id])
  updatedBy       Int?
}

model QuizAttempt {
  id          Int            @id @default(autoincrement())
  userId      Int
  quizId      Int
  score       Int            @default(0)
  startedAt   DateTime       @default(now())
  completedAt DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  deletedAt   DateTime?
  quiz        Quiz           @relation(fields: [quizId], references: [id])
  user        User           @relation(fields: [userId], references: [id])
  userAnswers UserAnswer[]
  progress    UserProgress[]
}

model UserAnswer {
  id                     Int           @id @default(autoincrement())
  quizAttemptId          Int
  questionId             Int
  selectedAnswerOptionId Int?
  inputText              String?
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  deletedAt              DateTime?
  question               Question      @relation(fields: [questionId], references: [id])
  quizAttempt            QuizAttempt   @relation(fields: [quizAttemptId], references: [id])
  selectedAnswerOption   AnswerOption? @relation(fields: [selectedAnswerOptionId], references: [id])
}

model UserProgress {
  id            Int            @id @default(autoincrement())
  userId        Int
  lessonId      Int?
  quizId        Int?
  status        ProgressStatus @default(NOT_STARTED)
  score         Int?
  quizAttemptId Int?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  lesson        Lesson?        @relation("LessonProgress", fields: [lessonId], references: [id])
  quizAttempt   QuizAttempt?   @relation(fields: [quizAttemptId], references: [id])
  quiz          Quiz?          @relation("QuizProgress", fields: [quizId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum ContentBlockType {
  TEXT
  IMAGE_URL
  VIDEO_URL
  QUIZ_REF
  CODE
  FILE
  EMBED
  INTERACTIVE
}

enum QuestionType {
  MULTIPLE_CHOICE
  FILL_IN_BLANK
  MATCHING
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model UserGroup {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  permissions Json?     // Gemmer tilladelser som JSON (f.eks. {canManageUsers: true, canManageCourses: true})
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  
  // Relation til brugere
  users       User[]    @relation("UserToUserGroup")
  
  // Relations for createdBy and updatedBy
  createdByUser   User?   @relation("UserGroupCreatedByUser", fields: [createdBy], references: [id])
  createdBy       Int?
  updatedByUser   User?   @relation("UserGroupUpdatedByUser", fields: [updatedBy], references: [id])
  updatedBy       Int?
}
