## Oversigt

Din runtime-fejl

```
Cannot read properties of undefined (reading 'moduleLoader')
```

opstår typisk, fordi din **`webpack-hmr.config.js`** ikke eksporterer den korrekte funktion med de forventede argumenter, eller fordi filen ikke behandles som CommonJS, som Nest CLI kræver til HMR-konfigurationen ([docs.nestjs.com][1]). Nest CLI wrapper `webpack` og forventer, at din konfigurationsfil eksporterer en funktion med signaturen

```js
module.exports = function (options, webpack) { … }
```

hvor `options` er den default-konfig, CLI’en har genereret, og `webpack` er referencen til selve `webpack`-pakken ([docs.nestjs.com][2]). Hvis denne funktion ikke er sat korrekt op, vil `options` være `undefined`, og ethvert forsøg på at læse `options.moduleLoader` (eller lignende internt felt) fejle med din besked ([docs.nestjs.com][1]).

---

## Årsag til fejlen

### 1. Forkert eksport-format

Nest CLI kræver et CommonJS-eksport af en **funktion**, ikke bare et objekt. Hvis du skriver:

```js
export default { … }
```

eller

```js
module.exports = { … }
```

i stedet for en funktion, modtager CLI’en ikke `options`-parameteren som forventet, og `options.moduleLoader` bliver `undefined` ([docs.nestjs.com][1]).

### 2. ESM vs. CommonJS

Hvis din monorepo eller dit `package.json` bruger

```json
"type": "module"
```

behandles `.js`-filer som ESM, og `require()` vil fejle. Du kan enten:

* Omdøbe **`webpack-hmr.config.js` til `webpack-hmr.config.cjs`**, så Node/Moduler tvinges til CommonJS-tilstand ([GitHub][3]).
* Eller justere `package.json` til

  ```json
  "type": "commonjs"
  ```

  så alle `.js`-filer igen er CommonJS.

### 3. Udateret HMR-eksempel

Nogle eksempler på nettet bruger en forkert signatur eller glemme at importere `webpack`-instansen korrekt. Det giver umiddelbart ingen syntaksfejl, men `options`-objektet mangler nøglefelter som `moduleLoader` ([Stack Overflow][4]).

---

## Sådan løser du det

### 1. Omdan til korrekt CommonJS-funktion

Opret eller ret **`webpack-hmr.config.js`** til noget i stil med:

```js
// webpack-hmr.config.js
const webpack = require('webpack');
const nodeExternals = require('webpack-node-externals');
const { RunScriptWebpackPlugin } = require('run-script-webpack-plugin');

module.exports = function (options, webpackInstance) {
  return {
    ...options,
    entry: ['webpack/hot/poll?100', options.entry],
    externals: [
      nodeExternals({
        allowlist: ['webpack/hot/poll?100'],
      }),
    ],
    plugins: [
      ...options.plugins,
      new webpackInstance.HotModuleReplacementPlugin(),
      new webpackInstance.WatchIgnorePlugin({
        paths: [/\.js$/, /\.d\.ts$/],
      }),
      new RunScriptWebpackPlugin({ name: options.output.filename }),
    ],
  };
};
```

* **Første parameter**: `options` – default-konfiguration fra Nest CLI
* **Andet parameter**: `webpackInstance` – selve `webpack`-pakken ([docs.nestjs.com][1])

### 2. Sørg for CommonJS

#### a) Rename filen

Hvis du bruger ESM (`"type": "module"`), omdøb filen til `webpack-hmr.config.cjs` ([GitHub][3]).

#### b) Eller skift `type`

I dit `package.json`:

```json
{
  "type": "commonjs"
}
```

så `.js`-filer altid behandles som CommonJS.

### 3. Genstart dev-serveren

Kør herefter:

```bash
nest build --webpack --webpackPath webpack-hmr.config.js --watch
```

eller, hvis du omdøbte:

```bash
nest build --webpack --webpackPath webpack-hmr.config.cjs --watch
```

så CLI’en genlæser den korrekte config og får sat `options` korrekt, uden undefined-fejl ([webpack][5]).

---

## Yderligere ressourcer

* **NestJS Hot Reload**: Beskrivelse af HMR-opstilling med CLI ([docs.nestjs.com][1])
* **Workspaces & Webpack Config**: Standard- og funktions-baserede webpack-indstillinger i monorepo ([docs.nestjs.com][2])
* **@nestjs/cli**: Seneste CLI-version (v11+) med understøttelse af HMR og moderne opsætninger ([npm][6])
* **Webpack HMR Guide**: Officiel dokumentation for Hot Module Replacement ([webpack][5])
* **Webpack + NestJS + React**: Eksempel på integration for fuld-stack opsætning ([typescript.tv][7])

[1]: https://docs.nestjs.com/recipes/hot-reload?utm_source=chatgpt.com "Hot reload | NestJS - A progressive Node.js framework"
[2]: https://docs.nestjs.com/cli/monorepo?utm_source=chatgpt.com "Workspaces - CLI | NestJS - A progressive Node.js framework"
[3]: https://github.com/nestjs/nest/issues/14331?utm_source=chatgpt.com "NestJs HMR not working with \"type\": \"module\" · Issue #14331 - GitHub"
[4]: https://stackoverflow.com/questions/77369276/webpack-hmr-hot-module-replacement-in-nestjs-error-cannot-use-import-statemen?utm_source=chatgpt.com "webpack HMR (Hot-Module Replacement) in nestjs error"
[5]: https://webpack.js.org/guides/hot-module-replacement/?utm_source=chatgpt.com "Hot Module Replacement - webpack"
[6]: https://www.npmjs.com/package/%40nestjs/cli?utm_source=chatgpt.com "@nestjs/cli - npm"
[7]: https://typescript.tv/react/setup-webpack-hmr-with-nestjs-and-react?utm_source=chatgpt.com "Setup Webpack HMR with NestJS and React - TypeScript TV"
