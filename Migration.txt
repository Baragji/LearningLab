Here’s a **complete, no-research-needed** migration plan your developer can follow to move your monorepo from Yarn Classic (v1.x) to Yarn Berry (v2+), including every file to touch and exact commands to run.

> **Summary:**
>
> 1. **Prerequisites & Corepack**: Ensure Node >=16.10 and enable Corepack so Yarn Berry can run out-of-the-box ([Medium][1]).
> 2. **Bootstrap Berry**: Run `yarn set version berry` at the repo root to install Yarn v2+ locally ([Yarn][2]).
> 3. **`.yarnrc.yml`**: Create/convert your old `.yarnrc` to `.yarnrc.yml` with `nodeLinker: node-modules` (or `pnp`) ([psidium.github.io][3]).
> 4. **Root `package.json`**: Add `"packageManager": "yarn@<your-berry-version>"` and confirm `workspaces: ["apps/*","packages/*"]` ([heygrady.com][4]).
> 5. **Workspace `package.json`**: In every `apps/*/package.json` and `packages/*/package.json`, add the same `packageManager` field and switch local deps to `"workspace:*"` if desired ([DoltHub][5]).
> 6. **`.gitignore`**: Ignore Berry artifacts (`.yarn/cache`, `.pnp.*`, etc.) ([Medium][1]).
> 7. **Install & Lockfile**: Run `yarn install --immutable` to regenerate `yarn.lock` under Berry rules ([Yarn][2]).
> 8. **CI/CD**: Update GitHub Actions to use `actions/setup-node@v3` with `cache: "yarn"` or a dedicated `setup-yarn-berry` action and `yarn install --immutable` ([GitHub][6]).
> 9. **Dockerfiles**: Change install stages to copy only `package.json`, `yarn.lock`, `.yarnrc.yml`, `.yarn/releases` and run `yarn install --immutable` ([DEV Community][7]).
> 10. **Validation**: Run `yarn workspaces foreach run test` / `yarn tsc --build` and fix any PnP path errors (if using `nodeLinker: pnp`) .

---

## 1. Prerequisites & Corepack

1. **Node >=16.10** is required so you can use Corepack to manage Yarn versions ([Medium][1]).
2. **Enable Corepack** globally:

   ```bash
   corepack enable
   ```

   This makes `yarn set version berry` available without a separate install ([Medium][1]).

---

## 2. Bootstrap Yarn Berry in Root

1. From your repo root, run:

   ```bash
   yarn set version berry
   ```

   This creates `.yarn/releases/yarn-*.cjs` and a minimal `.yarnrc.yml` if none exists ([Yarn][2]).
2. **Commit** the generated files:

   * `.yarn/releases/yarn-berry.cjs`
   * `.yarnrc.yml`

---

## 3. Configure `.yarnrc.yml`

Create or replace your old `.yarnrc` with this `.yarnrc.yml` at the repo root:

```yaml
# Choose one linker:
nodeLinker: node-modules    # retains node_modules folder
# nodeLinker: pnp           # Plug’n’Play mode, no node_modules

# (Optionally) enable the global offline cache:
# enableGlobalCache: true
```

This new YAML format is required by Yarn v2+ ([psidium.github.io][3]).

---

## 4. Update Root `package.json`

In your **root** `package.json`, ensure it contains:

```diff
{
  "name": "learninglab",
  "private": true,
+ "packageManager": "yarn@3.4.1",
  "workspaces": [
    "apps/*",
    "packages/*"
  ],
  "scripts": {
    "dev": "turbo run dev",
    "build": "turbo run build",
    "lint": "turbo run lint"
  },
  "devDependencies": {
-   "turbo": "^1.10.0"
+   "turbo": "^1.10.0"
  }
}
```

* `packageManager` locks the Berry version for everyone ([heygrady.com][4]).
* `workspaces` must list your apps and packages ([heygrady.com][4]).

---

## 5. Update Workspace `package.json` Files

For **each** `apps/*/package.json` and `packages/*/package.json`:

1. Add the same `packageManager` field:

   ```json
   {
     "packageManager": "yarn@3.4.1"
   }
   ```
2. If you were using `@repo/core: "*"`, switch to the Berry protocol:

   ```diff
   "dependencies": {
   ```

* "@repo/core": "\*",
* "@repo/config": "\*"

- "@repo/core": "workspace:\*",
- "@repo/config": "workspace:\*"
  }

```
This ties each workspace to the local package version :contentReference[oaicite:16]{index=16}.

---

## 6. Update `.gitignore`  
Add these entries at the bottom of your root `.gitignore`:  
```

# Yarn Berry

.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.pnp.\*

````
This prevents committing cache artifacts and Plug’n’Play files :contentReference[oaicite:17]{index=17}.

---

## 7. Install & Lockfile Regeneration  
1. **Clean** existing installs:  
   ```bash
   rm -rf node_modules yarn.lock
````

2. **Install** under Berry constraints:

   ```bash
   yarn install --immutable
   ```

   * `--immutable` enforces that `yarn.lock` matches your dependencies or fails ([Yarn][2]).

---

## 8. CI/CD: GitHub Actions

In your `.github/workflows/*.yaml`, replace npm or Yarn Classic steps with:

```yaml
- uses: actions/checkout@v3

- uses: actions/setup-node@v3
  with:
    node-version: 18.x
    cache: 'yarn'                 # Caches both node_modules & .yarn/cache
    cache-dependency-path: yarn.lock

- name: Setup Yarn Berry
  run: |
    corepack enable
    yarn set version berry

- name: Install dependencies
  run: yarn install --immutable

- name: Build
  run: yarn turbo run build --scope=${{ matrix.project }}
```

Or use a dedicated action like `threeal/setup-yarn-action` for Berry ([GitHub][6]).

---

## 9. Dockerfile Updates

For **each** `apps/api/Dockerfile` and `apps/web/Dockerfile`, use a multistage build:

```dockerfile
FROM node:18-alpine AS deps
WORKDIR /app
COPY package.json yarn.lock .yarnrc.yml ./
COPY .yarn/releases ./.yarn/releases
RUN yarn install --immutable

FROM node:18-alpine AS builder
WORKDIR /app
COPY --from=deps /app ./
COPY . .
RUN yarn turbo run build --scope=api --include-dependencies

FROM node:18-alpine AS runner
WORKDIR /app
COPY --from=builder /app ./
CMD ["node", "apps/api/dist/main.js"]
```

* **Stage `deps`** caches only what’s needed for install ([DEV Community][7]).
* **`yarn install --immutable`** ensures lockfile consistency.

---

## 10. Validation & Troubleshooting

1. **Run tests** in all workspaces:

   ```bash
   yarn workspaces foreach run test
   yarn workspaces foreach run lint
   yarn workspaces foreach run tsc --noEmit
   ```
2. If using `nodeLinker: pnp`, you may get PnP path errors in Jest or ESLint. To fix, follow the Yarn PnP docs to add SDKs or `packageExtensions` ([GitHub][8]).
3. Ensure `turbo` tasks still link correctly under Berry.

---

## 11. Final Commit & Developer Handoff

1. Commit **all** changes:

   ```
   git add \
     package.json \
     **/package.json \
     yarn.lock \
     .yarnrc.yml \
     .yarn/releases \
     .gitignore \
     .github/workflows
   git commit -m "🔄 Migrate monorepo to Yarn Berry (v2+)"
   ```
2. Push and verify in CI: the build must pass without needing any additional research.

---

By following these **11** precise steps—with every file and command spelled out—your developer can migrate the repo end-to-end without extra digging.

[1]: https://gabrielyotoo.medium.com/how-to-migrate-your-project-to-modern-yarn-berry-29b2b2a75b84?utm_source=chatgpt.com "How to migrate your project to modern Yarn Berry - Gabriel Yamamoto"
[2]: https://yarnpkg.com/migration/guide?utm_source=chatgpt.com "Migration steps - Yarn"
[3]: https://psidium.github.io/lerna/monorepo/yarn/nodejs/pnp/zero-install/2021/08/23/migrating-a-monorepo-from-lerna-to-yarn-3.html?utm_source=chatgpt.com "Migrating a monorepo from Lerna to Yarn 3 with PnP and Zero Install"
[4]: https://heygrady.com/posts/2022-09-01-creating-a-yarn-monorepo-in-2022/?utm_source=chatgpt.com "Creating a Yarn Monorepo in 2022 - Heygrady"
[5]: https://dolthub.com/blog/2022-03-18-migrating-to-yarn-2/?utm_source=chatgpt.com "Migrating our Monorepo to Yarn 2 | DoltHub Blog"
[6]: https://github.com/marketplace/actions/setup-yarn-berry?utm_source=chatgpt.com "Setup Yarn Berry · Actions · GitHub Marketplace"
[7]: https://dev.to/mattpocockuk/how-to-cache-nodemodules-in-github-actions-with-yarn-24eh?utm_source=chatgpt.com "How to cache node_modules in GitHub Actions with Yarn"
[8]: https://github.com/yarnpkg/berry/discussions/4978?utm_source=chatgpt.com "Where is the \"Link step\" cached? · yarnpkg berry · Discussion #4978"
