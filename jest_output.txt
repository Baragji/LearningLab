• Packages in scope: @repo/config, @repo/core, api, create-solid-wow, tsconfig, ui, web
• Running test in 7 packages
• Remote caching disabled
ui:build: cache hit, replaying logs 3e1256aff6ede92a
ui:build: No build step required for UI package
@repo/core:test: cache hit, replaying logs 6b2d49cc16b1461f
@repo/core:test: PASS src/types/user.types.test.ts
@repo/core:test: PASS src/utils/validation.test.ts
@repo/core:test: 
@repo/core:test: Test Suites: 2 passed, 2 total
@repo/core:test: Tests:       12 passed, 12 total
@repo/core:test: Snapshots:   0 total
@repo/core:test: Time:        1.768 s, estimated 2 s
@repo/core:test: Ran all test suites.
@repo/config:build: cache hit, replaying logs 9d16f15a7ffec6a9
ui:test: cache miss, executing 235e2931cb17e770
@repo/core:build: cache hit, replaying logs a9158b52427ba6a2
web:test: cache miss, executing 8a44113cf70352c7
api:test: cache miss, executing 49f0e4d0ed692f3e
web:test: - info Loaded env from /Users/Yousef_1/Dokumenter/Kodefiler/Ejaztemplate/LearningLab/LearningLab/apps/web/.env
api:test: FAIL src/config/node-version.spec.ts
api:test:   ● Node.js Version Requirements › Verify Dockerfile Node.js version › should use Node.js 22 in the FROM statement
api:test: 
api:test:     expect(received).toContain(expected) // indexOf
api:test: 
api:test:     Expected substring: "FROM node:22-alpine AS base"
api:test:     Received string:    "# Dockerfile.api·
api:test:     # 1. deps: install all dependencies including devDependencies for prisma generate
api:test:     FROM node:22-alpine AS deps
api:test:     WORKDIR /app·
api:test:     # Install OpenSSL for Prisma
api:test:     RUN apk add --no-cache openssl·
api:test:     # Copy global package.json and yarn.lock
api:test:     COPY package.json yarn.lock .yarnrc.yml* ./
api:test:     # Copy yarn berry files
api:test:     COPY .yarn ./.yarn·
api:test:     # Copy workspace package.json files to ensure all workspaces are recognized
api:test:     COPY apps/api/package.json ./apps/api/
api:test:     COPY packages/core/package.json ./packages/core/
api:test:     # Add other packages if api depends on them, e.g., ui, config, tsconfig
api:test:     COPY packages/ui/package.json ./packages/ui/
api:test:     COPY packages/config/package.json ./packages/config/
api:test:     COPY packages/tsconfig/package.json ./packages/tsconfig/·
api:test:     # Install ALL dependencies (including dev for Prisma)
api:test:     RUN echo \"---- Running yarn install in api deps stage ----\" && \\
api:test:         yarn install --frozen-lockfile && \\
api:test:         echo \"---- yarn install in api deps stage complete ----\"·
api:test:     # 2. builder: build @repo/core and then the api
api:test:     FROM deps AS builder
api:test:     WORKDIR /app·
api:test:     # Copy all source code over the installed node_modules
api:test:     COPY . .·
api:test:     # Build @repo/core first as api depends on it
api:test:     RUN echo \"---- Building @repo/core ----\" && \\
api:test:         yarn workspace @repo/core build && \\
api:test:         echo \"---- @repo/core build complete ----\"·
api:test:     # Generate Prisma client
api:test:     RUN echo \"---- Generating Prisma client ----\" && \\
api:test:         yarn workspace api prisma generate && \\
api:test:         echo \"---- Prisma client generation complete ----\"·
api:test:     # Build the NestJS application
api:test:     RUN echo \"---- Building api app ----\" && \\
api:test:         yarn workspace api build && \\
api:test:         echo \"---- api app build complete ----\"·
api:test:     # 3. runner: minimal production image
api:test:     FROM node:22-alpine AS runner
api:test:     WORKDIR /app·
api:test:     # Install OpenSSL for Prisma
api:test:     RUN apk add --no-cache openssl·
api:test:     ENV NODE_ENV production
api:test:     ENV PORT 3001 # Or your desired API port·
api:test:     # Create a non-root user
api:test:     RUN addgroup -S apiuser && adduser -S apiuser -G apiuser·
api:test:     # Copy necessary files from builder
api:test:     COPY --chown=apiuser:apiuser --from=builder /app/apps/api/dist ./apps/api/dist
api:test:     COPY --chown=apiuser:apiuser --from=builder /app/packages/core/dist ./packages/core/dist
api:test:     COPY --chown=apiuser:apiuser --from=builder /app/apps/api/prisma ./apps/api/prisma # Prisma schema
api:test:     COPY --chown=apiuser:apiuser --from=builder /app/apps/api/package.json ./apps/api/package.json # For runtime
api:test:     COPY --chown=apiuser:apiuser --from=builder /app/package.json ./package.json # Root package.json for yarn workspaces
api:test:     COPY --chown=apiuser:apiuser --from=builder /app/yarn.lock ./yarn.lock
api:test:     COPY --chown=apiuser:apiuser --from=builder /app/.yarnrc.yml ./.yarnrc.yml
api:test:     COPY --chown=apiuser:apiuser --from=builder /app/.yarn ./.yarn·
api:test:     # Copy production node_modules from the 'deps' stage
api:test:     # This ensures that only production dependencies are included
api:test:     # We copy the entire node_modules from deps, then prune devDependencies
api:test:     COPY --chown=apiuser:apiuser --from=deps /app/node_modules ./node_modules·
api:test:     # Prune devDependencies. This requires yarn to be available.
api:test:     # We copied .yarn and relevant files above for this purpose.
api:test:     RUN yarn install --production --frozen-lockfile && \\
api:test:         rm -rf /tmp/.yarn* ~/.yarn/berry/cache ~/.cache/yarn·
api:test:     USER apiuser·
api:test:     EXPOSE 3001
api:test:     CMD [\"node\", \"apps/api/dist/main.js\"]"
api:test: 
api:test:       41 |     it('should use Node.js 22 in the FROM statement', () => {
api:test:       42 |       // Check if the Dockerfile uses Node.js 22
api:test:     > 43 |       expect(dockerfileContent).toContain('FROM node:22-alpine AS base');
api:test:          |                                 ^
api:test:       44 |     });
api:test:       45 |
api:test:       46 |     it('should not contain any other Node.js version references', () => {
api:test: 
api:test:       at Object.<anonymous> (config/node-version.spec.ts:43:33)
api:test: 
web:test: FAIL e2e/login.spec.ts
web:test:   ● Test suite failed to run
web:test: 
web:test:     Cannot find module '@testing-library/jest-dom/extend-expect' from 'jest.setup.js'
web:test: 
web:test:       7 | // Valgfrit: Initialiser routeren til en bestemt sti, hvis mange tests har brug for det
web:test:       8 | // require('next-router-mock').default.push('/');
web:test:     > 9 |
web:test:         | ^
web:test: 
web:test:       at Resolver._throwModNotFoundError (../../node_modules/jest-resolve/build/resolver.js:427:11)
web:test:       at Object.<anonymous> (jest.setup.js:9:1)
web:test: 
web:test: FAIL src/screens/auth/login/login.test.tsx
web:test:   ● Test suite failed to run
web:test: 
web:test:     Cannot find module '@testing-library/jest-dom/extend-expect' from 'jest.setup.js'
web:test: 
web:test:       7 | // Valgfrit: Initialiser routeren til en bestemt sti, hvis mange tests har brug for det
web:test:       8 | // require('next-router-mock').default.push('/');
web:test:     > 9 |
web:test:         | ^
web:test: 
web:test:       at Resolver._throwModNotFoundError (../../node_modules/jest-resolve/build/resolver.js:427:11)
web:test:       at Object.<anonymous> (jest.setup.js:9:1)
web:test: 
web:test: FAIL e2e/register.spec.ts
web:test:   ● Test suite failed to run
web:test: 
web:test:     Cannot find module '@testing-library/jest-dom/extend-expect' from 'jest.setup.js'
web:test: 
web:test:       7 | // Valgfrit: Initialiser routeren til en bestemt sti, hvis mange tests har brug for det
web:test:       8 | // require('next-router-mock').default.push('/');
web:test:     > 9 |
web:test:         | ^
web:test: 
web:test:       at Resolver._throwModNotFoundError (../../node_modules/jest-resolve/build/resolver.js:427:11)
web:test:       at Object.<anonymous> (jest.setup.js:9:1)
web:test: 
web:test: Test Suites: 3 failed, 3 total
web:test: Tests:       0 total
web:test: Snapshots:   0 total
web:test: Time:        5.345 s
web:test: Ran all test suites.

 Tasks:    4 successful, 7 total
Cached:    4 cached, 7 total
  Time:    8.41s 
Failed:    web#test

