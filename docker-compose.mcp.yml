version: '3.8'

services:
  # Phase 1: Core Development Tools
  
  # Git MCP Server
  git-mcp:
    build:
      context: ./.trae/mcp-servers/docker/git
      dockerfile: Dockerfile
    container_name: learninglab-git-mcp
    restart: unless-stopped
    environment:
      - GIT_REPO_PATH=/workspace
      - GIT_DEFAULT_BRANCH=main
      - GIT_MAX_DIFF_SIZE=1048576
      - GIT_SAFE_OPERATIONS=true
    volumes:
      - .:/workspace
      - git-data:/data
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "git", "--version"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "mcp.phase=1"
      - "mcp.priority=high"
      - "mcp.service=git"

  # Python Sandbox MCP Server
  python-sandbox:
    build:
      context: ./.trae/mcp-servers/docker/python-sandbox
      dockerfile: Dockerfile
    container_name: learninglab-python-sandbox
    restart: unless-stopped
    environment:
      - PYTHON_VERSION=3.11
      - SANDBOX_TIMEOUT=300
      - MAX_MEMORY=512m
      - ALLOWED_PACKAGES=numpy,pandas,scikit-learn,matplotlib,seaborn
    volumes:
      - python-sandbox-data:/sandbox
      - ./data:/data:ro
    networks:
      - mcp-network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
    healthcheck:
      test: ["CMD", "python3", "--version"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "mcp.phase=1"
      - "mcp.priority=high"
      - "mcp.service=python-sandbox"

  # Node.js Sandbox MCP Server
  node-sandbox:
    build:
      context: ./.trae/mcp-servers/docker/node-sandbox
      dockerfile: Dockerfile
    container_name: learninglab-node-sandbox
    restart: unless-stopped
    environment:
      - NODE_VERSION=18
      - SANDBOX_TIMEOUT=300
      - MAX_MEMORY=512m
      - ALLOWED_PACKAGES=lodash,axios,express,moment
    volumes:
      - node-sandbox-data:/sandbox
      - ./data:/data:ro
    networks:
      - mcp-network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    healthcheck:
      test: ["CMD", "node", "--version"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "mcp.phase=1"
      - "mcp.priority=medium"
      - "mcp.service=node-sandbox"

  # Phase 2: AI and Data Analysis
  
  # Jupyter MCP Server
  jupyter-mcp:
    build:
      context: ./.trae/mcp-servers/docker/jupyter
      dockerfile: Dockerfile
    container_name: learninglab-jupyter-mcp
    restart: unless-stopped
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=${JUPYTER_TOKEN:-learninglab}
      - GRANT_SUDO=yes
      - CHOWN_HOME=yes
      - CHOWN_HOME_OPTS=-R
      - NB_UID=1000
      - NB_GID=1000
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    volumes:
      - jupyter-notebooks:/home/jovyan/work
      - jupyter-data:/home/jovyan/.jupyter
      - ./data:/home/jovyan/data
      - ./models:/home/jovyan/models
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/api"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "mcp.phase=2"
      - "mcp.priority=high"
      - "mcp.service=jupyter"
      - "traefik.enable=true"
      - "traefik.http.routers.jupyter.rule=Host(`jupyter.learninglab.local`)"
      - "traefik.http.services.jupyter.loadbalancer.server.port=8888"

  # Data Analysis MCP Server
  data-analysis-mcp:
    build:
      context: ./.trae/mcp-servers/docker/data-analysis
      dockerfile: Dockerfile
    container_name: learninglab-data-analysis-mcp
    restart: unless-stopped
    environment:
      - PYTHON_ENV=production
      - DATA_SOURCE_TYPE=postgresql
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - ML_MODEL_PATH=/models
      - SANDBOX_MODE=true
    volumes:
      - data-analysis-models:/models
      - data-analysis-cache:/cache
      - ./data:/data
      - ./exports:/exports
    networks:
      - mcp-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "python3", "-c", "import pandas, numpy, sklearn; print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "mcp.phase=2"
      - "mcp.priority=high"
      - "mcp.service=data-analysis"

  # Phase 3: Monitoring and Analytics
  
  # Grafana MCP Server
  grafana:
    image: grafana/grafana:latest
    container_name: learninglab-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./.trae/mcp-servers/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./.trae/mcp-servers/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - mcp-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "mcp.phase=3"
      - "mcp.priority=medium"
      - "mcp.service=grafana"
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.learninglab.local`)"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: learninglab-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./.trae/mcp-servers/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "mcp.phase=3"
      - "mcp.priority=medium"
      - "mcp.service=prometheus"

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: learninglab-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - mcp-network
    labels:
      - "mcp.phase=3"
      - "mcp.priority=low"
      - "mcp.service=node-exporter"

  # Phase 4: Container Management
  
  # Portainer for container management
  portainer:
    image: portainer/portainer-ce:latest
    container_name: learninglab-portainer
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9443:9443"
    environment:
      - PORTAINER_ADMIN_PASSWORD_FILE=/run/secrets/portainer_admin_password
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer-data:/data
    networks:
      - mcp-network
    secrets:
      - portainer_admin_password
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9000/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "mcp.phase=4"
      - "mcp.priority=medium"
      - "mcp.service=portainer"
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`portainer.learninglab.local`)"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"

  # Supporting Services
  
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: learninglab-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-learninglab}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./.trae/mcp-servers/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "mcp.service=postgres"
      - "mcp.type=database"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: learninglab-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-password}
    volumes:
      - redis-data:/data
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "mcp.service=redis"
      - "mcp.type=cache"

  # Traefik Reverse Proxy
  traefik:
    image: traefik:v3.0
    container_name: learninglab-traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.myresolver.acme.tlschallenge=true
      - --certificatesresolvers.myresolver.acme.email=${ACME_EMAIL:-admin@learninglab.local}
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-letsencrypt:/letsencrypt
    networks:
      - mcp-network
    labels:
      - "mcp.service=traefik"
      - "mcp.type=proxy"

  # Email Service
  email-service:
    build:
      context: ./.trae/mcp-servers/docker/email
      dockerfile: Dockerfile
    container_name: learninglab-email-service
    restart: unless-stopped
    environment:
      - EMAIL_PROVIDER=${EMAIL_PROVIDER:-smtp}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - FROM_EMAIL=${FROM_EMAIL:-noreply@learninglab.local}
      - FROM_NAME=${FROM_NAME:-LearningLab Platform}
      - REDIS_URL=redis://redis:6379
      - TEMPLATE_DIR=/app/templates
    volumes:
      - ./.trae/mcp-servers/email/templates:/app/templates
      - email-logs:/app/logs
    networks:
      - mcp-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "mcp.phase=3"
      - "mcp.priority=medium"
      - "mcp.service=email"

# Networks
networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  # Phase 1 volumes
  git-data:
    driver: local
  python-sandbox-data:
    driver: local
  node-sandbox-data:
    driver: local
  
  # Phase 2 volumes
  jupyter-notebooks:
    driver: local
  jupyter-data:
    driver: local
  data-analysis-models:
    driver: local
  data-analysis-cache:
    driver: local
  
  # Phase 3 volumes
  grafana-data:
    driver: local
  prometheus-data:
    driver: local
  email-logs:
    driver: local
  
  # Phase 4 volumes
  portainer-data:
    driver: local
  
  # Supporting service volumes
  postgres-data:
    driver: local
  redis-data:
    driver: local
  traefik-letsencrypt:
    driver: local

# Secrets
secrets:
  portainer_admin_password:
    file: ./secrets/portainer_admin_password.txt
  grafana_admin_password:
    file: ./secrets/grafana_admin_password.txt
  postgres_password:
    file: ./secrets/postgres_password.txt
  redis_password:
    file: ./secrets/redis_password.txt