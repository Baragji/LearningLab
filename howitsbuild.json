{
  "languages":      ["TypeScript", "JavaScript", "Prisma Schema", "JSON", "YAML", "Markdown", "Shell", "Dockerfile", "CSS"],
  "packageManagers":["yarn"],
  "packageManagerVersion": "4.9.1",
  "workspaces":     ["apps/api", "apps/web", "packages/config", "packages/core", "packages/create-solid-wow", "packages/tsconfig", "packages/ui"],
  "frameworks":     {
    "backend":   {"name":"NestJS","version":"^10.3.10"},
    "frontend":  {"name":"Next.js","version":"13.4.12"}
  },
  "orm":            {"name": "Prisma", "version": "^5.22.0"},
  "database":       "PostgreSQL",
  "databaseVersion": "15",
  "buildTools":     ["Turborepo", "Webpack", "Tailwind CSS", "ts-loader"],
  "buildToolVersions": {
    "Turborepo": "^2.3.5",
    "Webpack": "^5.88.2",
    "Tailwind CSS": "^3.3.3",
    "ts-loader": "^9.4.4"
  },
  "testing":        ["Jest", "Playwright", "Supertest", "@testing-library/react", "@testing-library/jest-dom"],
  "testingVersions": {
    "Jest": "^29.6.2",
    "Playwright": "^1.52.0",
    "Supertest": "^6.3.3"
  },
  "ci_cd":          ["GitHub Actions", "JetBrains Qodana", "Render", "Vercel"],
  "docker":         true,
  "infraFiles":     ["docker-compose.yml", "Dockerfile.api", "render.yaml", ".envrc"],
  "externalAPIs":   ["JWT auth (Passport-JWT)", "Redis (for caching)"],
  "envVars":        ["DATABASE_URL", "JWT_SECRET", "JWT_EXPIRES_IN", "PORT", "NODE_ENV", "NEXT_PUBLIC_APP_NAME", "NEXT_PUBLIC_API_URL", "NEXT_PUBLIC_WS_URL", "POSTGRES_USER", "POSTGRES_PASSWORD", "POSTGRES_DB", "CI", "SALT_ROUNDS", "PLAYWRIGHT_TEST_BASE_URL"],
  "notableScripts": {
    "root": ["build", "dev", "lint", "format", "prisma:migrate", "prisma:generate", "prisma:studio", "seed"],
    "apps/api":  ["dev", "build", "start", "start:prod", "test", "test:ci", "test:e2e", "lint", "prisma:generate", "prisma:deploy", "prisma:studio", "prisma:migrate:dev", "seed"],
    "apps/web":  ["dev", "build", "start", "test", "test:ci", "test:e2e", "test:e2e:ui", "test:e2e:debug", "test:e2e:report", "lint"]
  },
  "moduleGraph": {
    "api":  ["auth", "users", "quiz", "lessons", "progress", "common", "prisma"],
    "web":  ["components", "app", "lib", "hooks", "contexts", "styles", "utils", "env"]
  },
  "uiLibraries": ["@mui/material", "@mui/icons-material", "@emotion/react", "@emotion/styled", "Tailwind CSS"],
  "stateManagement": ["@reduxjs/toolkit", "react-redux"],
  "codeQualityTools": ["ESLint", "Prettier", "Qodana", "@typescript-eslint/parser", "@typescript-eslint/eslint-plugin"],
  "codeQualityToolVersions": {
    "ESLint": "^8.57.1",
    "Prettier": "^3.0.0",
    "Qodana": "2025.1"
  },
  "nodeVersion": ">=22 <23",
  "deploymentPlatforms": {
    "api": "Render",
    "web": "Vercel"
  },
  "summary": "This is a full-stack monorepo for the LearningLab project, built with Yarn 4.9.1 and Turborepo. The backend is a NestJS application using Prisma ORM with PostgreSQL 15, and the frontend is a Next.js application with Material UI and Tailwind CSS. The project uses Redux Toolkit for state management. Environment variables are managed via .env files and a dedicated .envrc file for direnv. The project includes Docker support for containerization, GitHub Actions for CI/CD, and JetBrains Qodana for code quality analysis. Testing is done with Jest, Playwright, and Supertest. The application is deployed to Render (API) and Vercel (Web).",
  "openQuestions": [
    "The project uses .env files (e.g., apps/api/.env, root .env) and a .envrc file for direnv. Are .env.example template files provided for all services to clearly document all required environment variables for new developers and deployment environments?",
    "The provided .env file contents show placeholder values for JWT_SECRET. It's crucial to verify that no actual production secrets are inadvertently hardcoded in any configuration files (e.g., docker-compose.yml if it uses production values) or within the codebase. What is the strategy for managing production secrets securely (e.g., Doppler, Vault, CI/CD variables, platform-specific secret stores)?"
  ]
}