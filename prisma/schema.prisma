generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int       @id @default(autoincrement())
  email                String    @unique
  passwordHash         String?   // Gjort valgfri for social login
  name                 String?
  role                 Role      @default(STUDENT)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  passwordResetToken   String?   @unique
  passwordResetExpires DateTime?
  createdBy            Int?
  deletedAt            DateTime?
  updatedBy            Int?
  xp                   Int       @default(0)

  // User profile fields
  profileImage String?
  bio          String?
  socialLinks  Json?
  settings     Json?

  // Social login fields
  googleId     String?  @unique
  githubId     String?  @unique
  provider     AuthProvider?
  lastLogin    DateTime?

  // User groups
  groups       UserGroup[] @relation("UserToGroup")

  createdContentBlocks ContentBlock[] @relation("ContentBlockCreatedByUser")
  updatedContentBlocks ContentBlock[] @relation("ContentBlockUpdatedByUser")
  createdCourses       Course[]       @relation("CourseCreatedByUser")
  updatedCourses       Course[]       @relation("CourseUpdatedByUser")
  createdLessons       Lesson[]       @relation("LessonCreatedByUser")
  updatedLessons       Lesson[]       @relation("LessonUpdatedByUser")
  createdModules       Module[]       @relation("ModuleCreatedByUser")
  updatedModules       Module[]       @relation("ModuleUpdatedByUser")
  createdSubjectAreas  SubjectArea[]  @relation("SubjectAreaCreatedByUser")
  updatedSubjectAreas  SubjectArea[]  @relation("SubjectAreaUpdatedByUser")
  createdByUser        User?          @relation("CreatedByUser", fields: [createdBy], references: [id])
  createdUsers         User[]         @relation("CreatedByUser")
  updatedByUser        User?          @relation("UpdatedByUser", fields: [updatedBy], references: [id])
  updatedUsers         User[]         @relation("UpdatedByUser")
}

model SubjectArea {
  id            Int       @id @default(autoincrement())
  name          String
  slug          String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  createdBy     Int?
  updatedBy     Int?
  courses       Course[]
  createdByUser User?     @relation("SubjectAreaCreatedByUser", fields: [createdBy], references: [id])
  updatedByUser User?     @relation("SubjectAreaUpdatedByUser", fields: [updatedBy], references: [id])
}

model Course {
  id            Int         @id @default(autoincrement())
  title         String
  description   String
  slug          String      @unique
  subjectAreaId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deletedAt     DateTime?
  createdBy     Int?
  updatedBy     Int?
  createdByUser User?       @relation("CourseCreatedByUser", fields: [createdBy], references: [id])
  subjectArea   SubjectArea @relation(fields: [subjectAreaId], references: [id])
  updatedByUser User?       @relation("CourseUpdatedByUser", fields: [updatedBy], references: [id])
  modules       Module[]
}

model Module {
  id            Int       @id @default(autoincrement())
  title         String
  description   String
  order         Int
  courseId      Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  createdBy     Int?
  updatedBy     Int?
  lessons       Lesson[]
  course        Course    @relation(fields: [courseId], references: [id])
  createdByUser User?     @relation("ModuleCreatedByUser", fields: [createdBy], references: [id])
  updatedByUser User?     @relation("ModuleUpdatedByUser", fields: [updatedBy], references: [id])
}

model Lesson {
  id            Int            @id @default(autoincrement())
  title         String
  description   String
  order         Int
  moduleId      Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  createdBy     Int?
  updatedBy     Int?
  contentBlocks ContentBlock[]
  createdByUser User?          @relation("LessonCreatedByUser", fields: [createdBy], references: [id])
  module        Module         @relation(fields: [moduleId], references: [id])
  updatedByUser User?          @relation("LessonUpdatedByUser", fields: [updatedBy], references: [id])
}

model ContentBlock {
  id            Int              @id @default(autoincrement())
  type          ContentBlockType
  content       String
  order         Int
  lessonId      Int
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  deletedAt     DateTime?
  createdBy     Int?
  updatedBy     Int?
  createdByUser User?            @relation("ContentBlockCreatedByUser", fields: [createdBy], references: [id])
  lesson        Lesson           @relation(fields: [lessonId], references: [id])
  updatedByUser User?            @relation("ContentBlockUpdatedByUser", fields: [updatedBy], references: [id])
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum ContentBlockType {
  TEXT
  IMAGE_URL
  VIDEO_URL
  QUIZ_REF
  CODE
  FILE
  EMBED
  INTERACTIVE
}

enum AuthProvider {
  LOCAL
  GOOGLE
  GITHUB
}

model UserGroup {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  permissions Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  createdBy   Int?
  updatedBy   Int?
  
  users       User[]    @relation("UserToGroup")
}
