This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.github/
  workflows/
    api.yaml
    web.yaml
.repomix/
  bundles.json
api/
  web.txt
apps/
  api/
    prisma/
      migrations/
        20220307034109_initial_migrate/
          migration.sql
        20250517073440_add_user_auth_fields/
          migration.sql
        20250517122525_add_password_reset_fields/
          migration.sql
        migration_lock.toml
      schema.prisma
    src/
      auth/
        dto/
          forgot-password.dto.ts
          login.dto.ts
          reset-password.dto.ts
        guards/
          jwt-auth.guard.ts
          local-auth.guard.ts
        strategies/
          jwt/
            jwt.ts
          local/
            local.ts
        auth.controller.ts
        auth.module.ts
        auth.service.ts
      config/
        environment-variables.ts
      persistence/
        prisma/
          prisma.service.spec.ts
          prisma.service.ts
        persistence.module.ts
      users/
        dto/
          create-user.dto.ts
        users.controller.spec.ts
        users.controller.ts
        users.module.ts
        users.service.spec.ts
        users.service.ts
      app.controller.spec.ts
      app.controller.ts
      app.module.ts
      app.service.ts
      main.ts
    test/
      app.e2e-spec.ts
      jest-e2e.json
    .eslintrc.js
    .prettierrc
    Dockerfile
    nest-cli.json
    package.json
    tsconfig.build.json
    tsconfig.json
    webpack-hmr.config.js
  web/
    pages/
      _app.tsx
      forgot-password.tsx
      index.tsx
      login.tsx
      profile.tsx
      reset-password.tsx
      signup.tsx
    src/
      components/
        auth/
          ProtectedRoute.tsx
      context/
        AuthContext.tsx
      screens/
        auth/
          forgot-password/
            forgot-password.tsx
          login/
            login.test.tsx
            login.tsx
          reset-password/
            reset-password.tsx
          signup/
            signup.tsx
      store/
        services/
          api.ts
        index.ts
      styles/
        global.css
    .eslintrc.js
    Dockerfile
    jest.config.js
    jest.setup.js
    next-env.d.ts
    next.config.js
    package.json
    postcss.config.js
    README.md
    tailwind.config.js
    tsconfig.json
packages/
  config/
    src/
      env.ts
      index.ts
    eslint-preset.js
    nginx.conf
    package.json
    postcss.config.js
    tailwind.config.js
    tsconfig.json
  core/
    src/
      types/
        user.types.ts
      index.ts
    package.json
    tsconfig.json
  tsconfig/
    base.json
    nestjs.json
    nextjs.json
    package.json
    react-library.json
    README.md
  ui/
    components/
      Button/
        Button.tsx
    index.tsx
    package.json
    tsconfig.json
.dockerignore
.gitignore
.yarnrc.yml
docker-compose.yml
LICENSE
Migration.txt
Opgave 2.3.txt
package-scripts.js
package.json
README.md
Struktur.txt
terminal.txt
turbo.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="Opgave 2.3.txt">
Ja, det er noteret. Du har gemt den opdaterede .github/workflows/web.yaml fil fra Canvas.

Som vi talte om før, er den bedste måde at teste disse CI-workflowfiler på at committe og pushe dine ændringer til GitHub. Dette vil automatisk starte workflows, og du kan observere dem under "Actions"-fanen i dit repository.

Er du klar til at gøre det, eller vil du fortsætte med Docker-filerne først og teste alt samlet senere?

ja
Ja, det er noteret. Du har bekræftet, at du har gemt den opdaterede .github/workflows/web.yaml fil fra Canvas.

Vi fortsætter nu med næste del af Fase 0.1, som er at gennemgå og implementere forbedringer til Docker-filerne.

Lad os starte med Docker-filen for din API: apps/api/Dockerfile.

Opgave 2.3: Opdater apps/api/Dockerfile

Jeg har gennemgået din nuværende apps/api/Dockerfile (som jeg kender fra repomix-output.xml) og vil foreslå ændringer for at:

Opdatere Node.js versionen til at matche CI (f.eks. 20-alpine).
Sikre korrekt håndtering af Yarn Berry-konfigurationsfiler (.yarnrc.yml, .yarn mappen).
Bruge yarn install --immutable for installation af afhængigheder.
Køre turbo kommandoer via yarn turbo ... (forudsat turbo er en devDependency i din rod package.json), hvilket fjerner behovet for global installation af turbo.
Generelt forbedre struktur og klarhed i Docker-filens stages.
Her er det komplette opdaterede indhold til din apps/api/Dockerfile:
Opdateret apps/api/Dockerfile
18. maj, 15.36

Handlinger:

Åbn filen apps/api/Dockerfile.
Erstat hele indholdet med kodeblokken ovenfor fra Canvas.
Gem filen.
Vigtige noter til ændringerne:

Node Version: Opdateret til node:20-alpine i alle stages.
Global Turbo Fjernet: yarn global add turbo er fjernet. I stedet installeres alle root devDependencies (inklusive turbo) i builder stagen, så yarn turbo prune ... kan køres.
Yarn Berry Filer: .yarnrc.yml og .yarn mappen kopieres nu korrekt ind i installer stagen før yarn install køres for den "prunede" app.
yarn install --immutable: Bruges konsekvent.
Prisma Generate: Køres nu med yarn workspace api prisma generate for korrekt kontekst.
Struktur: Stages er forsøgt gjort mere logiske ift. turbo prune flowet. builder forbereder og pruner. installer installerer deps for den prunede version. sourcer bygger appen. runner kører den byggede app.
Runner Stage: Kopierer mere specifikt de nødvendige artefakter (dist, package.json, node_modules).
Når du har gemt denne fil, kan vi tage apps/web/Dockerfile på samme måde. Lad mig vide, når du er klar!

# apps/api/Dockerfile

# Builder stage: Forbereder monorepo og pruner til 'api' appen
FROM node:20-alpine AS builder
# Installer nødvendige OS pakker
RUN apk update && apk add --no-cache git # git kan være nødvendigt for nogle yarn dependencies eller turbo

WORKDIR /app

# Kopier rod package.json, yarn.lock, Yarn Berry konfigurationsfiler
# Dette lag caches, hvis disse filer ikke ændres ofte.
COPY package.json yarn.lock ./
COPY .yarnrc.yml .yarnrc.yml
COPY .yarn ./.yarn

# Installer alle afhængigheder fra roden (inkl. devDependencies som 'turbo')
# Dette gør 'turbo' CLI tilgængelig for 'prune' kommandoen.
RUN yarn install --immutable

# Kopier resten af monorepo-koden
COPY . .

# Generer en isoleret, "pruned" version af 'api' appen og dens afhængigheder
# Outputtet vil være i /app/out mappen
RUN yarn turbo prune --scope=api --docker

# Installer stage: Installerer afhængigheder for den "pruned" 'api' app
FROM node:20-alpine AS installer
# Installer OS pakker, libc6-compat er ofte nødvendig for Prisma
RUN apk update && apk add --no-cache libc6-compat
WORKDIR /app

# Kopier Yarn Berry konfigurationsfiler fra builder stagen (som har den fulde originale kontekst)
# Disse er nødvendige for at 'yarn install' fungerer korrekt med Yarn Berry.
COPY --from=builder /app/.yarnrc.yml .yarnrc.yml
COPY --from=builder /app/.yarn ./.yarn

# Kopier de "pruned" package.json filer og rod yarn.lock fra builder stagens output (/app/out)
COPY --from=builder /app/out/json/ .
COPY --from=builder /app/out/yarn.lock ./yarn.lock

# Kopier den "pruned" fulde kildekode for 'api' appen og dens interne afhængigheder
# Dette bør inkludere apps/api/prisma, hvis 'turbo prune' håndterer det korrekt.
COPY --from=builder /app/out/full/ .

# Installer afhængigheder specifikt for den "pruned" app
RUN yarn install --immutable

# Generer Prisma client
# Kør 'prisma generate' indenfor konteksten af det specifikke workspace ('api')
# Sikr at 'prisma' er en dependency (typisk devDependency) i 'api' workspacets package.json.
RUN yarn workspace api prisma generate

# Sourcer stage: Bygger selve applikationen
FROM node:20-alpine AS sourcer
WORKDIR /app

# Kopier de installerede node_modules og kildekoden fra installer stagen
COPY --from=installer /app/ .

# Byg 'api' applikationen
# Bruger 'turbo run build' til at bygge 'api' og dens interne monorepo afhængigheder.
RUN yarn turbo run build --scope=api --include-dependencies --no-deps

# Runner stage: Opretter det endelige letvægtsimage til at køre applikationen
FROM node:20-alpine AS runner
WORKDIR /app

# Sæt NODE_ENV til production for det endelige image
ENV NODE_ENV production

# Kopier kun de nødvendige build-artefakter fra 'sourcer' stagen
# Dette inkluderer 'dist' mappen for 'api' appen og dens produktions-node_modules.
COPY --from=sourcer /app/apps/api/dist ./apps/api/dist
COPY --from=sourcer /app/apps/api/package.json ./apps/api/package.json # Kan være nyttig for runtime
COPY --from=sourcer /app/node_modules ./node_modules

# Hvis din applikation ved runtime afhænger af andre byggede 'packages' fra monorepoet
# (som ikke er en del af node_modules, f.eks. via symlinks i udvikling),
# skal deres build output også kopieres her. F.eks.:
# COPY --from=sourcer /app/packages/core/dist ./packages/core/dist

# Angiv porten som API'en vil køre på (hvis ikke håndteret af dit deployment miljø)
# EXPOSE 5002 # Eller den port din app lytter på (f.eks. process.env.PORT)

# Kommando til at starte applikationen
CMD [ "node", "apps/api/dist/main.js" ]
</file>

<file path=".repomix/bundles.json">
{
  "bundles": {}
}
</file>

<file path="api/web.txt">
2.name: api-ci

on:
  push:
    branches: [master]
    paths:
      - "apps/api/**"
  pull_request:
    branches: [master]
    paths:
      - "apps/api/**"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: "postgresql://test:test@localhost:5433/mydb"

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - run: yarn global add turbo
      - run: npx nps prepare.ci.api
      - run: npx nps build.ci.api
      - run: npx nps test.ci.api

2. 
# This is a basic workflow to help you get started with Actions

name: web-ci

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [master]
    paths:
      - "apps/web/**"
  pull_request:
    branches: [master]
    paths:
      - "apps/web/**"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache node modules
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - run: yarn global add turbo
      - run: npx nps prepare.ci.web
      - run: npx nps build.ci.web
      - run: npx nps test.ci.web
</file>

<file path="apps/api/prisma/migrations/20220307034109_initial_migrate/migration.sql">
-- CreateTable
CREATE TABLE "User" (
    "id" SERIAL NOT NULL,
    "email" TEXT NOT NULL,
    "name" TEXT,

    CONSTRAINT "User_pkey" PRIMARY KEY ("id")
);

-- CreateIndex
CREATE UNIQUE INDEX "User_email_key" ON "User"("email");
</file>

<file path="apps/api/prisma/migrations/20250517073440_add_user_auth_fields/migration.sql">
/*
  Warnings:

  - Added the required column `passwordHash` to the `User` table without a default value. This is not possible if the table is not empty.
  - Added the required column `updatedAt` to the `User` table without a default value. This is not possible if the table is not empty.

*/
-- CreateEnum
CREATE TYPE "Role" AS ENUM ('USER', 'ADMIN');

-- AlterTable
ALTER TABLE "User" ADD COLUMN     "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
ADD COLUMN     "passwordHash" TEXT NOT NULL,
ADD COLUMN     "role" "Role" NOT NULL DEFAULT 'USER',
ADD COLUMN     "updatedAt" TIMESTAMP(3) NOT NULL;
</file>

<file path="apps/api/prisma/migrations/20250517122525_add_password_reset_fields/migration.sql">
/*
  Warnings:

  - A unique constraint covering the columns `[passwordResetToken]` on the table `User` will be added. If there are existing duplicate values, this will fail.

*/
-- AlterTable
ALTER TABLE "User" ADD COLUMN     "passwordResetExpires" TIMESTAMP(3),
ADD COLUMN     "passwordResetToken" TEXT;

-- CreateIndex
CREATE UNIQUE INDEX "User_passwordResetToken_key" ON "User"("passwordResetToken");
</file>

<file path="apps/api/prisma/migrations/migration_lock.toml">
# Please do not edit this file manually
# It should be added in your version-control system (i.e. Git)
provider = "postgresql"
</file>

<file path="apps/api/src/auth/dto/forgot-password.dto.ts">
// apps/api/src/auth/dto/forgot-password.dto.ts
import { IsEmail, IsNotEmpty } from 'class-validator';

export class ForgotPasswordDto {
  @IsEmail({}, { message: 'Email skal være en gyldig email-adresse.' })
  @IsNotEmpty({ message: 'Email må ikke være tom.' })
  email: string;
}
</file>

<file path="apps/api/src/auth/dto/login.dto.ts">
// apps/api/src/auth/dto/login.dto.ts
import { IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';

export class LoginDto {
  @IsEmail({}, { message: 'Email skal være en gyldig email-adresse.' })
  @IsNotEmpty({ message: 'Email må ikke være tom.' })
  email: string;

  @IsString({ message: 'Password skal være en streng.' })
  @MinLength(8, { message: 'Password skal være mindst 8 tegn langt.' }) // Juster evt. minLength baseret på dine krav
  @IsNotEmpty({ message: 'Password må ikke være tomt.' })
  password: string;
}
</file>

<file path="apps/api/src/auth/dto/reset-password.dto.ts">
// apps/api/src/auth/dto/reset-password.dto.ts
import { IsNotEmpty, IsString, MinLength } from 'class-validator'; // Matches er fjernet fra import

export class ResetPasswordDto {
  @IsString({ message: 'Reset token skal være en streng.' })
  @IsNotEmpty({ message: 'Reset token må ikke være tomt.' })
  token: string;

  @IsString({ message: 'Nyt password skal være en streng.' })
  @IsNotEmpty({ message: 'Nyt password må ikke være tomt.' })
  @MinLength(8, { message: 'Nyt password skal være mindst 8 tegn langt.' })
  // Valgfri: Tilføj en regex for at håndhæve password-kompleksitet, f.eks. mindst ét stort bogstav, ét lille bogstav, ét tal og ét specialtegn.
  // @Matches(/((?=.*\d)|(?=.*\W+))(?![.\n])(?=.*[A-Z])(?=.*[a-z]).*$/, { message: 'Passwordet er for svagt. Det skal indeholde store og små bogstaver, tal og specialtegn.'})
  newPassword: string;

  @IsString({ message: 'Bekræft password skal være en streng.' })
  @IsNotEmpty({ message: 'Bekræft password må ikke være tomt.' })
  // Validering af, om confirmPassword matcher newPassword, vil blive håndteret i AuthService.
  confirmPassword: string;
}
</file>

<file path="apps/api/src/auth/guards/local-auth.guard.ts">
// apps/api/src/auth/guards/local-auth.guard.ts
import { Injectable } from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';

/**
 * A guard that invokes the local Passport strategy.
 * It automatically handles the logic of calling the LocalStrategy's validate() method
 * and setting up req.user upon successful authentication.
 * If authentication fails, it automatically sends a 401 Unauthorized response.
 */
@Injectable()
export class LocalAuthGuard extends AuthGuard('local') {}
</file>

<file path="apps/api/src/config/environment-variables.ts">
import * as Joi from 'joi';

export interface EnvironmentVariables {
  DATABASE_URL: string;
}

export const validationSchemaForEnv = Joi.object<EnvironmentVariables, true>({
  DATABASE_URL: Joi.string().required(),
});
</file>

<file path="apps/api/src/persistence/prisma/prisma.service.spec.ts">
import { Test, TestingModule } from '@nestjs/testing';
import { PrismaService } from './prisma.service';

describe('PrismaService', () => {
  let service: PrismaService;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [PrismaService],
    }).compile();

    service = module.get<PrismaService>(PrismaService);
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });
});
</file>

<file path="apps/api/src/persistence/persistence.module.ts">
import { Module } from '@nestjs/common';
import { PrismaService } from './prisma/prisma.service';

@Module({
  providers: [PrismaService],
  exports: [PrismaService],
})
export class PersistenceModule {}
</file>

<file path="apps/api/src/users/users.controller.spec.ts">
import { Test, TestingModule } from '@nestjs/testing';
import { UsersController } from './users.controller';

describe('UsersController', () => {
  let controller: UsersController;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [UsersController],
    }).compile();

    controller = module.get<UsersController>(UsersController);
  });

  it('should be defined', () => {
    expect(controller).toBeDefined();
  });
});
</file>

<file path="apps/api/src/users/users.module.ts">
// apps/api/src/users/users.module.ts
import { Module } from '@nestjs/common';
import { UsersService } from './users.service';
import { UsersController } from './users.controller';
import { PersistenceModule } from '../persistence/persistence.module'; // Importer PersistenceModule, der indeholder PrismaService

@Module({
  imports: [PersistenceModule], // Gør PrismaService tilgængelig for UsersService
  controllers: [UsersController],
  providers: [UsersService],
  exports: [UsersService], // Gør UsersService tilgængelig for andre moduler (f.eks. AuthModule senere)
})
export class UsersModule {}
</file>

<file path="apps/api/src/users/users.service.spec.ts">
import { Test, TestingModule } from '@nestjs/testing';
import { UsersService } from './users.service';

describe('UsersService', () => {
  let service: UsersService;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [UsersService],
    }).compile();

    service = module.get<UsersService>(UsersService);
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });
});
</file>

<file path="apps/api/src/app.controller.spec.ts">
import { Test, TestingModule } from '@nestjs/testing';
import { AppController } from './app.controller';
import { AppService } from './app.service';
import { PersistenceModule } from './persistence/persistence.module';

describe('AppController', () => {
  let appController: AppController;

  beforeEach(async () => {
    const app: TestingModule = await Test.createTestingModule({
      imports: [PersistenceModule],
      controllers: [AppController],
      providers: [AppService],
    }).compile();

    appController = app.get<AppController>(AppController);
  });

  describe('root', () => {
    it('should return "Hello World!"', async () => {
      expect(await appController.getHello()).toEqual({
        message: 'Hello World',
      });
    });
  });
});
</file>

<file path="apps/api/src/app.controller.ts">
import { Controller, Get } from '@nestjs/common';
import { AppService } from './app.service';

@Controller()
export class AppController {
  constructor(private readonly appService: AppService) {}

  @Get()
  async getHello(): Promise<{ message: string }> {
    return await this.appService.getHello();
  }
}
</file>

<file path="apps/api/src/app.service.ts">
import { Injectable } from '@nestjs/common';

@Injectable()
export class AppService {
  async getHello(): Promise<{ message: string }> {
    return { message: 'Hello World' };
  }
}
</file>

<file path="apps/api/test/app.e2e-spec.ts">
import { Test, TestingModule } from '@nestjs/testing';
import { INestApplication } from '@nestjs/common';
import * as request from 'supertest';
import { AppModule } from './../src/app.module';

describe('AppController (e2e)', () => {
  let app: INestApplication;

  beforeEach(async () => {
    const moduleFixture: TestingModule = await Test.createTestingModule({
      imports: [AppModule],
    }).compile();

    app = moduleFixture.createNestApplication();
    await app.init();
  });

  it('/ (GET)', () => {
    return request(app.getHttpServer())
      .get('/')
      .expect(200)
      .expect('Hello World!');
  });
});
</file>

<file path="apps/api/test/jest-e2e.json">
{
  "moduleFileExtensions": ["js", "json", "ts"],
  "rootDir": ".",
  "testEnvironment": "node",
  "testRegex": ".e2e-spec.ts$",
  "transform": {
    "^.+\\.(t|j)s$": "ts-jest"
  }
}
</file>

<file path="apps/api/.eslintrc.js">
module.exports = {
  parser: '@typescript-eslint/parser',
  parserOptions: {
    project: 'tsconfig.json',
    sourceType: 'module',
    tsconfigRootDir: __dirname,
  },
  plugins: ['@typescript-eslint/eslint-plugin'],
  extends: [
    'plugin:@typescript-eslint/recommended',
    'plugin:prettier/recommended',
  ],
  root: true,
  env: {
    node: true,
    jest: true,
  },
  ignorePatterns: ['.eslintrc.js'],
  rules: {
    '@typescript-eslint/interface-name-prefix': 'off',
    '@typescript-eslint/explicit-function-return-type': 'off',
    '@typescript-eslint/explicit-module-boundary-types': 'off',
    '@typescript-eslint/no-explicit-any': 'off',
  },
};
</file>

<file path="apps/api/.prettierrc">
{
  "singleQuote": true,
  "trailingComma": "all"
}
</file>

<file path="apps/api/Dockerfile">
FROM node:16-alpine AS builder
RUN apk update
# Set working directory
WORKDIR /app
RUN yarn global add turbo
COPY . .
RUN turbo prune --scope=api --docker

# Add lockfile and package.json's of isolated subworkspace
FROM node:16-alpine AS installer
RUN apk update
WORKDIR /app
COPY --from=builder /app/out/json/ .
COPY --from=builder /app/out/yarn.lock ./yarn.lock
COPY --from=builder /app/turbo.json ./turbo.json
COPY --from=builder /app/apps/api/prisma ./prisma
RUN yarn install --frozen-lockfile
RUN yarn prisma generate 


FROM node:16-alpine AS sourcer
WORKDIR /app
COPY --from=installer /app/ .
COPY --from=builder /app/out/full/ .
COPY .gitignore .gitignore
RUN yarn turbo run build --scope=api --include-dependencies --no-deps

FROM node:16-alpine as runner
WORKDIR /app
COPY --from=sourcer /app/ .
CMD [ "node", "apps/api/dist/main.js" ]
</file>

<file path="apps/api/nest-cli.json">
{
  "collection": "@nestjs/schematics",
  "sourceRoot": "src"
}
</file>

<file path="apps/api/tsconfig.build.json">
{
  "extends": "./tsconfig.json",
  "exclude": [
    "node_modules",
    "../../node_modules",
    "test",
    "dist",
    "**/*spec.ts"
  ]
}
</file>

<file path="apps/api/tsconfig.json">
{
  "extends": "tsconfig/nestjs.json",
  "compilerOptions": {
    "outDir": "./dist",
    "baseUrl": "./"
  }
}
</file>

<file path="apps/web/pages/forgot-password.tsx">
// apps/web/pages/forgot-password.tsx
import { ForgotPasswordScreen } from '../src/screens/auth/forgot-password/forgot-password';

export default function ForgotPasswordPage() {
  return <ForgotPasswordScreen />;
}
</file>

<file path="apps/web/pages/index.tsx">
import { Button } from "ui";
import { useHelloQuery } from "../src/store/services/api";

export default function Web() {
  const { data } = useHelloQuery();

  return (
    <div>
      <h1>{data?.message}</h1>
      <Button />
    </div>
  );
}
</file>

<file path="apps/web/pages/login.tsx">
// apps/web/pages/login.tsx
import { LoginScreen } from '../src/screens/auth/login/login';

export default function LoginPage() {
  return <LoginScreen />;
}
</file>

<file path="apps/web/pages/reset-password.tsx">
// apps/web/pages/reset-password.tsx
import { ResetPasswordScreen } from '../src/screens/auth/reset-password/reset-password';

export default function ResetPasswordPage() {
  return <ResetPasswordScreen />;
}
</file>

<file path="apps/web/pages/signup.tsx">
// apps/web/pages/signup.tsx
    import { SignupScreen } from '../src/screens/auth/signup/signup'; // Sørg for at stien er korrekt

    export default function SignupPage() {
      return <SignupScreen />;
    }
</file>

<file path="apps/web/src/components/auth/ProtectedRoute.tsx">
// apps/web/src/components/auth/ProtectedRoute.tsx
import React, { ReactNode } from 'react';
import { useRouter } from 'next/router';
import { useAuth } from '../../context/AuthContext';

interface ProtectedRouteProps {
  children: ReactNode; // Den komponent/side, der skal beskyttes
}

export default function ProtectedRoute({ children }: ProtectedRouteProps) {
  const { user, isLoading: authIsLoading } = useAuth();
  const router = useRouter();

  // Mens AuthContext initialiserer og tjekker for bruger/token, vis en loading-tilstand.
  if (authIsLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-100 font-inter">
        <div className="p-8 text-center">
          <svg className="animate-spin h-10 w-10 text-indigo-600 mx-auto mb-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          <p className="text-lg text-gray-700">Verificerer adgang...</p>
        </div>
      </div>
    );
  }

  // Når AuthContext er færdig med at loade:
  // Hvis der ikke er en bruger, omdiriger til login-siden.
  // Vi bruger useEffect i selve komponenten for at undgå fejl under server-side rendering (SSR)
  // eller static generation, hvor routeren måske ikke er fuldt initialiseret.
  React.useEffect(() => {
    if (!authIsLoading && !user) {
      console.log('ProtectedRoute: Ingen bruger, omdirigerer til /login');
      router.replace('/login');
    }
  }, [authIsLoading, user, router]);

  // Hvis der er en bruger (og vi ikke længere loader), render den beskyttede komponent (children).
  if (user) {
    return <>{children}</>;
  }

  // Hvis brugeren ikke er logget ind og omdirigering endnu ikke er sket (eller som fallback),
  // kan vi returnere null eller en anden loading-indikator for at undgå at flashe den ubeskyttede side.
  // Ofte vil useEffect-hooken ovenfor håndtere omdirigeringen hurtigt.
  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100 font-inter">
        <div className="p-8 text-center">
          <svg className="animate-spin h-10 w-10 text-indigo-600 mx-auto mb-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          <p className="text-lg text-gray-700">Omdirigerer...</p>
        </div>
      </div>
  ); // Eller return null;
}
</file>

<file path="apps/web/src/context/AuthContext.tsx">
// apps/web/src/context/AuthContext.tsx
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { useRouter } from 'next/router';

// Definer en type for brugerobjektet, som vi forventer fra backend
// Denne type matcher den, vi brugte i ProfilePage og den, som vores /api/auth/profile returnerer
interface User {
  id: number;
  email: string;
  name?: string;
  role: string;
  // Tilføj andre felter, som dit backend /api/auth/profile endpoint returnerer
}

// Definer typen for værdierne i vores AuthContext
interface AuthContextType {
  user: User | null; // Den aktuelle bruger eller null, hvis ikke logget ind
  token: string | null; // JWT token
  isLoading: boolean; // Til at vise loading state under auth operationer
  login: (email: string, password: string) => Promise<void>; // Funktion til at logge ind
  logout: () => void; // Funktion til at logge ud
  // Vi kan tilføje signup, forgotPassword, resetPassword funktioner her senere
}

// Opret AuthContext med en default værdi (typisk undefined eller null)
// Vi bruger 'undefined' for at kunne tjekke, om provideren er brugt korrekt.
const AuthContext = createContext<AuthContextType | undefined>(undefined);

// Definer props for AuthProvider
interface AuthProviderProps {
  children: ReactNode; // Gør det muligt at wrappe andre komponenter
}

export function AuthProvider({ children }: AuthProviderProps) {
  const [user, setUser] = useState<User | null>(null);
  const [token, setToken] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(true); // Start med loading true for at tjekke initial auth state
  const router = useRouter();

  // Funktion til at hente brugerprofil baseret på et token
  const fetchUserProfile = async (currentToken: string) => {
    setIsLoading(true);
    try {
      const response = await fetch('/api/auth/profile', {
        headers: {
          'Authorization': `Bearer ${currentToken}`,
          'Content-Type': 'application/json',
        },
      });
      if (!response.ok) {
        // Hvis token er ugyldigt/udløbet, log ud
        if (response.status === 401) {
          console.error('AuthContext: Ugyldigt token ved hentning af profil. Logger ud.');
          localStorage.removeItem('accessToken');
          setToken(null);
          setUser(null);
        }
        throw new Error('Kunne ikke hente brugerprofil');
      }
      const userData: User = await response.json();
      setUser(userData);
      setToken(currentToken); // Sørg for at token state også er sat
      console.log('AuthContext: Brugerprofil hentet og sat:', userData);
    } catch (error) {
      console.error('AuthContext: Fejl ved hentning af brugerprofil:', error);
      localStorage.removeItem('accessToken'); // Ryd token ved fejl
      setToken(null);
      setUser(null);
    } finally {
      setIsLoading(false);
    }
  };
  
  // useEffect til at tjekke for token i localStorage ved app-start (kun én gang)
  useEffect(() => {
    console.log('AuthContext: Initialiserer auth state...');
    const storedToken = localStorage.getItem('accessToken');
    if (storedToken) {
      console.log('AuthContext: Token fundet i localStorage, forsøger at hente profil.');
      fetchUserProfile(storedToken);
    } else {
      console.log('AuthContext: Intet token fundet i localStorage.');
      setIsLoading(false); // Ingen token, så vi er ikke i gang med at loade bruger
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []); // Tomt dependency array sikrer, at dette kun kører ved mount

  const login = async (email: string, password: string) => {
    setIsLoading(true);
    try {
      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Login fejlede');
      }

      const data: { access_token: string } = await response.json();
      localStorage.setItem('accessToken', data.access_token);
      console.log('AuthContext: Token gemt efter login.');
      await fetchUserProfile(data.access_token); // Hent og sæt brugerprofil efter login
      router.push('/profile'); // Omdiriger til profil efter succesfuldt login
    } catch (error: any) {
      console.error('AuthContext: Login fejl:', error);
      localStorage.removeItem('accessToken');
      setToken(null);
      setUser(null);
      setIsLoading(false);
      throw error; // Kast fejlen videre, så LoginScreen kan fange den og vise den
    }
    // setIsLoading(false) håndteres i fetchUserProfile's finally block
  };

  const logout = () => {
    console.log('AuthContext: Logger ud...');
    localStorage.removeItem('accessToken');
    setToken(null);
    setUser(null);
    router.push('/login'); // Omdiriger til login-siden efter logout
  };

  // Værdien, der gøres tilgængelig for alle consumers af context'en
  const value = {
    user,
    token,
    isLoading,
    login,
    logout,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
}

// Custom hook for nem adgang til AuthContext
export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth skal bruges inden i en AuthProvider');
  }
  return context;
}
</file>

<file path="apps/web/src/screens/auth/forgot-password/forgot-password.tsx">
// apps/web/src/screens/auth/forgot-password/forgot-password.tsx
import React, { useState, FormEvent } from 'react';
import { useRouter } from 'next/router'; // Selvom vi ikke omdirigerer direkte her, kan den være nyttig

export function ForgotPasswordScreen() {
  const router = useRouter();
  const [email, setEmail] = useState<string>('');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);

  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    setIsLoading(true);
    setError(null);
    setSuccessMessage(null);

    try {
      const response = await fetch('/api/auth/forgot-password', { // Kalder dit backend endpoint
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email }),
      });

      // Backend returnerer altid 200 OK for forgot-password for ikke at afsløre om en email eksisterer.
      // Vi stoler på beskeden fra backend.
      const data = await response.json(); 

      if (!response.ok) {
        // Dette burde ikke ske ofte med forgot-password, medmindre der er en serverfejl
        // eller en uventet valideringsfejl, der ikke returnerer 200.
        let errorMessage = 'Anmodning om nulstilling af adgangskode fejlede.';
        if (data && data.message) {
          if (Array.isArray(data.message)) {
            errorMessage = data.message.join(', ');
          } else {
            errorMessage = data.message;
          }
        }
        throw new Error(errorMessage);
      }
      
      console.log('Anmodning om glemt adgangskode succesfuld:', data);
      // Backend sender en generisk succesbesked, som vi viser.
      setSuccessMessage(data.message || 'Hvis din email findes i systemet, vil du modtage et link til at nulstille dit password.');
      setEmail(''); // Ryd email feltet efter succes

    } catch (err: any) {
      console.error('Fejl ved glemt adgangskode:', err);
      setError(err.message || 'Der opstod en uventet fejl.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100 font-inter">
      <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-xl shadow-xl">
        <h2 className="text-3xl font-bold text-center text-gray-900">
          Glemt Adgangskode?
        </h2>
        <p className="text-center text-sm text-gray-600">
          Indtast din emailadresse, så sender vi dig et link til at nulstille din adgangskode.
        </p>
        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Email felt */}
          <div>
            <label
              htmlFor="email"
              className="block text-sm font-medium text-gray-700"
            >
              Emailadresse
            </label>
            <input
              id="email"
              name="email"
              type="email"
              autoComplete="email"
              required
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              disabled={isLoading || !!successMessage}
              className="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm disabled:bg-gray-50"
              placeholder="din@email.com"
            />
          </div>
          
          {/* Fejlmeddelelse */}
          {error && (
            <div className="p-3 text-sm text-red-700 bg-red-100 border border-red-400 rounded-md">
              {error}
            </div>
          )}

          {/* Succesmeddelelse */}
          {successMessage && (
            <div className="p-3 text-sm text-green-700 bg-green-100 border border-green-400 rounded-md">
              {successMessage}
            </div>
          )}

          {/* Submit knap */}
          <div>
            <button
              type="submit"
              disabled={isLoading || !!successMessage}
              className="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-indigo-400 disabled:cursor-not-allowed transition-colors duration-150"
            >
              {isLoading ? (
                <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              ) : (
                'Send Nulstillingslink'
              )}
            </button>
          </div>
        </form>
        <p className="text-sm text-center text-gray-600">
          Tilbage til{' '}
          <a href="/login" className="font-medium text-indigo-600 hover:text-indigo-500">
            Login
          </a>
        </p>
      </div>
    </div>
  );
}
</file>

<file path="apps/web/src/screens/auth/login/login.test.tsx">
import { render } from "@testing-library/react";
import { LoginScreen } from "./login";

test("render login component", () => {
  render(<LoginScreen />);
});
</file>

<file path="apps/web/src/screens/auth/reset-password/reset-password.tsx">
// apps/web/src/screens/auth/reset-password/reset-password.tsx
import React, { useState, FormEvent, useEffect } from 'react';
import { useRouter } from 'next/router';

export function ResetPasswordScreen() {
  const router = useRouter();
  const { token: queryToken } = router.query; // Hent token fra URL query parameter

  const [token, setToken] = useState<string>('');
  const [newPassword, setNewPassword] = useState<string>('');
  const [confirmPassword, setConfirmPassword] = useState<string>('');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);

  // Sæt token fra URL, når komponenten mounter, hvis det findes
  useEffect(() => {
    if (queryToken && typeof queryToken === 'string') {
      setToken(queryToken);
    }
  }, [queryToken]);

  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    setIsLoading(true);
    setError(null);
    setSuccessMessage(null);

    if (newPassword !== confirmPassword) {
      setError('De nye adgangskoder matcher ikke.');
      setIsLoading(false);
      return;
    }

    if (!token) {
        setError('Password reset token mangler. Prøv at anmode om et nyt nulstillingslink.');
        setIsLoading(false);
        return;
    }

    try {
      const response = await fetch('/api/auth/reset-password', { // Kalder dit backend endpoint
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ token, newPassword, confirmPassword }), // confirmPassword sendes med, da backend DTO forventer det
      });

      const data = await response.json();

      if (!response.ok) {
        let errorMessage = 'Nulstilling af adgangskode fejlede.';
        if (data && data.message) {
          if (Array.isArray(data.message)) {
            errorMessage = data.message.join(', ');
          } else {
            errorMessage = data.message;
          }
        }
        throw new Error(errorMessage);
      }
      
      console.log('Nulstilling af adgangskode succesfuld:', data);
      setSuccessMessage(data.message || 'Din adgangskode er blevet nulstillet! Du bliver nu sendt til login-siden.');
      
      // Omdiriger til login-siden efter en kort pause
      setTimeout(() => {
        router.push('/login');
      }, 3000); // 3 sekunders forsinkelse

    } catch (err: any) {
      console.error('Fejl ved nulstilling af adgangskode:', err);
      setError(err.message || 'Der opstod en uventet fejl.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100 font-inter">
      <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-xl shadow-xl">
        <h2 className="text-3xl font-bold text-center text-gray-900">
          Nulstil Adgangskode
        </h2>
        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Token felt (kan være skjult eller forudfyldt fra URL) */}
          <div>
            <label
              htmlFor="token"
              className="block text-sm font-medium text-gray-700"
            >
              Nulstillings-token
            </label>
            <input
              id="token"
              name="token"
              type="text"
              required
              value={token}
              onChange={(e) => setToken(e.target.value)}
              disabled={isLoading || !!successMessage || !!queryToken} // Deaktiver hvis token kommer fra URL
              className="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm disabled:bg-gray-100"
              placeholder="Indsæt dit token her"
            />
             {queryToken && <p className="mt-1 text-xs text-gray-500">Token hentet fra URL.</p>}
          </div>

          {/* Nyt Password felt */}
          <div>
            <label
              htmlFor="newPassword"
              className="block text-sm font-medium text-gray-700"
            >
              Ny Adgangskode
            </label>
            <input
              id="newPassword"
              name="newPassword"
              type="password"
              autoComplete="new-password"
              required
              value={newPassword}
              onChange={(e) => setNewPassword(e.target.value)}
              disabled={isLoading || !!successMessage}
              className="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm disabled:bg-gray-50"
              placeholder="Din nye adgangskode"
            />
          </div>

          {/* Bekræft Nyt Password felt */}
          <div>
            <label
              htmlFor="confirmPassword"
              className="block text-sm font-medium text-gray-700"
            >
              Bekræft Ny Adgangskode
            </label>
            <input
              id="confirmPassword"
              name="confirmPassword"
              type="password"
              autoComplete="new-password"
              required
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              disabled={isLoading || !!successMessage}
              className="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm disabled:bg-gray-50"
              placeholder="Gentag ny adgangskode"
            />
          </div>
          
          {/* Fejlmeddelelse */}
          {error && (
            <div className="p-3 text-sm text-red-700 bg-red-100 border border-red-400 rounded-md">
              {error}
            </div>
          )}

          {/* Succesmeddelelse */}
          {successMessage && (
            <div className="p-3 text-sm text-green-700 bg-green-100 border border-green-400 rounded-md">
              {successMessage}
            </div>
          )}

          {/* Submit knap */}
          <div>
            <button
              type="submit"
              disabled={isLoading || !!successMessage}
              className="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-indigo-400 disabled:cursor-not-allowed transition-colors duration-150"
            >
              {isLoading ? (
                <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              ) : (
                'Nulstil Adgangskode'
              )}
            </button>
          </div>
        </form>
        <p className="text-sm text-center text-gray-600">
          Husker du din adgangskode?{' '}
          <a href="/login" className="font-medium text-indigo-600 hover:text-indigo-500">
            Log ind
          </a>
        </p>
      </div>
    </div>
  );
}
</file>

<file path="apps/web/src/screens/auth/signup/signup.tsx">
// apps/web/src/screens/auth/signup/signup.tsx
import React, { useState, FormEvent } from 'react';
import { useRouter } from 'next/router';
// Vi kan overveje at bruge useAuth() her, hvis vi vil logge brugeren ind automatisk efter signup,
// men lad os starte simpelt og bare omdirigere til login.
// import { useAuth } from '../../../context/AuthContext';

export function SignupScreen() {
  const router = useRouter();
  // const { login } = useAuth(); // Hvis du vil logge ind automatisk

  const [name, setName] = useState<string>('');
  const [email, setEmail] = useState<string>('');
  const [password, setPassword] = useState<string>('');
  const [confirmPassword, setConfirmPassword] = useState<string>('');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);

  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    setIsLoading(true);
    setError(null);
    setSuccessMessage(null);

    if (password !== confirmPassword) {
      setError('Adgangskoderne matcher ikke.');
      setIsLoading(false);
      return;
    }

    try {
      const response = await fetch('/api/users/signup', { // Kalder dit backend signup endpoint
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ name: name || undefined, email, password }), // Send name kun hvis det er udfyldt
      });

      if (!response.ok) {
        const errorData = await response.json();
        let errorMessage = 'Registrering fejlede.';
        if (errorData && errorData.message) {
          if (Array.isArray(errorData.message)) {
            errorMessage = errorData.message.join(', ');
          } else {
            errorMessage = errorData.message;
          }
        }
        throw new Error(errorMessage);
      }

      // const userData = await response.json(); // Brugerdata fra backend efter oprettelse
      console.log('Registrering succesfuld');
      setSuccessMessage('Din konto er blevet oprettet! Du bliver nu sendt til login-siden.');
      
      // Omdiriger til login-siden efter en kort pause, så brugeren kan se succesbeskeden.
      setTimeout(() => {
        router.push('/login');
      }, 3000); // 3 sekunders forsinkelse

      // Alternativt: Log brugeren direkte ind
      // try {
      //   await login(email, password); // Antager at din AuthContext's login er tilgængelig
      //   // router.push('/profile'); // AuthContext's login håndterer omdirigering
      // } catch (loginError: any) {
      //   setError(`Konto oprettet, men automatisk login fejlede: ${loginError.message}. Prøv at logge ind manuelt.`);
      // }

    } catch (err: any) {
      console.error('Registreringsfejl:', err);
      setError(err.message || 'Der opstod en uventet fejl under registrering.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100 font-inter">
      <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-xl shadow-xl">
        <h2 className="text-3xl font-bold text-center text-gray-900">
          Opret en ny konto
        </h2>
        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Navn felt (valgfrit) */}
          <div>
            <label
              htmlFor="name"
              className="block text-sm font-medium text-gray-700"
            >
              Navn (valgfrit)
            </label>
            <input
              id="name"
              name="name"
              type="text"
              autoComplete="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              disabled={isLoading}
              className="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm disabled:bg-gray-50"
              placeholder="Dit fulde navn"
            />
          </div>

          {/* Email felt */}
          <div>
            <label
              htmlFor="email"
              className="block text-sm font-medium text-gray-700"
            >
              Emailadresse
            </label>
            <input
              id="email"
              name="email"
              type="email"
              autoComplete="email"
              required
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              disabled={isLoading}
              className="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm disabled:bg-gray-50"
              placeholder="din@email.com"
            />
          </div>

          {/* Password felt */}
          <div>
            <label
              htmlFor="password"
              className="block text-sm font-medium text-gray-700"
            >
              Adgangskode
            </label>
            <input
              id="password"
              name="password"
              type="password"
              autoComplete="new-password"
              required
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              disabled={isLoading}
              className="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm disabled:bg-gray-50"
              placeholder="Vælg en stærk adgangskode"
            />
          </div>

          {/* Bekræft Password felt */}
          <div>
            <label
              htmlFor="confirmPassword"
              className="block text-sm font-medium text-gray-700"
            >
              Bekræft adgangskode
            </label>
            <input
              id="confirmPassword"
              name="confirmPassword"
              type="password"
              autoComplete="new-password"
              required
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              disabled={isLoading}
              className="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm disabled:bg-gray-50"
              placeholder="Gentag din adgangskode"
            />
          </div>
          
          {/* Fejlmeddelelse */}
          {error && (
            <div className="p-3 text-sm text-red-700 bg-red-100 border border-red-400 rounded-md">
              {error}
            </div>
          )}

          {/* Succesmeddelelse */}
          {successMessage && (
            <div className="p-3 text-sm text-green-700 bg-green-100 border border-green-400 rounded-md">
              {successMessage}
            </div>
          )}

          {/* Submit knap */}
          <div>
            <button
              type="submit"
              disabled={isLoading || !!successMessage} // Deaktiver også hvis succesbesked vises
              className="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-indigo-400 disabled:cursor-not-allowed transition-colors duration-150"
            >
              {isLoading ? (
                <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  {/* ... spinner SVG ... */}
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              ) : (
                'Opret konto'
              )}
            </button>
          </div>
        </form>
        <p className="text-sm text-center text-gray-600">
          Har du allerede en konto?{' '}
          <a href="/login" className="font-medium text-indigo-600 hover:text-indigo-500">
            Log ind her
          </a>
        </p>
      </div>
    </div>
  );
}
</file>

<file path="apps/web/src/store/services/api.ts">
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

export const api = createApi({
  reducerPath: "baseApi",
  baseQuery: fetchBaseQuery({
    baseUrl: "api",
  }),
  tagTypes: [],
  endpoints: (builder) => ({
    hello: builder.query<{ message: string }, void>({
      query: () => ({
        url: "/",
      }),
    }),
  }),
});

export const { useHelloQuery } = api;
</file>

<file path="apps/web/src/store/index.ts">
import { configureStore } from "@reduxjs/toolkit";
import { TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";

import { api } from "./services/api";

export function makeStore() {
  return configureStore({
    reducer: {
      [api.reducerPath]: api.reducer,
    },

    middleware: (getDefaultMiddleware) =>
      getDefaultMiddleware().concat(api.middleware),
  });
}

const store = makeStore();

export type RootState = ReturnType<typeof store.getState>;

export type AppDispatch = typeof store.dispatch;

export const useAppDispatch = () => useDispatch<AppDispatch>();

export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;

export default store;
</file>

<file path="apps/web/src/styles/global.css">
@tailwind base;
@tailwind components;
@tailwind utilities;
</file>

<file path="apps/web/.eslintrc.js">
module.exports = require("config/eslint-preset");
</file>

<file path="apps/web/Dockerfile">
FROM node:16-alpine AS builder
RUN apk update
# Set working directory
WORKDIR /app
RUN yarn global add turbo
COPY . .
# Only Take packages that are needed to compile this app
RUN turbo prune --scope=web --docker

# Add lockfile and package.json's of isolated subworkspace
FROM node:16-alpine AS installer
RUN apk update
RUN apk add --no-cache libc6-compat
WORKDIR /app
COPY --from=builder /app/out/json/ .
COPY --from=builder /app/out/yarn.lock ./yarn.lock
COPY --from=builder /app/turbo.json ./turbo.json
RUN yarn install --frozen-lockfile


FROM node:16-alpine AS sourcer
RUN apk update
WORKDIR /app
COPY --from=installer /app/ .
COPY --from=builder /app/out/full/ .
COPY .gitignore .gitignore
RUN yarn turbo run build --scope=web --include-dependencies --no-deps

FROM node:16-alpine as runner
WORKDIR /app
COPY --from=sourcer /app/ .
WORKDIR /app/apps/web/
CMD [ "npm", "start" ]
</file>

<file path="apps/web/jest.config.js">
const nextJest = require("next/jest");

const createJestConfig = nextJest({
  // Provide the path to your Next.js app to load next.config.js and .env files in your test environment
  dir: "./",
});

// Add any custom config to be passed to Jest
const customJestConfig = {
  // Add more setup options before each test is run
  // setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
  // if using TypeScript with a baseUrl set to the root directory then you need the below for alias' to work
  moduleDirectories: ["node_modules", "<rootDir>/"],
  testEnvironment: "jest-environment-jsdom",
};

// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async
module.exports = createJestConfig(customJestConfig);
</file>

<file path="apps/web/jest.setup.js">
// Optional: configure or set up a testing framework before each test.
// If you delete this file, remove `setupFilesAfterEnv` from `jest.config.js`

// Used for __tests__/testing-library.js
// Learn more: https://github.com/testing-library/jest-dom
import "@testing-library/jest-dom/extend-expect";
</file>

<file path="apps/web/next-env.d.ts">
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.
</file>

<file path="apps/web/next.config.js">
const withTM = require("next-transpile-modules")(["ui"]);

module.exports = withTM({
  reactStrictMode: true,
});
</file>

<file path="apps/web/postcss.config.js">
module.exports = require("config/postcss.config");
</file>

<file path="apps/web/README.md">
## Getting Started

First, run the development server:

```bash
yarn dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `pages/index.js`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.js`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_source=github.com&utm_medium=referral&utm_campaign=turborepo-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.
</file>

<file path="apps/web/tailwind.config.js">
module.exports = require("config/tailwind.config");
</file>

<file path="apps/web/tsconfig.json">
{
  "extends": "tsconfig/nextjs.json",
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", "jest.setup.js"],
  "exclude": ["node_modules"]
}
</file>

<file path="packages/config/src/env.ts">
// packages/config/src/env.ts
import { z } from 'zod';

/**
 * Definerer skemaet for server-side miljøvariabler.
 * Brug .server() for at sikre, at disse ikke utilsigtet inkluderes i client-side bundles.
 */
const serverSchema = z.object({
  DATABASE_URL: z.string().url({ message: "DATABASE_URL skal være en gyldig URL." }),
  JWT_SECRET: z.string().min(32, { message: "JWT_SECRET skal være mindst 32 tegn lang." }),
  JWT_EXPIRES_IN: z.string().default('1h'), // Default værdi hvis ikke sat
  // NODE_ENV: z.enum(['development', 'production', 'test']).default('development'), // Eksempel
});

/**
 * Definerer skemaet for client-side (public) miljøvariabler.
 * Disse skal prefixxes med NEXT_PUBLIC_ for Next.js applikationer.
 */
const clientSchema = z.object({
  NEXT_PUBLIC_APP_NAME: z.string().default('Læringsplatform'),
  NEXT_PUBLIC_WS_URL: z.string().url({ message: "NEXT_PUBLIC_WS_URL skal være en gyldig URL." }).default('http://localhost:3001'),
  // Tilføj andre NEXT_PUBLIC_ variabler her efter behov
});

/**
 * Miljøvariabler, der er tilgængelige for både server og client.
 * Dette er typisk ikke anbefalet for følsomme variabler.
 * For Next.js, er det bedre at adskille dem klart.
 * Hvis en variabel skal bruges på både server og client (og ikke er følsom),
 * kan den defineres her eller i clientSchema (hvis public) og serverSchema (hvis server).
 */
// const sharedSchema = z.object({
//   // F.eks. en feature flag der kan læses af begge
// });


/**
 * Validerer og parser server-side miljøvariabler.
 * Kaster en fejl ved build/runtime hvis validering fejler.
 */
const parsedServerEnv = serverSchema.safeParse({
  DATABASE_URL: process.env.DATABASE_URL,
  JWT_SECRET: process.env.JWT_SECRET,
  JWT_EXPIRES_IN: process.env.JWT_EXPIRES_IN,
  // NODE_ENV: process.env.NODE_ENV,
});

if (!parsedServerEnv.success) {
  console.error(
    '❌ Ugyldige server-side miljøvariabler:',
    parsedServerEnv.error.flatten().fieldErrors,
  );
  // I et produktionsmiljø bør applikationen ikke starte med ugyldige env vars.
  // I udvikling kan man overveje at kaste fejlen for at stoppe processen.
  throw new Error('Ugyldige server-side miljøvariabler. Tjek .env filen og konsollen.');
}
export const serverEnv = parsedServerEnv.data;


/**
 * Validerer og parser client-side miljøvariabler.
 * For Next.js hentes disse typisk direkte via process.env.NEXT_PUBLIC_XXX i client-koden,
 * men at have et skema her hjælper med central definition og type-sikkerhed.
 * For at gøre disse typer globalt tilgængelige i Next.js client-side kode uden import,
 * kan man udvide NodeJS.ProcessEnv interfacet (se Next.js dokumentation).
 */
const parsedClientEnv = clientSchema.safeParse({
  NEXT_PUBLIC_APP_NAME: process.env.NEXT_PUBLIC_APP_NAME,
  NEXT_PUBLIC_WS_URL: process.env.NEXT_PUBLIC_WS_URL,
});

if (!parsedClientEnv.success) {
  console.error(
    '❌ Ugyldige client-side miljøvariabler:',
    parsedClientEnv.error.flatten().fieldErrors,
  );
  // Overvej at kaste en fejl her også, især under build-processen.
  throw new Error('Ugyldige client-side miljøvariabler. Tjek .env filen og konsollen.');
}
export const clientEnv = parsedClientEnv.data;

/**
 * Samlet objekt for alle miljøvariabler (kan være nyttigt i nogle sammenhænge,
 * men adskillelsen af serverEnv og clientEnv er ofte mere sikker og klar).
 */
export const env = {
  ...serverEnv,
  ...clientEnv,
  // ...parsedSharedEnv.data, // Hvis sharedSchema bruges
};

console.log('✅ Miljøvariabler valideret og indlæst.');
</file>

<file path="packages/config/src/index.ts">
// packages/config/src/index.ts

/**
 * Hoved-eksportfil for @repo/config TypeScript-delen.
 * Herfra eksporteres validerede miljøvariabler og potentielt andre konfigurationsfunktioner.
 */

export * from './env';
</file>

<file path="packages/config/eslint-preset.js">
module.exports = {
  extends: ["next", "prettier"],
  settings: {
    next: {
      rootDir: ["apps/*/", "packages/*/"],
    },
  },
  rules: {
    "@next/next/no-html-link-for-pages": "off",
    "react/jsx-key": "off",
  },
};
</file>

<file path="packages/config/postcss.config.js">
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};
</file>

<file path="packages/config/tailwind.config.js">
module.exports = {
  content: [
    "../../packages/ui/**/*.{js,ts,jsx,tsx}",
    "./pages/**/*.{js,ts,jsx,tsx}",
    "./components/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
};
</file>

<file path="packages/config/tsconfig.json">
{
  "extends": "tsconfig/base.json", // Eller tsconfig/react-library.json hvis relevant for fremtidig brug
  "compilerOptions": {
    "outDir": "dist",
    "rootDir": "src", // Specificerer roden af input-filerne
    "baseUrl": "./src",
    "paths": {
      "@/*": ["*"]
    }
  },
  "include": ["src"],
  "exclude": ["node_modules", "dist", "*.js", "*.conf"] // Ekskluder eksisterende .js og .conf filer fra TS-kompilering
}
</file>

<file path="packages/core/src/types/user.types.ts">
// packages/core/src/types/user.types.ts

/**
 * Definerer de mulige roller en bruger kan have i systemet.
 * Disse matcher værdierne defineret i Prisma schemaet.
 */
export enum Role {
  USER = 'USER',
  ADMIN = 'ADMIN',
}

/**
 * Interface for en bruger.
 * Dette er en ren data-kontrakt og indeholder ikke backend-specifikke felter som passwordHash.
 * Den er beregnet til at blive brugt på tværs af frontend og backend for type-sikkerhed.
 */
export interface User {
  id: number;
  email: string;
  name?: string | null; // Navn er valgfrit og kan være null
  role: Role;
  createdAt: Date; // Tidspunkt for oprettelse af brugeren
  updatedAt: Date; // Tidspunkt for seneste opdatering af brugeren
  // passwordResetToken, passwordResetExpires og passwordHash er udeladt,
  // da de er backend-specifikke og ikke bør være en del af den delte kerne-type.
}
</file>

<file path="packages/core/src/index.ts">
// packages/core/src/index.ts

/**
 * Dette er hoved-eksportfilen for @repo/core pakken.
 * Alle delte typer, interfaces, enums, og potentielt funktioner eller konstanter
 * bør eksporteres herfra, så de nemt kan importeres i andre pakker (apps/web, apps/api, etc.).
 */

export * from './types/user.types';
// Tilføj andre eksports her efterhånden som pakken vokser, f.eks.:
// export * from './types/course.types';
// export * from './utils/formatter.utils';
</file>

<file path="packages/core/tsconfig.json">
{
  "extends": "../tsconfig/base.json",
  "compilerOptions": {
    "outDir": "dist",
    "baseUrl": "./src", // Gør det nemmere at have absolutte imports inden for pakken hvis nødvendigt
    "paths": { // Eksempel på paths, kan justeres/fjernes efter behov
      "@/*": ["*"]
    }
  },
  "include": ["src"],
  "exclude": ["node_modules", "dist"]
}
</file>

<file path="packages/tsconfig/base.json">
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Default",
  "compilerOptions": {
    "composite": false,
    "declaration": true,
    "declarationMap": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "inlineSources": false,
    "isolatedModules": true,
    "moduleResolution": "node",
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "preserveWatchOutput": true,
    "skipLibCheck": true,
    "strict": true
  },
  "exclude": ["node_modules"]
}
</file>

<file path="packages/tsconfig/nestjs.json">
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "extends": "./base.json",
  "compilerOptions": {
    "module": "commonjs",
    "declaration": true,
    "removeComments": true,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "allowSyntheticDefaultImports": true,
    "target": "es2017",
    "sourceMap": true,
    "incremental": true,
    "skipLibCheck": true,
    "strictNullChecks": false,
    "noImplicitAny": false,
    "strictBindCallApply": false,
    "forceConsistentCasingInFileNames": false,
    "noFallthroughCasesInSwitch": false
  }
}
</file>

<file path="packages/tsconfig/nextjs.json">
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Next.js",
  "extends": "./base.json",
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": false,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "incremental": true,
    "esModuleInterop": true,
    "module": "esnext",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve"
  },
  "include": ["src", "next-env.d.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="packages/tsconfig/react-library.json">
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "React Library",
  "extends": "./base.json",
  "compilerOptions": {
    "lib": ["ES2015"],
    "module": "ESNext",
    "target": "ES6",
    "jsx": "react-jsx"
  }
}
</file>

<file path="packages/tsconfig/README.md">
# `tsconfig`

These are base shared `tsconfig.json`s from which all other `tsconfig.json`'s inherit from.
</file>

<file path="packages/ui/components/Button/Button.tsx">
export const Button = () => {
  return <button className="text-lg bg-red-500">boo</button>;
};
</file>

<file path="packages/ui/index.tsx">
export * from "./components/Button/Button";
</file>

<file path="packages/ui/tsconfig.json">
{
  "extends": "tsconfig/react-library.json",
  "include": ["."],
  "exclude": ["dist", "build", "node_modules"]
}
</file>

<file path=".dockerignore">
**/node_modules
**/.next
**/dist
**/.turbo
</file>

<file path="LICENSE">
MIT License

Copyright (c) 2022 Ejaz Ahmed

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</file>

<file path="turbo.json">
{
  "pipeline": {
    "build": {
      "dependsOn": ["^build"],
      "outputs": ["dist/**", ".next/**"]
    },
    "lint": {
      "outputs": []
    },
    "dev": {
      "cache": false
    },
    "test:ci": {
      "cache": false
    }
  }
}
</file>

<file path=".github/workflows/web.yaml">
# .github/workflows/web.yaml

name: web-ci

on:
  push:
    branches: [master] # Din nuværende primære branch. Overvej 'main' i fremtiden.
    paths:
      - "apps/web/**"
      - ".github/workflows/web.yaml" # God praksis: Trigger også på ændringer i selve workflow-filen
  pull_request:
    branches: [master] # Din nuværende primære branch.
    paths:
      - "apps/web/**"
      - ".github/workflows/web.yaml"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x] # Opdateret til en nyere LTS Node.js version (f.eks. 18.x eller 20.x). Du kan justere dette.

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Opdateret fra v2

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4 # Opdateret fra v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn' # Anbefalet måde at cache Yarn-afhængigheder på med setup-node@v4

      # Det er ikke altid nødvendigt at installere turbo globalt.
      # Hvis 'turbo' er en devDependency i rod-package.json, kan du køre kommandoer med 'yarn turbo ...'
      # Dette trin er bevaret fra din originale fil, men overvej om det kan fjernes.
      - name: Install Turbo globally (overvej at køre via yarn turbo)
        run: yarn global add turbo

      # Kør 'yarn install --immutable' for at sikre, at yarn.lock ikke ændres og for at installere afhængigheder.
      - name: Install dependencies
        run: yarn install --immutable

      # Dine eksisterende nps-kommandoer
      - name: Run CI preparation for Web
        run: npx nps prepare.ci.web

      - name: Build Web
        run: npx nps build.ci.web

      - name: Test Web
        run: npx nps test.ci.web
</file>

<file path="apps/api/src/auth/guards/jwt-auth.guard.ts">
// apps/api/src/auth/guards/jwt-auth.guard.ts
import {
  Injectable,
  ExecutionContext,
  UnauthorizedException,
} from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';
import { Observable } from 'rxjs';

/**
 * A guard that invokes the jwt Passport strategy.
 * It automatically handles the logic of verifying the JWT, calling the JwtStrategy's validate() method,
 * and setting up req.user upon successful authentication.
 * If authentication fails (e.g., invalid token, expired token), it automatically sends a 401 Unauthorized response.
 */
@Injectable()
export class JwtAuthGuard extends AuthGuard('jwt') {
  // Du kan overskrive handleRequest for at tilpasse fejlhåndtering eller logik efter validering.
  // For de fleste standardtilfælde er det dog ikke nødvendigt.
  canActivate(
    context: ExecutionContext,
  ): boolean | Promise<boolean> | Observable<boolean> {
    // Add your custom authentication logic here
    // for example, call super.logIn(request) to establish a session.
    return super.canActivate(context);
  }

  handleRequest<TUser = any>(
    err: any,
    user: any,
    info: any,
    context: ExecutionContext,
    status?: any,
  ): TUser {
    // Du kan smide en exception her baseret på 'info' eller 'err' argumenterne
    if (err || !user) {
      // Log eventuelle fejl eller information for debugging
      // console.error('JWT Auth Guard Error:', err);
      // console.error('JWT Auth Guard Info:', info);
      throw (
        err ||
        new UnauthorizedException(
          'Du har ikke adgang eller dit token er ugyldigt.',
        )
      );
    }
    return user;
  }
}
</file>

<file path="apps/api/src/persistence/prisma/prisma.service.ts">
import { Injectable, OnModuleInit } from '@nestjs/common';
import { PrismaClient } from '@prisma/client';

@Injectable()
export class PrismaService extends PrismaClient implements OnModuleInit {
  async onModuleInit() {
    await this.$connect();
  }
}
</file>

<file path="apps/api/webpack-hmr.config.js">
/* eslint-disable @typescript-eslint/no-var-requires */
const nodeExternals = require('webpack-node-externals');
const { RunScriptWebpackPlugin } = require('run-script-webpack-plugin');

module.exports = function (options, webpack) {
  return {
    ...options,
    entry: ['webpack/hot/poll?100', options.entry],
    externals: [
      nodeExternals({
        allowlist: ['webpack/hot/poll?100'],
        modulesDir: '../../node_modules',
      }),
    ],
    plugins: [
      ...options.plugins,
      new webpack.HotModuleReplacementPlugin(),
      new webpack.WatchIgnorePlugin({
        paths: [/\.js$/, /\.d\.ts$/],
      }),
      new RunScriptWebpackPlugin({ name: options.output.filename }),
    ],
  };
};
</file>

<file path="apps/web/pages/_app.tsx">
// apps/web/pages/_app.tsx
import type { AppProps } from "next/app";
import { Provider as ReduxProvider } from "react-redux"; // Omdøb for klarhed, hvis du bruger Redux
import store from "../src/store"; // Din Redux store
import { AuthProvider } from '../src/context/AuthContext'; // <--- TILFØJ DENNE LINJE
import "../src/styles/global.css";

function MyApp({ Component, pageProps }: AppProps) {
  return (
    // Yderst er ReduxProvider, hvis du bruger Redux
    <ReduxProvider store={store}>
      {/* Indeni ReduxProvider (eller yderst hvis du ikke bruger Redux), wrapper vi med AuthProvider */}
      <AuthProvider> 
        <Component {...pageProps} />
      </AuthProvider>
    </ReduxProvider>
  );
}

export default MyApp;
</file>

<file path="packages/config/nginx.conf">
events {

}

http {

    server {
        listen 80;
        server_name localhost;

        location /api/ {
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass http://host.docker.internal:5002/;

            proxy_http_version 1.1;
            proxy_set_header Connection "upgrade";
            proxy_set_header Upgrade $http_upgrade;
        }

        location /_next/webpack-hmr {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;


            proxy_pass http://host.docker.internal:3000;

            proxy_http_version 1.1;
            proxy_set_header Connection "upgrade";
            proxy_set_header Upgrade $http_upgrade;
        }

        location / {
            proxy_pass http://host.docker.internal:3000;
        }

    }

}
</file>

<file path="packages/core/package.json">
{
  "name": "@repo/core",
  "version": "0.0.0",
  "private": true,
  "packageManager": "yarn@4.9.1",
  "main": "./src/index.ts",
  "types": "./src/index.ts",
  "scripts": {
    "lint": "eslint . --ext .ts,.tsx"
  },
  "devDependencies": {
    "eslint": "^8.57.1",
    "tsconfig": "workspace:*",
    "typescript": "^5.1.6"
  }
}
</file>

<file path="Struktur.txt">
```
LearningLab
├─ .dockerignore
├─ .repomix
│  └─ bundles.json
├─ .yarn
│  ├─ install-state.gz
│  └─ releases
│     └─ yarn-4.9.1.cjs
├─ .yarnrc.yml
├─ LICENSE
├─ Migration.txt
├─ README.md
├─ apps
│  ├─ api
│  │  ├─ .eslintrc.js
│  │  ├─ .prettierrc
│  │  ├─ .turbo
│  │  │  └─ turbo-lint.log
│  │  ├─ Dockerfile
│  │  ├─ nest-cli.json
│  │  ├─ package.json
│  │  ├─ prisma
│  │  │  ├─ migrations
│  │  │  │  ├─ 20220307034109_initial_migrate
│  │  │  │  │  └─ migration.sql
│  │  │  │  ├─ 20250517073440_add_user_auth_fields
│  │  │  │  │  └─ migration.sql
│  │  │  │  ├─ 20250517122525_add_password_reset_fields
│  │  │  │  │  └─ migration.sql
│  │  │  │  └─ migration_lock.toml
│  │  │  └─ schema.prisma
│  │  ├─ src
│  │  │  ├─ app.controller.spec.ts
│  │  │  ├─ app.controller.ts
│  │  │  ├─ app.module.ts
│  │  │  ├─ app.service.ts
│  │  │  ├─ auth
│  │  │  │  ├─ auth.controller.ts
│  │  │  │  ├─ auth.module.ts
│  │  │  │  ├─ auth.service.ts
│  │  │  │  ├─ dto
│  │  │  │  │  ├─ forgot-password.dto.ts
│  │  │  │  │  ├─ login.dto.ts
│  │  │  │  │  └─ reset-password.dto.ts
│  │  │  │  ├─ guards
│  │  │  │  │  ├─ jwt-auth.guard.ts
│  │  │  │  │  └─ local-auth.guard.ts
│  │  │  │  └─ strategies
│  │  │  │     ├─ jwt
│  │  │  │     │  └─ jwt.ts
│  │  │  │     └─ local
│  │  │  │        └─ local.ts
│  │  │  ├─ config
│  │  │  │  └─ environment-variables.ts
│  │  │  ├─ main.ts
│  │  │  ├─ persistence
│  │  │  │  ├─ persistence.module.ts
│  │  │  │  └─ prisma
│  │  │  │     ├─ prisma.service.spec.ts
│  │  │  │     └─ prisma.service.ts
│  │  │  └─ users
│  │  │     ├─ dto
│  │  │     │  └─ create-user.dto.ts
│  │  │     ├─ users.controller.spec.ts
│  │  │     ├─ users.controller.ts
│  │  │     ├─ users.module.ts
│  │  │     ├─ users.service.spec.ts
│  │  │     └─ users.service.ts
│  │  ├─ test
│  │  │  ├─ app.e2e-spec.ts
│  │  │  └─ jest-e2e.json
│  │  ├─ tsconfig.json
│  │  └─ webpack-hmr.config.js
│  └─ web
│     ├─ .eslintrc.js
│     ├─ .swc
│     │  └─ plugins
│     │     └─ v7_macos_aarch64_0.98.5
│     ├─ .turbo
│     │  └─ turbo-lint.log
│     ├─ Dockerfile
│     ├─ README.md
│     ├─ jest.config.js
│     ├─ jest.setup.js
│     ├─ next-env.d.ts
│     ├─ next.config.js
│     ├─ package.json
│     ├─ pages
│     │  ├─ _app.tsx
│     │  ├─ forgot-password.tsx
│     │  ├─ index.tsx
│     │  ├─ login.tsx
│     │  ├─ profile.tsx
│     │  ├─ reset-password.tsx
│     │  └─ signup.tsx
│     ├─ postcss.config.js
│     ├─ src
│     │  ├─ common
│     │  ├─ components
│     │  │  └─ auth
│     │  ├─ context
│     │  │  └─ AuthContext.tsx
│     │  ├─ screens
│     │  │  ├─ admin
│     │  │  ├─ auth
│     │  │  │  ├─ forgot-password
│     │  │  │  │  └─ forgot-password.tsx
│     │  │  │  ├─ login
│     │  │  │  │  ├─ login.test.tsx
│     │  │  │  │  └─ login.tsx
│     │  │  │  ├─ reset-password
│     │  │  │  │  └─ reset-password.tsx
│     │  │  │  └─ signup
│     │  │  │     └─ signup.tsx
│     │  │  ├─ common
│     │  │  └─ employee
│     │  ├─ store
│     │  │  ├─ index.ts
│     │  │  └─ services
│     │  │     └─ api.ts
│     │  └─ styles
│     │     └─ global.css
│     ├─ tailwind.config.js
│     └─ tsconfig.json
├─ docker-compose.yml
├─ package-scripts.js
├─ package.json
├─ packages
│  ├─ config
│  │  ├─ eslint-preset.js
│  │  ├─ nginx.conf
│  │  ├─ package.json
│  │  ├─ postcss.config.js
│  │  ├─ src
│  │  │  ├─ env.ts
│  │  │  └─ index.ts
│  │  ├─ tailwind.config.js
│  │  └─ tsconfig.json
│  ├─ core
│  │  ├─ package.json
│  │  ├─ src
│  │  │  ├─ index.ts
│  │  │  └─ types
│  │  │     └─ user.types.ts
│  │  └─ tsconfig.json
│  ├─ tsconfig
│  │  ├─ README.md
│  │  ├─ base.json
│  │  ├─ nestjs.json
│  │  ├─ nextjs.json
│  │  ├─ package.json
│  │  └─ react-library.json
│  └─ ui
│     ├─ components
│     │  └─ Button
│     │     └─ Button.tsx
│     ├─ index.tsx
│     ├─ package.json
│     └─ tsconfig.json
├─ problems.txt
├─ src
├─ terminal.txt
├─ turbo.json
└─ yarn.lock

```
```
LearningLab
├─ .dockerignore
├─ .repomix
│  └─ bundles.json
├─ .yarn
│  ├─ install-state.gz
│  └─ releases
│     └─ yarn-4.9.1.cjs
├─ .yarnrc.yml
├─ LICENSE
├─ Migration.txt
├─ README.md
├─ Struktur.txt
├─ apps
│  ├─ api
│  │  ├─ .eslintrc.js
│  │  ├─ .prettierrc
│  │  ├─ .turbo
│  │  │  └─ turbo-lint.log
│  │  ├─ Dockerfile
│  │  ├─ nest-cli.json
│  │  ├─ package.json
│  │  ├─ prisma
│  │  │  ├─ migrations
│  │  │  │  ├─ 20220307034109_initial_migrate
│  │  │  │  │  └─ migration.sql
│  │  │  │  ├─ 20250517073440_add_user_auth_fields
│  │  │  │  │  └─ migration.sql
│  │  │  │  ├─ 20250517122525_add_password_reset_fields
│  │  │  │  │  └─ migration.sql
│  │  │  │  └─ migration_lock.toml
│  │  │  └─ schema.prisma
│  │  ├─ src
│  │  │  ├─ app.controller.spec.ts
│  │  │  ├─ app.controller.ts
│  │  │  ├─ app.module.ts
│  │  │  ├─ app.service.ts
│  │  │  ├─ auth
│  │  │  │  ├─ auth.controller.ts
│  │  │  │  ├─ auth.module.ts
│  │  │  │  ├─ auth.service.ts
│  │  │  │  ├─ dto
│  │  │  │  │  ├─ forgot-password.dto.ts
│  │  │  │  │  ├─ login.dto.ts
│  │  │  │  │  └─ reset-password.dto.ts
│  │  │  │  ├─ guards
│  │  │  │  │  ├─ jwt-auth.guard.ts
│  │  │  │  │  └─ local-auth.guard.ts
│  │  │  │  └─ strategies
│  │  │  │     ├─ jwt
│  │  │  │     │  └─ jwt.ts
│  │  │  │     └─ local
│  │  │  │        └─ local.ts
│  │  │  ├─ config
│  │  │  │  └─ environment-variables.ts
│  │  │  ├─ main.ts
│  │  │  ├─ persistence
│  │  │  │  ├─ persistence.module.ts
│  │  │  │  └─ prisma
│  │  │  │     ├─ prisma.service.spec.ts
│  │  │  │     └─ prisma.service.ts
│  │  │  └─ users
│  │  │     ├─ dto
│  │  │     │  └─ create-user.dto.ts
│  │  │     ├─ users.controller.spec.ts
│  │  │     ├─ users.controller.ts
│  │  │     ├─ users.module.ts
│  │  │     ├─ users.service.spec.ts
│  │  │     └─ users.service.ts
│  │  ├─ test
│  │  │  ├─ app.e2e-spec.ts
│  │  │  └─ jest-e2e.json
│  │  ├─ tsconfig.json
│  │  └─ webpack-hmr.config.js
│  └─ web
│     ├─ .eslintrc.js
│     ├─ .swc
│     │  └─ plugins
│     │     └─ v7_macos_aarch64_0.98.5
│     ├─ .turbo
│     │  └─ turbo-lint.log
│     ├─ Dockerfile
│     ├─ README.md
│     ├─ jest.config.js
│     ├─ jest.setup.js
│     ├─ next-env.d.ts
│     ├─ next.config.js
│     ├─ package.json
│     ├─ pages
│     │  ├─ _app.tsx
│     │  ├─ forgot-password.tsx
│     │  ├─ index.tsx
│     │  ├─ login.tsx
│     │  ├─ profile.tsx
│     │  ├─ reset-password.tsx
│     │  └─ signup.tsx
│     ├─ postcss.config.js
│     ├─ src
│     │  ├─ common
│     │  ├─ components
│     │  │  └─ auth
│     │  ├─ context
│     │  │  └─ AuthContext.tsx
│     │  ├─ screens
│     │  │  ├─ admin
│     │  │  ├─ auth
│     │  │  │  ├─ forgot-password
│     │  │  │  │  └─ forgot-password.tsx
│     │  │  │  ├─ login
│     │  │  │  │  ├─ login.test.tsx
│     │  │  │  │  └─ login.tsx
│     │  │  │  ├─ reset-password
│     │  │  │  │  └─ reset-password.tsx
│     │  │  │  └─ signup
│     │  │  │     └─ signup.tsx
│     │  │  ├─ common
│     │  │  └─ employee
│     │  ├─ store
│     │  │  ├─ index.ts
│     │  │  └─ services
│     │  │     └─ api.ts
│     │  └─ styles
│     │     └─ global.css
│     ├─ tailwind.config.js
│     └─ tsconfig.json
├─ docker-compose.yml
├─ package-scripts.js
├─ package.json
├─ packages
│  ├─ config
│  │  ├─ eslint-preset.js
│  │  ├─ nginx.conf
│  │  ├─ package.json
│  │  ├─ postcss.config.js
│  │  ├─ src
│  │  │  ├─ env.ts
│  │  │  └─ index.ts
│  │  ├─ tailwind.config.js
│  │  └─ tsconfig.json
│  ├─ core
│  │  ├─ package.json
│  │  ├─ src
│  │  │  ├─ index.ts
│  │  │  └─ types
│  │  │     └─ user.types.ts
│  │  └─ tsconfig.json
│  ├─ tsconfig
│  │  ├─ README.md
│  │  ├─ base.json
│  │  ├─ nestjs.json
│  │  ├─ nextjs.json
│  │  ├─ package.json
│  │  └─ react-library.json
│  └─ ui
│     ├─ components
│     │  └─ Button
│     │     └─ Button.tsx
│     ├─ index.tsx
│     ├─ package.json
│     └─ tsconfig.json
├─ problems.txt
├─ src
├─ terminal.txt
├─ turbo.json
└─ yarn.lock

```
</file>

<file path=".github/workflows/api.yaml">
# .github/workflows/api.yaml

name: api-ci

on:
  push:
    branches: [master] # Din nuværende primære branch. Overvej 'main' i fremtiden.
    paths:
      - "apps/api/**"
      - ".github/workflows/api.yaml" # God praksis: Trigger også på ændringer i selve workflow-filen
  pull_request:
    branches: [master] # Din nuværende primære branch.
    paths:
      - "apps/api/**"
      - ".github/workflows/api.yaml"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: "postgresql://test:test@localhost:5433/mydb" # Fra din originale fil

    strategy:
      matrix:
        node-version: [20.x] # Opdateret til en nyere LTS Node.js version (f.eks. 18.x eller 20.x). Du kan justere dette.

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Opdateret fra v2

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4 # Opdateret fra v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn' # Anbefalet måde at cache Yarn-afhængigheder på med setup-node@v4

      # Det er ikke altid nødvendigt at installere turbo globalt.
      # Hvis 'turbo' er en devDependency i rod-package.json, kan du køre kommandoer med 'yarn turbo ...'
      # Dette trin er bevaret fra din originale fil, men overvej om det kan fjernes.
      - name: Install Turbo globally (overvej at køre via yarn turbo)
        run: yarn global add turbo

      # Kør 'yarn install --immutable' for at sikre, at yarn.lock ikke ændres og for at installere afhængigheder.
      # Dette er en vigtig tilføjelse for CI-stabilitet.
      - name: Install dependencies
        run: yarn install --immutable

      # Dine eksisterende nps-kommandoer
      # Hvis 'prepare.ci.api' også kører 'yarn install', kan det foregående 'Install dependencies' trin måske
      # virke overflødigt, men en eksplicit 'yarn install --immutable' tidligt er god praksis.
      - name: Run CI preparation for API
        run: npx nps prepare.ci.api

      - name: Build API
        run: npx nps build.ci.api

      - name: Test API
        run: npx nps test.ci.api
</file>

<file path="apps/api/prisma/schema.prisma">
// apps/api/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  passwordHash String
  name         String?
  role         Role     @default(USER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Nye felter til password reset
  passwordResetToken   String?   @unique // Gør tokenet unikt for at kunne slå det op
  passwordResetExpires DateTime?
}

enum Role {
  USER
  ADMIN
}
</file>

<file path="apps/api/src/auth/strategies/jwt/jwt.ts">
// apps/api/src/auth/strategies/jwt/jwt.ts
import { ExtractJwt, Strategy } from 'passport-jwt';
import { PassportStrategy } from '@nestjs/passport';
import { Injectable, UnauthorizedException } from '@nestjs/common';
import { UsersService } from '../../../users/users.service';
import { User as PrismaUser, Role as PrismaRole } from '@prisma/client'; // Prisma User for interaktion med UsersService
import { User as CoreUser, Role as CoreRole } from '@repo/core'; // CoreUser for payload og returtype
import { serverEnv } from '@repo/config';

export interface JwtPayload {
  email: string;
  sub: number; // Brugerens ID
}

@Injectable()
export class JwtStrategy extends PassportStrategy(Strategy) {
  constructor(
    private readonly usersService: UsersService,
  ) {
    super({
      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
      ignoreExpiration: false,
      secretOrKey: serverEnv.JWT_SECRET,
    });
  }

  /**
   * Helper function to map a PrismaUser object to a CoreUser object (omitting passwordHash).
   * @param user The PrismaUser object.
   * @returns A CoreUser object without the passwordHash.
   */
  private mapToCoreUser(user: PrismaUser): Omit<CoreUser, 'passwordHash'> {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const { passwordHash, passwordResetToken, passwordResetExpires, ...result } = user;
    return {
      ...result,
      name: result.name ?? undefined, // Sørg for at name er string | undefined
      role: user.role as CoreRole,
      createdAt: new Date(user.createdAt),
      updatedAt: new Date(user.updatedAt),
    };
  }

  async validate(payload: JwtPayload): Promise<Omit<CoreUser, 'passwordHash'>> {
    const prismaUser = await this.usersService.findOneById(payload.sub);

    if (!prismaUser) {
      throw new UnauthorizedException(
        'Bruger ikke fundet eller token er ugyldigt.',
      );
    }
    // Map PrismaUser til CoreUser format
    return this.mapToCoreUser(prismaUser);
  }
}
</file>

<file path="apps/api/src/auth/strategies/local/local.ts">
// apps/api/src/auth/strategies/local/local.ts
import { Strategy } from 'passport-local';
import { PassportStrategy } from '@nestjs/passport';
import { Injectable, UnauthorizedException } from '@nestjs/common';
import { AuthService } from '../../auth.service';
// Importer CoreUser for at specificere returtypen korrekt
import { User as CoreUser } from '@repo/core';

@Injectable()
export class LocalStrategy extends PassportStrategy(Strategy) {
  constructor(private authService: AuthService) {
    super({ usernameField: 'email' }); // Fortæller Passport at 'email' feltet skal bruges som brugernavn
  }

  // Denne metode kaldes automatisk af Passport, når LocalAuthGuard bruges
  // Returtypen er nu Omit<CoreUser, 'passwordHash'> for at matche AuthService.validateUser
  async validate(
    email: string,
    pass: string,
  ): Promise<Omit<CoreUser, 'passwordHash'>> {
    // authService.validateUser returnerer Omit<CoreUser, 'passwordHash'> | null
    const user = await this.authService.validateUser(email, pass);

    if (!user) {
      // Hvis brugeren ikke findes eller password er forkert, kast en UnauthorizedException
      throw new UnauthorizedException('Ugyldig email eller password.');
    }

    // Brugerobjektet 'user' er allerede i det korrekte CoreUser format (uden passwordHash)
    return user;
  }
}
</file>

<file path="apps/api/src/auth/auth.controller.ts">
// apps/api/src/auth/auth.controller.ts
    import {
      Controller,
      Request, // Standard Request type fra @nestjs/common
      Post,
      UseGuards,
      Get,
      HttpCode,
      HttpStatus,
      Body,
      ValidationPipe,
    } from '@nestjs/common';
    import { AuthService } from './auth.service';
    import { LocalAuthGuard } from './guards/local-auth.guard';
    import { JwtAuthGuard } from './guards/jwt-auth.guard';
    import { User as CoreUser } from '@repo/core'; // Importer CoreUser fra @repo/core
    import { LoginDto } from './dto/login.dto';
    import { ForgotPasswordDto } from './dto/forgot-password.dto';
    import { ResetPasswordDto } from './dto/reset-password.dto';

    // Definer en type for request objektet, der indeholder brugeren efter autentificering
    interface AuthenticatedRequest extends globalThis.Request { // Eller Express.Request hvis du bruger @types/express
      user: Omit<CoreUser, 'passwordHash'>; // req.user er nu af typen Omit<CoreUser, 'passwordHash'>
    }

    @Controller('auth')
    export class AuthController {
      constructor(private authService: AuthService) {}

      @UseGuards(LocalAuthGuard)
      @Post('login')
      @HttpCode(HttpStatus.OK)
      async login(
        @Request() req: AuthenticatedRequest,
        // loginDto er her for Swagger og klarhed, validering sker i LocalStrategy/AuthService
        @Body() loginDto: LoginDto,
      ): Promise<{ access_token: string }> {
        // req.user er sat af LocalStrategy (via AuthService.validateUser), som nu returnerer CoreUser formatet
        return this.authService.login(req.user);
      }

      @UseGuards(JwtAuthGuard)
      @Get('profile')
      getProfile(
        @Request() req: AuthenticatedRequest,
      ): Omit<CoreUser, 'passwordHash'> {
        // req.user er sat af JwtStrategy, som nu returnerer Omit<PrismaUser, 'passwordHash'>,
        // men for konsistens med CoreUser, bør JwtStrategy også mappe til CoreUser hvis der er forskelle.
        // I dette tilfælde er de ens nok efter fjernelse af passwordHash.
        return req.user;
      }

      @Post('forgot-password')
      @HttpCode(HttpStatus.OK)
      async forgotPassword(
        @Body(new ValidationPipe()) forgotPasswordDto: ForgotPasswordDto,
      ): Promise<{ message: string }> {
        return this.authService.forgotPassword(forgotPasswordDto.email);
      }

      @Post('reset-password')
      @HttpCode(HttpStatus.OK)
      async resetPassword(
        @Body(new ValidationPipe()) resetPasswordDto: ResetPasswordDto,
      ): Promise<{ message:string }> {
        return this.authService.resetPassword(resetPasswordDto);
      }
    }
</file>

<file path="apps/api/src/auth/auth.module.ts">
// apps/api/src/auth/auth.module.ts
import { Module } from '@nestjs/common';
import { AuthService } from './auth.service';
import { AuthController } from './auth.controller';
import { UsersModule } from '../users/users.module';
import { PassportModule } from '@nestjs/passport';
import { JwtModule } from '@nestjs/jwt';
import { LocalStrategy } from './strategies/local/local';
import { JwtStrategy } from './strategies/jwt/jwt';
import { ConfigModule } from '@nestjs/config'; // ConfigModule kan stadig være her, hvis andre dele har brug for den
import { PersistenceModule } from '../persistence/persistence.module';
import { serverEnv } from '@repo/config'; // Importer serverEnv for JWT secret og expires_in

@Module({
  imports: [
    UsersModule,
    PassportModule.register({ defaultStrategy: 'jwt' }),
    JwtModule.registerAsync({
      // imports: [ConfigModule], // Ikke længere nødvendigt at importere ConfigModule specifikt for JWT secret/expires her
      // inject: [ConfigService], // Ikke længere nødvendigt at injecte ConfigService specifikt for JWT secret/expires her
      useFactory: async () => ({ // ConfigService parameter fjernet, da vi bruger serverEnv direkte
        secret: serverEnv.JWT_SECRET,
        signOptions: {
          expiresIn: serverEnv.JWT_EXPIRES_IN,
        },
      }),
    }),
    ConfigModule, // Bevar hvis andre dele af AuthModule eller dens providers bruger ConfigService generelt
    PersistenceModule,
  ],
  controllers: [AuthController],
  providers: [AuthService, LocalStrategy, JwtStrategy],
  exports: [AuthService, JwtModule], // JwtModule eksporteres typisk, så andre moduler kan injecte JwtService
})
export class AuthModule {}
</file>

<file path="apps/api/src/auth/auth.service.ts">
// apps/api/src/auth/auth.service.ts
    import {
      Injectable,
      UnauthorizedException,
      BadRequestException,
      InternalServerErrorException,
    } from '@nestjs/common';
    import { UsersService } from '../users/users.service';
    import { JwtService } from '@nestjs/jwt';
    import * as bcrypt from 'bcryptjs';
    import { User as PrismaUser } from '@prisma/client'; // PrismaUser bruges internt
    import { User as CoreUser, Role as CoreRole } from '@repo/core'; // CoreUser for eksterne kontrakter
    import { JwtPayload } from './strategies/jwt/jwt';
    import { PrismaService } from '../persistence/prisma/prisma.service';
    import { v4 as uuidv4 } from 'uuid';
    import { ResetPasswordDto } from './dto/reset-password.dto';

    @Injectable()
    export class AuthService {
      constructor(
        private usersService: UsersService,
        private jwtService: JwtService,
        private prisma: PrismaService,
      ) {}

      /**
       * Validates a user based on email and password.
       * @param email The user's email.
       * @param pass The user's password.
       * @returns A CoreUser object (without passwordHash) if validation is successful, otherwise null.
       */
      async validateUser(
        email: string,
        pass: string,
      ): Promise<Omit<CoreUser, 'passwordHash'> | null> {
        const userEntity: PrismaUser | null = await this.usersService.findOneByEmail(email);

        if (userEntity) {
          const isPasswordMatching = await bcrypt.compare(pass, userEntity.passwordHash);
          if (isPasswordMatching) {
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            const { passwordHash, ...result } = userEntity;
            // Map til CoreUser format
            return {
              ...result,
              role: userEntity.role as CoreRole, // Type assertion
              createdAt: new Date(userEntity.createdAt),
              updatedAt: new Date(userEntity.updatedAt),
            };
          }
        }
        return null;
      }

      /**
       * Generates a JWT access token for a given user.
       * @param user The user object (CoreUser format, without passwordHash).
       * @returns An object containing the access_token.
       */
      async login(
        user: Omit<CoreUser, 'passwordHash'>, // Forventer CoreUser format
      ): Promise<{ access_token: string }> {
        const payload: JwtPayload = { email: user.email, sub: user.id };
        return {
          access_token: this.jwtService.sign(payload),
        };
      }

      async forgotPassword(email: string): Promise<{ message: string }> {
        const user = await this.usersService.findOneByEmail(email); // Returnerer PrismaUser
        if (!user) {
          return {
            message:
              'Hvis din email findes i systemet, vil du modtage et link til at nulstille dit password.',
          };
        }

        const resetToken = uuidv4();
        const expires = new Date();
        expires.setHours(expires.getHours() + 1); // Token udløber om 1 time

        try {
          await this.prisma.user.update({
            where: { email },
            data: {
              passwordResetToken: resetToken,
              passwordResetExpires: expires,
            },
          });

          // VIGTIGT: I en rigtig applikation, send email her!
          console.log(`Password Reset Token for ${email}: ${resetToken}`); // Kun til udvikling

          return {
            message:
              'Hvis din email findes i systemet, vil du modtage et link til at nulstille dit password.',
          };
        } catch (error) {
          console.error('Fejl under opdatering af bruger med reset token:', error);
          throw new InternalServerErrorException(
            'Der opstod en fejl under behandling af din anmodning.',
          );
        }
      }

      async resetPassword(
        resetPasswordDto: ResetPasswordDto,
      ): Promise<{ message: string }> {
        const { token, newPassword, confirmPassword } = resetPasswordDto;

        if (newPassword !== confirmPassword) {
          throw new BadRequestException('De nye passwords matcher ikke.');
        }

        const user = await this.prisma.user.findUnique({ // Arbejder med PrismaUser
          where: { passwordResetToken: token },
        });

        if (!user) {
          throw new BadRequestException(
            'Ugyldigt eller udløbet password reset token (bruger ikke fundet).',
          );
        }

        if (!user.passwordResetExpires || user.passwordResetExpires < new Date()) {
          await this.prisma.user.update({
            where: { id: user.id },
            data: { passwordResetToken: null, passwordResetExpires: null },
          });
          throw new BadRequestException(
            'Ugyldigt eller udløbet password reset token (token udløbet).',
          );
        }

        const saltRounds = 10;
        let hashedPassword;
        try {
          hashedPassword = await bcrypt.hash(newPassword, saltRounds);
        } catch (error) {
          console.error('Fejl under hashing af nyt password:', error);
          throw new InternalServerErrorException(
            'Der opstod en fejl under nulstilling af password (hashing).',
          );
        }

        try {
          await this.prisma.user.update({
            where: { id: user.id },
            data: {
              passwordHash: hashedPassword,
              passwordResetToken: null,
              passwordResetExpires: null,
            },
          });
          return { message: 'Dit password er blevet nulstillet succesfuldt.' };
        } catch (error) {
          console.error('Fejl under opdatering af brugers password:', error);
          throw new InternalServerErrorException(
            'Der opstod en fejl under nulstilling af password (database).',
          );
        }
      }
    }
</file>

<file path="apps/api/src/users/dto/create-user.dto.ts">
// apps/api/src/users/dto/create-user.dto.ts
    import {
      IsEmail,
      IsNotEmpty,
      IsString,
      MinLength,
      IsEnum,
      IsOptional,
    } from 'class-validator';
    import { Role } from '@repo/core'; // Importer Role enum fra @repo/core

    export class CreateUserDto {
      @IsEmail({}, { message: 'Email skal være en gyldig email-adresse.' })
      @IsNotEmpty({ message: 'Email må ikke være tom.' })
      email: string;

      @IsString({ message: 'Password skal være en streng.' })
      @MinLength(8, { message: 'Password skal være mindst 8 tegn langt.' })
      @IsNotEmpty({ message: 'Password må ikke være tomt.' })
      password: string;

      @IsString({ message: 'Navn skal være en streng.' })
      @IsOptional()
      name?: string;

      // Bruger nu Role enum fra @repo/core
      @IsEnum(Role, {
        message: 'Rolle skal være en gyldig værdi (USER eller ADMIN).',
      })
      @IsOptional() // Gør rollen valgfri ved oprettelse, så den kan falde tilbage til default i Prisma schema
      role?: Role;
    }
</file>

<file path="apps/api/src/users/users.controller.ts">
// apps/api/src/users/users.controller.ts
import {
  Controller,
  Post,
  Body,
  ValidationPipe,
  UsePipes,
  HttpCode,
  HttpStatus,
} from '@nestjs/common';
import { UsersService } from './users.service';
import { CreateUserDto } from './dto/create-user.dto';
// Importer CoreUser fra @repo/core for returtypen
import { User as CoreUser } from '@repo/core';

@Controller('users')
export class UsersController {
  constructor(private readonly usersService: UsersService) {}

  @Post('signup')
  @UsePipes(
    new ValidationPipe({
      transform: true,
      whitelist: true,
      forbidNonWhitelisted: true,
    }),
  )
  @HttpCode(HttpStatus.CREATED)
  // Returtypen er nu Omit<CoreUser, 'passwordHash'> for at matche UsersService.create
  async signUp(
    @Body() createUserDto: CreateUserDto,
  ): Promise<Omit<CoreUser, 'passwordHash'>> {
    return this.usersService.create(createUserDto);
  }
}
</file>

<file path="apps/api/src/users/users.service.ts">
// apps/api/src/users/users.service.ts
    import {
      Injectable,
      ConflictException,
      InternalServerErrorException,
    } from '@nestjs/common';
    import { PrismaService } from '../persistence/prisma/prisma.service';
    import { CreateUserDto } from './dto/create-user.dto';
    import * as bcrypt from 'bcryptjs';
    import { User as PrismaUser, Role as PrismaRole } from '@prisma/client'; // Omdøb Prisma types for klarhed
    import { User as CoreUser, Role as CoreRole } from '@repo/core'; // Importer Core types

    @Injectable()
    export class UsersService {
      constructor(private prisma: PrismaService) {}

      /**
       * Helper function to map a PrismaUser object to a CoreUser object (omitting passwordHash).
       * @param user The PrismaUser object.
       * @returns A CoreUser object without the passwordHash.
       */
      private mapToCoreUser(user: PrismaUser): Omit<CoreUser, 'passwordHash'> {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const { passwordHash, ...result } = user;
        return {
          ...result,
          // Ensure enum compatibility if names are identical (which they are: USER, ADMIN)
          role: user.role as CoreRole,
          // Ensure Date objects are correctly typed if they come from JSON,
          // though Prisma typically returns Date objects directly.
          createdAt: new Date(user.createdAt),
          updatedAt: new Date(user.updatedAt),
        };
      }

      async create(
        createUserDto: CreateUserDto,
      ): Promise<Omit<CoreUser, 'passwordHash'>> { // Returtype er nu baseret på CoreUser
        const { email, password, name, role } = createUserDto;

        const existingUser = await this.prisma.user.findUnique({
          where: { email },
        });

        if (existingUser) {
          throw new ConflictException(
            'En bruger med denne email eksisterer allerede.',
          );
        }

        const saltRounds = 10;
        let hashedPassword;
        try {
          hashedPassword = await bcrypt.hash(password, saltRounds);
        } catch (error) {
          console.error('Fejl under hashing af password:', error);
          throw new InternalServerErrorException(
            'Der opstod en intern fejl under brugeroprettelse (hashing).',
          );
        }

        try {
          const prismaUser = await this.prisma.user.create({
            data: {
              email,
              passwordHash: hashedPassword,
              name: name || null,
              // Map CoreRole from DTO to PrismaRole for database operation
              role: (role as unknown as PrismaRole) || PrismaRole.USER,
            },
          });
          // Map den oprettede PrismaUser til CoreUser format før returnering
          return this.mapToCoreUser(prismaUser);
        } catch (error) {
          if (
            error &&
            typeof error === 'object' &&
            'code' in error &&
            error.code === 'P2002'
          ) {
            throw new ConflictException(
              'En bruger med denne email eksisterer allerede (databasefejl).',
            );
          }
          console.error('Databasefejl under brugeroprettelse:', error);
          throw new InternalServerErrorException(
            'Der opstod en databasefejl under brugeroprettelse.',
          );
        }
      }

      // Metoder der bruges internt af f.eks. AuthService kan stadig returnere PrismaUser
      async findOneByEmail(email: string): Promise<PrismaUser | null> {
        return this.prisma.user.findUnique({
          where: { email },
        });
      }

      async findOneById(id: number): Promise<PrismaUser | null> {
        return this.prisma.user.findUnique({
          where: { id },
        });
      }

      // Valgfri: Hvis du vil have en metode, der eksplicit returnerer CoreUser for auth-formål
      async findOneByEmailForAuth(email: string): Promise<Omit<CoreUser, 'passwordHash'> | null> {
        const prismaUser = await this.findOneByEmail(email);
        return prismaUser ? this.mapToCoreUser(prismaUser) : null;
      }
    }
</file>

<file path="apps/web/pages/profile.tsx">
// apps/web/pages/profile.tsx
import React from 'react'; // useEffect er fjernet, da ProtectedRoute håndterer det
import { useAuth } from '../src/context/AuthContext';
import ProtectedRoute from '../src/components/auth/ProtectedRoute'; // Importer ProtectedRoute

// Den faktiske indholdskomponent for profilsiden
function ProfilePageContent() {
  const { user, logout } = useAuth();

  // På dette tidspunkt, hvis ProfilePageContent renderes,
  // har ProtectedRoute allerede sikret, at brugeren er logget ind,
  // og at authIsLoading er false.
  // Vi kan derfor trygt antage, at 'user' ikke er null.
  if (!user) {
    // Denne fallback burde sjældent rammes, hvis ProtectedRoute fungerer korrekt.
    // Det er en ekstra sikkerhedsforanstaltning.
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-100 font-inter">
        <p className="text-lg text-gray-700">Fejl: Brugerdata ikke tilgængelige, selvom ruten er beskyttet.</p>
      </div>
    );
  }

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100 font-inter p-4">
      <div className="w-full max-w-lg p-8 space-y-6 bg-white rounded-xl shadow-xl">
        <h1 className="text-3xl font-bold text-center text-gray-900">
          Velkommen til din Profil!
        </h1>
        <div className="mt-6 border-t border-gray-200">
          <dl className="divide-y divide-gray-200">
            <div className="py-4 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4">
              <dt className="text-sm font-medium text-gray-500">ID</dt>
              <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{user.id}</dd>
            </div>
            <div className="py-4 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4">
              <dt className="text-sm font-medium text-gray-500">Fulde Navn</dt>
              <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{user.name || 'Ikke angivet'}</dd>
            </div>
            <div className="py-4 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4">
              <dt className="text-sm font-medium text-gray-500">Emailadresse</dt>
              <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{user.email}</dd>
            </div>
            <div className="py-4 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4">
              <dt className="text-sm font-medium text-gray-500">Rolle</dt>
              <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{user.role}</dd>
            </div>
            {/* Tilføj flere felter her efter behov */}
          </dl>
        </div>
        <div className="mt-6 text-center">
            <button
                onClick={logout} // Brug logout funktionen fra AuthContext
                className="px-6 py-2 font-medium tracking-wide text-white capitalize transition-colors duration-300 transform bg-red-600 rounded-lg hover:bg-red-500 focus:outline-none focus:ring focus:ring-red-300 focus:ring-opacity-80"
            >
                Log ud
            </button>
        </div>
      </div>
    </div>
  );
}

// Default export er nu en wrapper-komponent, der anvender ProtectedRoute
export default function WrappedProfilePage() {
  return (
    <ProtectedRoute>
      <ProfilePageContent />
    </ProtectedRoute>
  );
}
</file>

<file path="apps/web/src/screens/auth/login/login.tsx">
// apps/web/src/screens/auth/login/login.tsx
import React, { useState, FormEvent } from 'react';
import { useAuth } from '../../../context/AuthContext'; // Importer useAuth hook'en
// useRouter er ikke længere nødvendig her, da AuthContext håndterer omdirigering efter login

export function LoginScreen() {
  // const router = useRouter(); // Fjernet, da AuthContext håndterer omdirigering
  const { login, isLoading: authIsLoading, user } = useAuth(); // Hent login funktion og auth loading state fra context

  // Lokal state for inputfelter og specifikke fejl for denne formular
  const [email, setEmail] = useState<string>('');
  const [password, setPassword] = useState<string>('');
  const [formError, setFormError] = useState<string | null>(null); // Lokal fejl state for denne formular

  // Omdiriger hvis brugeren allerede er logget ind
  // Dette er en simpel måde at forhindre adgang til login-siden, hvis man allerede er logget ind.
  // En mere robust løsning ville være en "public only" route.
  // useEffect(() => {
  //   if (user) {
  //     router.push('/profile'); // Eller en anden default side efter login
  //   }
  // }, [user, router]);


  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    setFormError(null); // Nulstil formularfejl

    try {
      console.log('LoginScreen: Forsøger login via AuthContext med:', { email, password });
      await login(email, password); // Kald login funktionen fra AuthContext
      // AuthContext's login funktion håndterer nu token lagring, bruger state opdatering, og omdirigering.
      console.log('LoginScreen: Login succesfuld (håndteret af AuthContext).');
    } catch (err: any) {
      console.error('LoginScreen: Login fejl fanget:', err);
      setFormError(err.message || 'Login fejlede. Tjek din email og adgangskode.');
    }
    // authIsLoading fra context vil styre knappens disabled state
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100 font-inter">
      <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-xl shadow-xl">
        <h2 className="text-3xl font-bold text-center text-gray-900">
          Log ind på Læringsplatformen
        </h2>
        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Email felt */}
          <div>
            <label
              htmlFor="email"
              className="block text-sm font-medium text-gray-700"
            >
              Emailadresse
            </label>
            <input
              id="email"
              name="email"
              type="email"
              autoComplete="email"
              required
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              disabled={authIsLoading} // Deaktiver input hvis auth operation er i gang
              className="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm disabled:bg-gray-50 disabled:text-gray-500"
              placeholder="din@email.com"
            />
          </div>

          {/* Password felt */}
          <div>
            <label
              htmlFor="password"
              className="block text-sm font-medium text-gray-700"
            >
              Adgangskode
            </label>
            <input
              id="password"
              name="password"
              type="password"
              autoComplete="current-password"
              required
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              disabled={authIsLoading} // Deaktiver input hvis auth operation er i gang
              className="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm disabled:bg-gray-50 disabled:text-gray-500"
              placeholder="Din adgangskode"
            />
          </div>

          {/* Fejlmeddelelse for formularen */}
          {formError && (
            <div className="p-3 text-sm text-red-700 bg-red-100 border border-red-400 rounded-md">
              {formError}
            </div>
          )}

          {/* Submit knap */}
          <div>
            <button
              type="submit"
              disabled={authIsLoading} // Brug authIsLoading fra context
              className="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-indigo-400 disabled:cursor-not-allowed transition-colors duration-150"
            >
              {authIsLoading ? (
                <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              ) : (
                'Log ind'
              )}
            </button>
          </div>
        </form>
        <p className="text-sm text-center text-gray-600">
          Har du ikke en konto?{' '}
          <a href="/signup" className="font-medium text-indigo-600 hover:text-indigo-500">
            Opret dig her
          </a>
        </p>
        <p className="text-sm text-center text-gray-600">
          <a href="/forgot-password" className="font-medium text-indigo-600 hover:text-indigo-500">
            Glemt adgangskode?
          </a>
        </p>
      </div>
    </div>
  );
}
</file>

<file path="packages/tsconfig/package.json">
{
  "name": "tsconfig",
  "version": "0.0.0",
  "private": true,
  "packageManager": "yarn@4.9.1",
  "main": "index.js",
  "files": [
    "base.json",
    "nestjs.json",
    "nextjs.json",
    "react-library.json"
  ]
}
</file>

<file path=".gitignore">
# Node
node_modules

# Yarn Berry cache
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/releases

# Plug’n’Play files
.pnp.cjs
.pnp.loader.mjs

# Build output
.next
dist
out
build
coverage

# Misc
.env*
.DS_Store
</file>

<file path=".yarnrc.yml">
cacheFolder: .yarn/cache

logFilters:
  - code: YN0086
    level: discard
  - code: YN0060
    level: discard
  - code: YN0002
    level: error

nodeLinker: node-modules

packageExtensions:
  "@angular-devkit/core@*":
    peerDependencies:
      "@types/ajv": "*"
      "@types/chokidar": "*"
  "@angular-devkit/schematics-cli@*":
    peerDependencies:
      "@types/chokidar": "*"
      chokidar: "*"
  "@angular-devkit/schematics@*":
    peerDependencies:
      "@types/chokidar": "*"
      chokidar: "*"
</file>

<file path="docker-compose.yml">
services:
  reverse-proxy:
    image: nginx:latest
    container_name: nginx_container
    ports:
      - 80:80
    depends_on:
      - postgres
    volumes:
      - ./packages/config/nginx.conf:/etc/nginx/nginx.conf
    extra_hosts:
      - "host.docker.internal:host-gateway"

  postgres:
    image: postgres:15
    environment:
      - POSTGRES_DB=mydb
      - POSTGRES_USER=test
      - POSTGRES_PASSWORD=test
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"

volumes:
  db_data:
</file>

<file path="Migration.txt">
**Revideret Projektplan: Yarn Berry Monorepo**

Nedenstående plan er opdateret til dit nuværende setup, hvor vi kører med Yarn Berry (v4) og PnP‑/node\_modules‑linking efter migrering.

---

## Fase 0: Fundament og Yarn Berry Setup

### 0.0 Yarn Berry Konfiguration

1. Slet eventuel gammel `.yarnrc.yml` og erstat med:

   ```yaml
   nodeLinker: node-modules      # eller pnp, hvis I ønsker Plug’n’Play
   plugins:
     - path: .yarn/plugins/@yarnpkg/plugin-workspace-tools.cjs
   logFilters:
     - code: YN0086              # undertryk peer-dependency‑warnings
       level: discard
   packageExtensions:
     "@angular-devkit/core@*":
       peerDependencies:
         "@types/ajv": "*"
         "@types/chokidar": "*"
     "@angular-devkit/schematics@*":
       peerDependencies:
         "chokidar": "*"
         "@types/chokidar": "*"
     "@angular-devkit/schematics-cli@*":
       peerDependencies:
         "chokidar": "*"
         "@types/chokidar": "*"
   ```
2. Ryd alt og geninstaller:

   ```bash
   rm -rf node_modules **/node_modules yarn.lock .yarn/cache .yarn/unplugged
   yarn install
   ```
3. Tilføj plugin til workspace-dashboard (valgfrit):

   ```bash
   yarn plugin import workspace-tools
   yarn workspaces list --recursive
   ```

### 0.1 CI & Docker Anpassinger

* **CI**: Opdater dine GitHub Actions til at cache PnP-filer:

  ```yaml
  - name: Cache Yarn
    uses: actions/cache@v3
    with:
      path: |
        .yarn/cache
        .yarn/unplugged
        .yarn/build-state.yml
      key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      restore-keys: |
        ${{ runner.os }}-yarn-
  ```
* **Docker**: Indsæt før `yarn install`:

  ```dockerfile
  COPY .yarn .yarn
  COPY .yarnrc.yml .
  RUN yarn install --immutable
  ```

---

## Fase 1: Monorepo Struktur & Kernepakker

### 1.1 Domain‑orienteret Workspace‑Opsætning

* `packages/core` (data‑typer, interfaces)
* `packages/config` (env‑validering, central config)
* `packages/ui` (fælles React‑komponenter)
* `packages/pensum`, `packages/quiz`, …
* `apps/api` (NestJS backend)
* `apps/web` (Next.js frontend)

### 1.2 Konkrete Skridt – `packages/core`

1. `mkdir -p packages/core/src`
2. `cd packages/core` → `yarn init -2 -y`
3. Tilføj i `package.json`:

   ```json
   {
     "name": "@repo/core",
     "version": "0.0.0",
     "private": true,
     "main": "./src/index.ts",
     "types": "./src/index.ts",
     "devDependencies": {
       "typescript": "^5.1.6"
     }
   }
   ```
4. Opret `tsconfig.json`:

   ```json
   {
     "extends": "tsconfig/base.json",
     "compilerOptions": {"outDir": "dist"},
     "include": ["src"]
   }
   ```
5. Flyt delte typer fra `apps/api` og `apps/web` til `packages/core/src/types`

### 1.3 Refaktorer Imports

* I `apps/api`:

  ```bash
  yarn workspace api add @repo/core
  ```

  Opdater alle `import { User } from '../../...'` til:

  ```ts
  import { User, Role } from '@repo/core'
  ```
* I `apps/web`: tilsvarende `yarn workspace web add @repo/core`

---

## Fase 2: Autentificering & Authorization (Refaktor)

* Opdater backend DTO’er/services til at bruge typer fra `@repo/core`
* Opdater frontend AuthContext/Pages til at bruge `@repo/core`
* (Evt.) skift fra `localStorage` til `httpOnly` cookies senere

---

## Fase 3: UI‑Bibliotek & Storybook

* Opret `packages/ui` med React, Storybook, Tailwind
* Flyt/bygg basale komponenter (Button, Card, Input)
* Test via `yarn workspace ui storybook`

---

## Fase 4: Pensum & Quiz Pakker

1. `packages/pensum`: Prisma‑modeller, CRUD‑service, migration
2. `apps/api`: PensumModule, Controllers & guarded endpoints
3. `apps/web`: Admin‑UI og Bruger‑UI for pensum
4. `packages/quiz` & tilhørende CRUD, quiz‑flow i UI

---

## Næste Konkrete Skridt

1. Erstat `.yarnrc.yml` med Berry‑konfigurationen ovenfor
2. Kør den fulde oprydning og `yarn install`
3. Opret `packages/core` og init med Yarn v4
4. Flyt eksisterende TypeScript‑interfaces ind i `packages/core`
5. Tilføj `@repo/core` som dependency i `apps/api` & `apps/web`

Lad os tage de første tre punkter i dag. Når Berry‑opsætningen er stabil, går vi videre med `packages/core`.
Hvordan lyder det?
</file>

<file path="package-scripts.js">
const path = require("path");

const apiPath = path.resolve(__dirname, "apps/api");
const webPath = path.resolve(__dirname, "apps/web");

const ciApiPath = path.resolve(__dirname, "out/apps/api");
const ciWebPath = path.resolve(__dirname, "out/apps/web");

module.exports = {
  scripts: {
    prepare: {
      default: `nps prepare.web prepare.api`,
      web: `yarn`,
      api: `nps prepare.docker prisma.migrate.dev`,
      docker: "docker compose up -d",
      ci: {
        web: `npx turbo prune --scope=web && cd out && yarn install --frozen-lockfile`,
        api: `npx turbo prune --scope=api && cd out && yarn install --frozen-lockfile && nps prisma.generate`,
      },
    },
    test: {
      default: `nps test.web test.api`,
      web: `cd ${webPath} && yarn test`,
      api: `cd ${apiPath} && yarn test`,
      ci: {
        default: `nps test.ci.web test.ci.api`,
        web: `cd ${ciWebPath} && yarn test:ci`,
        api: `cd ${ciApiPath} && yarn test:ci`,
      },
      watch: {
        default: `nps test.watch.web test.watch.api`,
        web: `cd ${webPath} && yarn test:watch`,
        api: `cd ${apiPath} && yarn test:watch`,
      },
    },
    prisma: {
      generate: `cd ${apiPath} && npx prisma generate`,
      studio: `cd ${apiPath} && npx prisma studio`,
      migrate: {
        dev: `cd ${apiPath} && npx prisma migrate dev`,
      },
    },
    build: {
      default: "npx turbo run build",
      ci: {
        web: "cd out && npm run build",
        api: "cd out && npm run build",
      },
    },
    docker: {
      build: {
        default: "nps docker.build.web docker.build.api",
        web: `docker build -t web . -f ${webPath}/Dockerfile`,
        api: `docker build -t api . -f ${apiPath}/Dockerfile`,
      },
    },
    dev: "npx turbo run dev",
  },
};
</file>

<file path="apps/api/src/app.module.ts">
// apps/api/src/app.module.ts
import { Module } from '@nestjs/common';
import { ConfigModule } from '@nestjs/config'; // Kun ConfigModule
import { AppController } from './app.controller';
import { AppService } from './app.service';
// import { validationSchemaForEnv } from './config/environment-variables'; // Fjernet
import { PersistenceModule } from './persistence/persistence.module';
import { UsersModule } from './users/users.module';
import { AuthModule } from './auth/auth.module';

@Module({
  imports: [
    ConfigModule.forRoot({ // Ingen validationSchema her længere for de delte variabler
      isGlobal: true,
    }),
    PersistenceModule,
    UsersModule,
    AuthModule,
  ],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {}
</file>

<file path="apps/api/src/main.ts">
// apps/api/src/main.ts
import { Logger, ValidationPipe } from '@nestjs/common'; // Importer ValidationPipe
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';

declare const module: any; // For HMR (Hot Module Replacement)

async function bootstrap() {
  const logger = new Logger('EntryPoint');
  const app = await NestFactory.create(AppModule);

  // Global Validation Pipe
  // Dette sikrer, at alle indkommende data til controllere valideres
  // baseret på DTO'er (Data Transfer Objects) og class-validator decorators.
  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true, // Fjerner automatisk properties, der ikke er defineret i DTO'en.
      forbidNonWhitelisted: true, // Kaster en fejl, hvis der sendes properties, der ikke er i DTO'en.
      transform: true, // Transformer automatisk indkommende data til DTO-instanser.
      transformOptions: {
        enableImplicitConversion: true, // Tillader implicit konvertering af typer (f.eks. string fra URL-parametre til number).
      },
    }),
  );

  // Swagger API Dokumentation Setup
  // Swagger (OpenAPI) bruges til at generere interaktiv API-dokumentation.
  const swaggerConfig = new DocumentBuilder()
    .setTitle('Læringsplatform API') // Opdateret titel for API-dokumentationen
    .setDescription('API Dokumentation for den avancerede læringsplatform') // Opdateret beskrivelse
    .setVersion('1.0')
    .addBearerAuth() // Tilføjer mulighed for at specificere Bearer Token (JWT) i Swagger UI, forbereder til autentificering
    .build();

  const document = SwaggerModule.createDocument(app, swaggerConfig);
  // Gør API-dokumentationen tilgængelig på /docs endpointet (f.eks. http://localhost/api/docs via Nginx)
  SwaggerModule.setup('docs', app, document);

  // Sæt porten for API'en. Brug miljøvariablen PORT hvis den er sat, ellers default til 5002.
  const PORT = process.env.PORT || 5002;

  await app.listen(PORT);

  // HMR (Hot Module Replacement) opsætning (kun for udvikling)
  // Dette tillader moduler at blive genindlæst uden at genstarte hele applikationen.
  if (module.hot) {
    module.hot.accept();
    module.hot.dispose(() => app.close());
  }

  // Log-beskeder til terminalen for at vise, at serveren kører.
  logger.log(`NestJS API server kører internt på http://localhost:${PORT}`);
  logger.log(
    `API Dokumentation (internt) er tilgængelig på http://localhost:${PORT}/docs`,
  );
  logger.log(
    `Hele applikationen (via Nginx) burde være tilgængelig på http://localhost`,
  );
  logger.log(
    `API'en (via Nginx) burde være tilgængelig på http://localhost/api/`,
  );
}
bootstrap();
</file>

<file path="packages/config/package.json">
{
  "name": "@repo/config",
  "version": "0.0.0",
  "private": true,
  "packageManager": "yarn@4.9.1",
  "main": "./src/index.ts",
  "types": "./src/index.ts",
  "files": [
    "eslint-preset.js",
    "nginx.conf",
    "postcss.config.js",
    "tailwind.config.js",
    "src"
  ],
  "scripts": {
    "lint": "eslint . --ext .ts,.tsx",
    "build": "tsc -p tsconfig.json"
  },
  "dependencies": {
    "eslint-config-next": "^13.4.12",
    "eslint-config-prettier": "^8.9.0",
    "eslint-plugin-react": "7.33.1",
    "zod": "^3.24.4"
  },
  "devDependencies": {
    "eslint": "^8.57.1",
    "tsconfig": "workspace:*",
    "typescript": "^5.1.6"
  },
  "license": "MIT"
}
</file>

<file path="packages/ui/package.json">
{
  "name": "ui",
  "version": "0.0.0",
  "private": true,
  "packageManager": "yarn@4.9.1",
  "main": "./index.tsx",
  "types": "./index.tsx",
  "license": "MIT",
  "devDependencies": {
    "@repo/config": "workspace:*",
    "@types/react": "^18.2.18",
    "@types/react-dom": "^18.2.7",
    "tsconfig": "workspace:*",
    "typescript": "^5.1.6"
  }
}
</file>

<file path="README.md">
# Turborepo (NestJS + Prisma + NextJS + Tailwind + Typescript + Jest) Starter

This is fullstack turborepo starter. It comes with the following features. 

- ✅ Turborepo 
- ✅ Nestjs 
    - ✅ Env Config with Validation  
    - ✅ Prisma 
- ✅ NextJS 
    - ✅ Tailwind 
    - ✅ Redux Toolkit Query 
- ✅ Testing using Jest 
- ✅ Github Actions 
- ✅ Reverse Proxy using Nginx 
- ✅ Docker Integration 
- ✅ Postgres Database 
- ✅ Package scripts using NPS 

## What's inside?

This turborepo uses [Yarn](https://classic.yarnpkg.com/lang/en/) as a package manager. It includes the following packages/apps:

### Apps and Packages

- `api`: a [NestJS](https://nestjs.com/) app
- `web`: a [Next.js](https://nextjs.org) app
- `ui`: a stub React component library used by `web`.
- `config`: `eslint`, `nginx` and `tailwind` (includes `eslint-config-next` and `eslint-config-prettier`)
- `tsconfig`: `tsconfig.json`s used throughout the monorepo

Each package/app is 100% [TypeScript](https://www.typescriptlang.org/).

### Utilities

This turborepo has some additional tools already setup for you:

- [Node Package Scripts](https://github.com/sezna/nps#readme) for automation scripts
- [TypeScript](https://www.typescriptlang.org/) for static type checking
- [ESLint](https://eslint.org/) for code linting
- [Prettier](https://prettier.io) for code formatting

## Setup
This starter kit is using turborepo and yarn workspaces for monorepo workflow.

### Prerequisites 
- Install nps by running 
```
npm i -g nps
```
- Make sure docker and docker-compose are
 installed. Refer to docs for your operating system.

### Configure Environment
- Frontend 
    - `cd apps/web && cp .env.example .env`
- Backend 
    - `cd apps/api && cp .env.example .env`

### Install Dependencies
Make sure you are at root of the project and just run 

```
nps prepare
```
### Build

To build all apps and packages, run the following command at the root of project:

```
nps build
```

### Develop

To develop all apps and packages, run the following command at the root of project:

```
nps dev
```
The app should be running at `http://localhost` with reverse proxy configured.


## Other available commands
Run `nps` in the terminal to see list of all available commands.
</file>

<file path="apps/api/package.json">
{
  "name": "api",
  "version": "0.0.1",
  "description": "",
  "author": "",
  "private": true,
  "license": "UNLICENSED",
  "packageManager": "yarn@4.9.1",
  "scripts": {
    "prebuild": "rimraf dist",
    "build": "nest build",
    "format": "prettier --write \"src/**/*.ts\" \"test/**/*.ts\"",
    "start": "nest start",
    "dev": "nest build --webpack --webpackPath webpack-hmr.config.js --watch",
    "start:debug": "nest start --debug --watch",
    "start:prod": "node dist/main",
    "lint": "eslint \"{src,apps,libs,test}/**/*.ts\" --fix",
    "test": "jest",
    "test:watch": "jest --watch --runInBand",
    "test:cov": "jest --coverage",
    "test:debug": "node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand",
    "test:e2e": "jest --config ./test/jest-e2e.json --runInBand",
    "test:ci": "jest --ci --runInBand"
  },
  "dependencies": {
    "@nestjs/common": "^10.1.3",
    "@nestjs/config": "^3.0.0",
    "@nestjs/core": "^10.1.3",
    "@nestjs/jwt": "^11.0.0",
    "@nestjs/passport": "^11.0.5",
    "@nestjs/platform-express": "^10.1.3",
    "@nestjs/swagger": "^7.1.6",
    "@prisma/client": "^5.1.0",
    "@repo/config": "workspace:*",
    "@repo/core": "workspace:*",
    "bcryptjs": "^3.0.2",
    "class-transformer": "^0.5.1",
    "class-validator": "^0.14.2",
    "passport": "^0.7.0",
    "passport-jwt": "^4.0.1",
    "passport-local": "^1.0.0",
    "reflect-metadata": "^0.1.13",
    "rimraf": "^5.0.1",
    "rxjs": "^7.8.2",
    "swagger-ui-express": "^5.0.0"
  },
  "devDependencies": {
    "@nestjs/cli": "^10.1.11",
    "@nestjs/schematics": "^10.0.1",
    "@nestjs/testing": "^10.1.3",
    "@swc/core": "^1.11.24",
    "@swc/types": "^0.1.21",
    "@types/babel__core": "^7.20.5",
    "@types/express": "^5.0.2",
    "@types/jest": "^29.5.3",
    "@types/node": "^20.4.5",
    "@types/node-notifier": "^8.0.5",
    "@types/passport": "^1.0.17",
    "@types/passport-jwt": "^4.0.1",
    "@types/passport-local": "^1.0.38",
    "@types/prettier": "^3.0.0",
    "@types/supertest": "^2.0.12",
    "@typescript-eslint/eslint-plugin": "^6.2.1",
    "@typescript-eslint/parser": "^6.2.1",
    "eslint": "^8.57.1",
    "eslint-config-prettier": "^8.9.0",
    "eslint-plugin-prettier": "^5.0.0",
    "express": "^5.1.0",
    "jest": "^29.6.2",
    "prettier": "^3.0.0",
    "prisma": "^5.1.0",
    "run-script-webpack-plugin": "^0.2.0",
    "source-map-support": "^0.5.21",
    "supertest": "^6.3.3",
    "ts-jest": "^29.1.1",
    "ts-loader": "^9.4.4",
    "ts-node": "^10.9.1",
    "tsconfig": "*",
    "tsconfig-paths": "^4.2.0",
    "typescript": "^5.1.6",
    "webpack": "^5.88.2",
    "webpack-node-externals": "^3.0.0"
  },
  "jest": {
    "moduleFileExtensions": [
      "js",
      "json",
      "ts"
    ],
    "rootDir": "src",
    "testRegex": ".*\\.spec\\.ts$",
    "transform": {
      "^.+\\.(t|j)s$": "ts-jest"
    },
    "collectCoverageFrom": [
      "**/*.(t|j)s"
    ],
    "coverageDirectory": "../coverage",
    "testEnvironment": "node"
  }
}
</file>

<file path="terminal.txt">
Yousef@MacBook-Pro-tilhrende-Yousef LearningLab % yarn install

➤ YN0000: · Yarn 4.9.1
➤ YN0000: ┌ Resolution step
➤ YN0085: │ + @nestjs/cli@npm:10.4.9, @nestjs/common@npm:10.4.17, and 1103 more.
➤ YN0000: └ Completed in 1s 955ms
➤ YN0000: ┌ Fetch step
➤ YN0000: └ Completed in 0s 441ms
➤ YN0000: ┌ Link step
➤ YN0007: │ turbo@npm:1.10.12 must be built because it never has been before or the last one failed
➤ YN0007: │ @nestjs/core@npm:10.4.17 [62573] must be built because it never has been before or the last one failed
➤ YN0007: │ @prisma/engines@npm:5.22.0 must be built because it never has been before or the last one failed
➤ YN0007: │ @swc/core@npm:1.11.24 [62573] must be built because it never has been before or the last one failed
➤ YN0007: │ @scarf/scarf@npm:1.4.0 must be built because it never has been before or the last one failed
➤ YN0007: │ unrs-resolver@npm:1.7.2 must be built because it never has been before or the last one failed
➤ YN0007: │ prisma@npm:5.22.0 must be built because it never has been before or the last one failed
➤ YN0007: │ @prisma/client@npm:5.22.0 [62573] must be built because it never has been before or the last one failed
➤ YN0000: └ Completed in 9s 618ms
➤ YN0000: · Done in 12s 139ms
Yousef@MacBook-Pro-tilhrende-Yousef LearningLab %
</file>

<file path="apps/web/package.json">
{
  "name": "web",
  "version": "0.0.0",
  "private": true,
  "packageManager": "yarn@4.9.1",
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:ci": "jest --ci"
  },
  "dependencies": {
    "@reduxjs/toolkit": "^1.9.5",
    "@repo/config": "workspace:*",
    "@repo/core": "workspace:*",
    "next": "13.4.12",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "react-redux": "^8.1.2",
    "ui": "workspace:*",
    "uuid": "^11.1.0"
  },
  "devDependencies": {
    "@repo/config": "workspace:*",
    "@testing-library/dom": "^10.4.0",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^14.0.0",
    "@testing-library/user-event": "14.4.3",
    "@types/babel__core": "^7.20.5",
    "@types/node": "^20.4.5",
    "@types/react": "18.2.18",
    "@types/uuid": "^10.0.0",
    "autoprefixer": "^10.4.14",
    "eslint": "8.46.0",
    "jest": "^29.6.2",
    "jest-environment-jsdom": "^29.6.2",
    "next-transpile-modules": "10.0.1",
    "postcss": "^8.4.27",
    "tailwindcss": "^3.3.3",
    "tsconfig": "workspace:*",
    "typescript": "^5.1.6"
  }
}
</file>

<file path="package.json">
{
  "name": "turborepo-basic-shared",
  "version": "0.0.0",
  "private": true,
  "packageManager": "yarn@4.9.1",
  "workspaces": [
    "apps/*",
    "packages/*"
  ],
  "scripts": {
    "build": "turbo run build",
    "dev": "turbo run dev --parallel",
    "lint": "turbo run lint",
    "format": "prettier --write \"**/*.{ts,tsx,md}\""
  },
  "devDependencies": {
    "@nestjs/common": "^11.1.1",
    "@types/eslint": "^9.6.1",
    "@types/jest": "^29.5.14",
    "@types/node": "^22.15.18",
    "prettier": "^3.0.0",
    "prisma": "^5.1.0",
    "rxjs": "^7.8.2",
    "turbo": "1.10.12",
    "typescript": "^5.8.3"
  },
  "dependencies": {
    "@nestjs/config": "^4.0.2",
    "reflect-metadata": "^0.2.2"
  },
  "engines": {
    "npm": ">=7.0.0",
    "node": ">=14.0.0"
  }
}
</file>

</files>
