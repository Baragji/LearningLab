This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.github/
  workflows/
    ci.yml
.repomix/
  bundles.json
api/
  web.txt
apps/
  api/
    prisma/
      migrations/
        20220307034109_initial_migrate/
          migration.sql
        20250517073440_add_user_auth_fields/
          migration.sql
        20250517122525_add_password_reset_fields/
          migration.sql
        migration_lock.toml
      schema.prisma
    src/
      auth/
        dto/
          forgot-password.dto.ts
          login.dto.ts
          reset-password.dto.ts
        guards/
          jwt-auth.guard.ts
          local-auth.guard.ts
        strategies/
          jwt/
            jwt.ts
          local/
            local.ts
        auth.controller.ts
        auth.module.ts
        auth.service.ts
      config/
        environment-variables.ts
      persistence/
        prisma/
          prisma.service.spec.ts
          prisma.service.ts
        persistence.module.ts
      users/
        dto/
          create-user.dto.ts
        users.controller.spec.ts
        users.controller.ts
        users.module.ts
        users.service.spec.ts
        users.service.ts
      app.controller.spec.ts
      app.controller.ts
      app.module.ts
      app.service.ts
      main.ts
    test/
      app.e2e-spec.ts
      jest-e2e.json
    .eslintrc.js
    .prettierrc
    nest-cli.json
    package.json
    tsconfig.build.json
    tsconfig.json
    webpack-hmr.config.js
  web/
    pages/
      _app.tsx
      forgot-password.tsx
      index.tsx
      login.tsx
      profile.tsx
      reset-password.tsx
      signup.tsx
    src/
      components/
        auth/
          ProtectedRoute.tsx
      context/
        AuthContext.tsx
      screens/
        auth/
          forgot-password/
            forgot-password.tsx
          login/
            login.test.tsx
            login.tsx
          reset-password/
            reset-password.tsx
          signup/
            signup.tsx
      store/
        services/
          api.ts
        index.ts
      styles/
        global.css
    .eslintrc.js
    jest.config.js
    jest.setup.js
    next-env.d.ts
    next.config.js
    package.json
    postcss.config.js
    README.md
    tailwind.config.js
    tsconfig.json
packages/
  config/
    src/
      env.ts
      index.ts
    eslint-preset.js
    nginx.conf
    package.json
    postcss.config.js
    tailwind.config.js
    tsconfig.json
  core/
    src/
      types/
        user.types.ts
      index.ts
    package.json
    tsconfig.json
  tsconfig/
    base.json
    nestjs.json
    nextjs.json
    package.json
    react-library.json
    README.md
  ui/
    components/
      Button/
        Button.tsx
    index.tsx
    package.json
    tsconfig.json
.gitignore
.node-version
.yarnrc.yml
LICENSE
logoutput.txt
package-scripts.js
package.json
README.md
render.yaml
Struktur.txt
turbo.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="logoutput.txt">
Build and Test
failed now in 36s

1s
2s
4s
0s
20s
Run yarn install --immutable
! Corepack is about to download https://repo.yarnpkg.com/4.9.1/packages/yarnpkg-cli/bin/yarn.js
➤ YN0000: · Yarn 4.9.1
➤ YN0000: ┌ Resolution step
Resolution step
➤ YN0000: └ Completed in 0s 268ms
➤ YN0000: ┌ Fetch step
Fetch step
➤ YN0000: └ Completed in 7s 434ms
➤ YN0000: ┌ Link step
Link step
  ➤ YN0007: │ turbo@npm:1.10.12 must be built because it never has been before or the last one failed
  ➤ YN0007: │ @nestjs/core@npm:10.4.17 [62573] must be built because it never has been before or the last one failed
  ➤ YN0007: │ @prisma/engines@npm:5.22.0 must be built because it never has been before or the last one failed
  ➤ YN0007: │ @swc/core@npm:1.11.24 [62573] must be built because it never has been before or the last one failed
  ➤ YN0007: │ @scarf/scarf@npm:1.4.0 must be built because it never has been before or the last one failed
  ➤ YN0007: │ unrs-resolver@npm:1.7.2 must be built because it never has been before or the last one failed
  ➤ YN0007: │ prisma@npm:5.22.0 must be built because it never has been before or the last one failed
  ➤ YN0007: │ @prisma/client@npm:5.22.0 [62573] must be built because it never has been before or the last one failed
  ➤ YN0000: │ @prisma/client@npm:5.22.0 [62573] STDERR prisma:warn We could not find your Prisma schema in the default locations (see: https://pris.ly/d/prisma-schema-location).
  ➤ YN0000: │ @prisma/client@npm:5.22.0 [62573] STDERR If you have a Prisma schema file in a custom path, you will need to run
  ➤ YN0000: │ @prisma/client@npm:5.22.0 [62573] STDERR `prisma generate --schema=./path/to/your/schema.prisma` to generate Prisma Client.
  ➤ YN0000: │ @prisma/client@npm:5.22.0 [62573] STDERR If you do not have a Prisma schema file yet, you can ignore this message.
  ➤ YN0000: │ @prisma/client@npm:5.22.0 [62573] STDOUT 
➤ YN0000: └ Completed in 10s 575ms
➤ YN0000: · Done in 18s 461ms
5s
Run yarn turbo run test:ci build
  
• Packages in scope: @repo/config, @repo/core, api, tsconfig, ui, web
• Running test:ci, build in 6 packages
• Remote caching disabled
api:test:ci
Error: web#test:ci: command (/home/runner/work/LearningLab/LearningLab/apps/web) yarn run test:ci exited (1)
 ERROR  run failed: command  exited (1)
@repo/core:build
web:test:ci
  cache bypass, force executing 6d90b72ce02f0d3e
    console.error
      Error: Uncaught [Error: NextRouter was not mounted. https://nextjs.org/docs/messages/next-router-not-mounted]
          at reportException (/home/runner/work/LearningLab/LearningLab/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
          at innerInvokeEventListeners (/home/runner/work/LearningLab/LearningLab/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
          at invokeEventListeners (/home/runner/work/LearningLab/LearningLab/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
          at HTMLUnknownElementImpl._dispatch (/home/runner/work/LearningLab/LearningLab/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
          at HTMLUnknownElementImpl.dispatchEvent (/home/runner/work/LearningLab/LearningLab/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
          at HTMLUnknownElement.dispatchEvent (/home/runner/work/LearningLab/LearningLab/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
          at Object.invokeGuardedCallbackDev (/home/runner/work/LearningLab/LearningLab/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
          at invokeGuardedCallback (/home/runner/work/LearningLab/LearningLab/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
          at beginWork$1 (/home/runner/work/LearningLab/LearningLab/node_modules/react-dom/cjs/react-dom.development.js:27451:7)
          at performUnitOfWork (/home/runner/work/LearningLab/LearningLab/node_modules/react-dom/cjs/react-dom.development.js:26560:12)
          at workLoopSync (/home/runner/work/LearningLab/LearningLab/node_modules/react-dom/cjs/react-dom.development.js:26466:5)
          at renderRootSync (/home/runner/work/LearningLab/LearningLab/node_modules/react-dom/cjs/react-dom.development.js:26434:7)
          at performConcurrentWorkOnRoot (/home/runner/work/LearningLab/LearningLab/node_modules/react-dom/cjs/react-dom.development.js:25738:74)
          at flushActQueue (/home/runner/work/LearningLab/LearningLab/node_modules/react/cjs/react.development.js:2667:24)
          at act (/home/runner/work/LearningLab/LearningLab/node_modules/react/cjs/react.development.js:2582:11)
          at /home/runner/work/LearningLab/LearningLab/node_modules/@testing-library/react/dist/act-compat.js:47:25
          at renderRoot (/home/runner/work/LearningLab/LearningLab/node_modules/@testing-library/react/dist/pure.js:180:26)
          at render (/home/runner/work/LearningLab/LearningLab/node_modules/@testing-library/react/dist/pure.js:271:10)
          at Object.<anonymous> (/home/runner/work/LearningLab/LearningLab/apps/web/src/screens/auth/login/login.test.tsx:7:9)
          at Promise.then.completed (/home/runner/work/LearningLab/LearningLab/node_modules/jest-circus/build/utils.js:298:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (/home/runner/work/LearningLab/LearningLab/node_modules/jest-circus/build/utils.js:231:10)
          at _callCircusTest (/home/runner/work/LearningLab/LearningLab/node_modules/jest-circus/build/run.js:316:40)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)
          at _runTest (/home/runner/work/LearningLab/LearningLab/node_modules/jest-circus/build/run.js:252:3)
          at _runTestsForDescribeBlock (/home/runner/work/LearningLab/LearningLab/node_modules/jest-circus/build/run.js:126:9)
          at run (/home/runner/work/LearningLab/LearningLab/node_modules/jest-circus/build/run.js:71:3)
          at runAndTransformResultsToJestFormat (/home/runner/work/LearningLab/LearningLab/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
          at jestAdapter (/home/runner/work/LearningLab/LearningLab/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
          at runTestInternal (/home/runner/work/LearningLab/LearningLab/node_modules/jest-runner/build/runTest.js:367:16)
          at runTest (/home/runner/work/LearningLab/LearningLab/node_modules/jest-runner/build/runTest.js:444:34) {
        detail: Error: NextRouter was not mounted. https://nextjs.org/docs/messages/next-router-not-mounted
            at useRouter (/home/runner/work/LearningLab/LearningLab/node_modules/next/src/client/router.ts:135:11)
            at AuthProvider (/home/runner/work/LearningLab/LearningLab/apps/web/src/context/AuthContext.tsx:38:27)
            at renderWithHooks (/home/runner/work/LearningLab/LearningLab/node_modules/react-dom/cjs/react-dom.development.js:16305:18)
            at mountIndeterminateComponent (/home/runner/work/LearningLab/LearningLab/node_modules/react-dom/cjs/react-dom.development.js:20074:13)
            at beginWork (/home/runner/work/LearningLab/LearningLab/node_modules/react-dom/cjs/react-dom.development.js:21587:16)
            at HTMLUnknownElement.callCallback (/home/runner/work/LearningLab/LearningLab/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
            at HTMLUnknownElement.callTheUserObjectsOperation (/home/runner/work/LearningLab/LearningLab/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
            at innerInvokeEventListeners (/home/runner/work/LearningLab/LearningLab/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
            at invokeEventListeners (/home/runner/work/LearningLab/LearningLab/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
            at HTMLUnknownElementImpl._dispatch (/home/runner/work/LearningLab/LearningLab/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
            at HTMLUnknownElementImpl.dispatchEvent (/home/runner/work/LearningLab/LearningLab/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
            at HTMLUnknownElement.dispatchEvent (/home/runner/work/LearningLab/LearningLab/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
            at Object.invokeGuardedCallbackDev (/home/runner/work/LearningLab/LearningLab/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
            at invokeGuardedCallback (/home/runner/work/LearningLab/LearningLab/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
            at beginWork$1 (/home/runner/work/LearningLab/LearningLab/node_modules/react-dom/cjs/react-dom.development.js:27451:7)
            at performUnitOfWork (/home/runner/work/LearningLab/LearningLab/node_modules/react-dom/cjs/react-dom.development.js:26560:12)
            at workLoopSync (/home/runner/work/LearningLab/LearningLab/node_modules/react-dom/cjs/react-dom.development.js:26466:5)
            at renderRootSync (/home/runner/work/LearningLab/LearningLab/node_modules/react-dom/cjs/react-dom.development.js:26434:7)
            at performConcurrentWorkOnRoot (/home/runner/work/LearningLab/LearningLab/node_modules/react-dom/cjs/react-dom.development.js:25738:74)
            at flushActQueue (/home/runner/work/LearningLab/LearningLab/node_modules/react/cjs/react.development.js:2667:24)
            at act (/home/runner/work/LearningLab/LearningLab/node_modules/react/cjs/react.development.js:2582:11)
            at /home/runner/work/LearningLab/LearningLab/node_modules/@testing-library/react/dist/act-compat.js:47:25
            at renderRoot (/home/runner/work/LearningLab/LearningLab/node_modules/@testing-library/react/dist/pure.js:180:26)
            at render (/home/runner/work/LearningLab/LearningLab/node_modules/@testing-library/react/dist/pure.js:271:10)
            at Object.<anonymous> (/home/runner/work/LearningLab/LearningLab/apps/web/src/screens/auth/login/login.test.tsx:7:9)
            at Promise.then.completed (/home/runner/work/LearningLab/LearningLab/node_modules/jest-circus/build/utils.js:298:28)
            at new Promise (<anonymous>)
            at callAsyncCircusFn (/home/runner/work/LearningLab/LearningLab/node_modules/jest-circus/build/utils.js:231:10)
            at _callCircusTest (/home/runner/work/LearningLab/LearningLab/node_modules/jest-circus/build/run.js:316:40)
            at processTicksAndRejections (node:internal/process/task_queues:105:5)
            at _runTest (/home/runner/work/LearningLab/LearningLab/node_modules/jest-circus/build/run.js:252:3)
            at _runTestsForDescribeBlock (/home/runner/work/LearningLab/LearningLab/node_modules/jest-circus/build/run.js:126:9)
            at run (/home/runner/work/LearningLab/LearningLab/node_modules/jest-circus/build/run.js:71:3)
            at runAndTransformResultsToJestFormat (/home/runner/work/LearningLab/LearningLab/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
            at jestAdapter (/home/runner/work/LearningLab/LearningLab/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
            at runTestInternal (/home/runner/work/LearningLab/LearningLab/node_modules/jest-runner/build/runTest.js:367:16)
            at runTest (/home/runner/work/LearningLab/LearningLab/node_modules/jest-runner/build/runTest.js:444:34),
        type: 'unhandled exception'
      }
         5 |
         6 | test("render login component", () => {
      >  7 |   render(
           |         ^
         8 |     <AuthProvider>
         9 |       <LoginScreen />
        10 |     </AuthProvider>
        at VirtualConsole.<anonymous> (../../node_modules/jest-environment-jsdom/build/index.js:63:23)
        at reportException (../../node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:70:28)
        at innerInvokeEventListeners (../../node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
        at invokeEventListeners (../../node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
        at HTMLUnknownElementImpl._dispatch (../../node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
        at HTMLUnknownElementImpl.dispatchEvent (../../node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
        at HTMLUnknownElement.dispatchEvent (../../node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
        at Object.invokeGuardedCallbackDev (../../node_modules/react-dom/cjs/react-dom.development.js:4213:16)
        at invokeGuardedCallback (../../node_modules/react-dom/cjs/react-dom.development.js:4277:31)
        at beginWork$1 (../../node_modules/react-dom/cjs/react-dom.development.js:27451:7)
        at performUnitOfWork (../../node_modules/react-dom/cjs/react-dom.development.js:26560:12)
        at workLoopSync (../../node_modules/react-dom/cjs/react-dom.development.js:26466:5)
        at renderRootSync (../../node_modules/react-dom/cjs/react-dom.development.js:26434:7)
        at performConcurrentWorkOnRoot (../../node_modules/react-dom/cjs/react-dom.development.js:25738:74)
        at flushActQueue (../../node_modules/react/cjs/react.development.js:2667:24)
        at act (../../node_modules/react/cjs/react.development.js:2582:11)
        at ../../node_modules/@testing-library/react/dist/act-compat.js:47:25
        at renderRoot (../../node_modules/@testing-library/react/dist/pure.js:180:26)
        at render (../../node_modules/@testing-library/react/dist/pure.js:271:10)
        at Object.<anonymous> (src/screens/auth/login/login.test.tsx:7:9)
    console.error
      Error: Uncaught [Error: NextRouter was not mounted. https://nextjs.org/docs/messages/next-router-not-mounted]
          at reportException (/home/runner/work/LearningLab/LearningLab/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
          at innerInvokeEventListeners (/home/runner/work/LearningLab/LearningLab/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
          at invokeEventListeners (/home/runner/work/LearningLab/LearningLab/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
          at HTMLUnknownElementImpl._dispatch (/home/runner/work/LearningLab/LearningLab/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
          at HTMLUnknownElementImpl.dispatchEvent (/home/runner/work/LearningLab/LearningLab/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
          at HTMLUnknownElement.dispatchEvent (/home/runner/work/LearningLab/LearningLab/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
          at Object.invokeGuardedCallbackDev (/home/runner/work/LearningLab/LearningLab/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
          at invokeGuardedCallback (/home/runner/work/LearningLab/LearningLab/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
          at beginWork$1 (/home/runner/work/LearningLab/LearningLab/node_modules/react-dom/cjs/react-dom.development.js:27451:7)
          at performUnitOfWork (/home/runner/work/LearningLab/LearningLab/node_modules/react-dom/cjs/react-dom.development.js:26560:12)
          at workLoopSync (/home/runner/work/LearningLab/LearningLab/node_modules/react-dom/cjs/react-dom.development.js:26466:5)
          at renderRootSync (/home/runner/work/LearningLab/LearningLab/node_modules/react-dom/cjs/react-dom.development.js:26434:7)
          at recoverFromConcurrentError (/home/runner/work/LearningLab/LearningLab/node_modules/react-dom/cjs/react-dom.development.js:25850:20)
          at performConcurrentWorkOnRoot (/home/runner/work/LearningLab/LearningLab/node_modules/react-dom/cjs/react-dom.development.js:25750:22)
          at flushActQueue (/home/runner/work/LearningLab/LearningLab/node_modules/react/cjs/react.development.js:2667:24)
          at act (/home/runner/work/LearningLab/LearningLab/node_modules/react/cjs/react.development.js:2582:11)
          at /home/runner/work/LearningLab/LearningLab/node_modules/@testing-library/react/dist/act-compat.js:47:25
          at renderRoot (/home/runner/work/LearningLab/LearningLab/node_modules/@testing-library/react/dist/pure.js:180:26)
          at render (/home/runner/work/LearningLab/LearningLab/node_modules/@testing-library/react/dist/pure.js:271:10)
          at Object.<anonymous> (/home/runner/work/LearningLab/LearningLab/apps/web/src/screens/auth/login/login.test.tsx:7:9)
          at Promise.then.completed (/home/runner/work/LearningLab/LearningLab/node_modules/jest-circus/build/utils.js:298:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (/home/runner/work/LearningLab/LearningLab/node_modules/jest-circus/build/utils.js:231:10)
          at _callCircusTest (/home/runner/work/LearningLab/LearningLab/node_modules/jest-circus/build/run.js:316:40)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)
          at _runTest (/home/runner/work/LearningLab/LearningLab/node_modules/jest-circus/build/run.js:252:3)
          at _runTestsForDescribeBlock (/home/runner/work/LearningLab/LearningLab/node_modules/jest-circus/build/run.js:126:9)
          at run (/home/runner/work/LearningLab/LearningLab/node_modules/jest-circus/build/run.js:71:3)
          at runAndTransformResultsToJestFormat (/home/runner/work/LearningLab/LearningLab/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
          at jestAdapter (/home/runner/work/LearningLab/LearningLab/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
          at runTestInternal (/home/runner/work/LearningLab/LearningLab/node_modules/jest-runner/build/runTest.js:367:16)
          at runTest (/home/runner/work/LearningLab/LearningLab/node_modules/jest-runner/build/runTest.js:444:34) {
        detail: Error: NextRouter was not mounted. https://nextjs.org/docs/messages/next-router-not-mounted
            at useRouter (/home/runner/work/LearningLab/LearningLab/node_modules/next/src/client/router.ts:135:11)
            at AuthProvider (/home/runner/work/LearningLab/LearningLab/apps/web/src/context/AuthContext.tsx:38:27)
            at renderWithHooks (/home/runner/work/LearningLab/LearningLab/node_modules/react-dom/cjs/react-dom.development.js:16305:18)
            at mountIndeterminateComponent (/home/runner/work/LearningLab/LearningLab/node_modules/react-dom/cjs/react-dom.development.js:20074:13)
            at beginWork (/home/runner/work/LearningLab/LearningLab/node_modules/react-dom/cjs/react-dom.development.js:21587:16)
            at HTMLUnknownElement.callCallback (/home/runner/work/LearningLab/LearningLab/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
            at HTMLUnknownElement.callTheUserObjectsOperation (/home/runner/work/LearningLab/LearningLab/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
            at innerInvokeEventListeners (/home/runner/work/LearningLab/LearningLab/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
            at invokeEventListeners (/home/runner/work/LearningLab/LearningLab/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
            at HTMLUnknownElementImpl._dispatch (/home/runner/work/LearningLab/LearningLab/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
            at HTMLUnknownElementImpl.dispatchEvent (/home/runner/work/LearningLab/LearningLab/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
            at HTMLUnknownElement.dispatchEvent (/home/runner/work/LearningLab/LearningLab/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
            at Object.invokeGuardedCallbackDev (/home/runner/work/LearningLab/LearningLab/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
            at invokeGuardedCallback (/home/runner/work/LearningLab/LearningLab/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
            at beginWork$1 (/home/runner/work/LearningLab/LearningLab/node_modules/react-dom/cjs/react-dom.development.js:27451:7)
            at performUnitOfWork (/home/runner/work/LearningLab/LearningLab/node_modules/react-dom/cjs/react-dom.development.js:26560:12)
            at workLoopSync (/home/runner/work/LearningLab/LearningLab/node_modules/react-dom/cjs/react-dom.development.js:26466:5)
            at renderRootSync (/home/runner/work/LearningLab/LearningLab/node_modules/react-dom/cjs/react-dom.development.js:26434:7)
            at recoverFromConcurrentError (/home/runner/work/LearningLab/LearningLab/node_modules/react-dom/cjs/react-dom.development.js:25850:20)
            at performConcurrentWorkOnRoot (/home/runner/work/LearningLab/LearningLab/node_modules/react-dom/cjs/react-dom.development.js:25750:22)
            at flushActQueue (/home/runner/work/LearningLab/LearningLab/node_modules/react/cjs/react.development.js:2667:24)
            at act (/home/runner/work/LearningLab/LearningLab/node_modules/react/cjs/react.development.js:2582:11)
            at /home/runner/work/LearningLab/LearningLab/node_modules/@testing-library/react/dist/act-compat.js:47:25
            at renderRoot (/home/runner/work/LearningLab/LearningLab/node_modules/@testing-library/react/dist/pure.js:180:26)
            at render (/home/runner/work/LearningLab/LearningLab/node_modules/@testing-library/react/dist/pure.js:271:10)
            at Object.<anonymous> (/home/runner/work/LearningLab/LearningLab/apps/web/src/screens/auth/login/login.test.tsx:7:9)
            at Promise.then.completed (/home/runner/work/LearningLab/LearningLab/node_modules/jest-circus/build/utils.js:298:28)
            at new Promise (<anonymous>)
            at callAsyncCircusFn (/home/runner/work/LearningLab/LearningLab/node_modules/jest-circus/build/utils.js:231:10)
            at _callCircusTest (/home/runner/work/LearningLab/LearningLab/node_modules/jest-circus/build/run.js:316:40)
            at processTicksAndRejections (node:internal/process/task_queues:105:5)
            at _runTest (/home/runner/work/LearningLab/LearningLab/node_modules/jest-circus/build/run.js:252:3)
            at _runTestsForDescribeBlock (/home/runner/work/LearningLab/LearningLab/node_modules/jest-circus/build/run.js:126:9)
            at run (/home/runner/work/LearningLab/LearningLab/node_modules/jest-circus/build/run.js:71:3)
            at runAndTransformResultsToJestFormat (/home/runner/work/LearningLab/LearningLab/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
            at jestAdapter (/home/runner/work/LearningLab/LearningLab/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
            at runTestInternal (/home/runner/work/LearningLab/LearningLab/node_modules/jest-runner/build/runTest.js:367:16)
            at runTest (/home/runner/work/LearningLab/LearningLab/node_modules/jest-runner/build/runTest.js:444:34),
        type: 'unhandled exception'
      }
         5 |
         6 | test("render login component", () => {
      >  7 |   render(
           |         ^
         8 |     <AuthProvider>
         9 |       <LoginScreen />
        10 |     </AuthProvider>
        at VirtualConsole.<anonymous> (../../node_modules/jest-environment-jsdom/build/index.js:63:23)
        at reportException (../../node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:70:28)
        at innerInvokeEventListeners (../../node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
        at invokeEventListeners (../../node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
        at HTMLUnknownElementImpl._dispatch (../../node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
        at HTMLUnknownElementImpl.dispatchEvent (../../node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
        at HTMLUnknownElement.dispatchEvent (../../node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
        at Object.invokeGuardedCallbackDev (../../node_modules/react-dom/cjs/react-dom.development.js:4213:16)
        at invokeGuardedCallback (../../node_modules/react-dom/cjs/react-dom.development.js:4277:31)
        at beginWork$1 (../../node_modules/react-dom/cjs/react-dom.development.js:27451:7)
        at performUnitOfWork (../../node_modules/react-dom/cjs/react-dom.development.js:26560:12)
        at workLoopSync (../../node_modules/react-dom/cjs/react-dom.development.js:26466:5)
        at renderRootSync (../../node_modules/react-dom/cjs/react-dom.development.js:26434:7)
        at recoverFromConcurrentError (../../node_modules/react-dom/cjs/react-dom.development.js:25850:20)
        at performConcurrentWorkOnRoot (../../node_modules/react-dom/cjs/react-dom.development.js:25750:22)
        at flushActQueue (../../node_modules/react/cjs/react.development.js:2667:24)
        at act (../../node_modules/react/cjs/react.development.js:2582:11)
        at ../../node_modules/@testing-library/react/dist/act-compat.js:47:25
        at renderRoot (../../node_modules/@testing-library/react/dist/pure.js:180:26)
        at render (../../node_modules/@testing-library/react/dist/pure.js:271:10)
        at Object.<anonymous> (src/screens/auth/login/login.test.tsx:7:9)
    console.error
      The above error occurred in the <AuthProvider> component:
      
          at children (/home/runner/work/LearningLab/LearningLab/apps/web/src/context/AuthContext.tsx:34:32)
      
      Consider adding an error boundary to your tree to customize error handling behavior.
      Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.
         5 |
         6 | test("render login component", () => {
      >  7 |   render(
           |         ^
         8 |     <AuthProvider>
         9 |       <LoginScreen />
        10 |     </AuthProvider>
        at logCapturedError (../../node_modules/react-dom/cjs/react-dom.development.js:18687:23)
        at update.callback (../../node_modules/react-dom/cjs/react-dom.development.js:18720:5)
        at callCallback (../../node_modules/react-dom/cjs/react-dom.development.js:13923:12)
        at commitUpdateQueue (../../node_modules/react-dom/cjs/react-dom.development.js:13944:9)
        at commitLayoutEffectOnFiber (../../node_modules/react-dom/cjs/react-dom.development.js:23391:13)
        at commitLayoutMountEffects_complete (../../node_modules/react-dom/cjs/react-dom.development.js:24688:9)
        at commitLayoutEffects_begin (../../node_modules/react-dom/cjs/react-dom.development.js:24674:7)
        at commitLayoutEffects (../../node_modules/react-dom/cjs/react-dom.development.js:24612:3)
        at commitRootImpl (../../node_modules/react-dom/cjs/react-dom.development.js:26823:5)
        at commitRoot (../../node_modules/react-dom/cjs/react-dom.development.js:26682:5)
        at finishConcurrentRender (../../node_modules/react-dom/cjs/react-dom.development.js:25892:9)
        at performConcurrentWorkOnRoot (../../node_modules/react-dom/cjs/react-dom.development.js:25809:7)
        at flushActQueue (../../node_modules/react/cjs/react.development.js:2667:24)
        at act (../../node_modules/react/cjs/react.development.js:2582:11)
        at ../../node_modules/@testing-library/react/dist/act-compat.js:47:25
        at renderRoot (../../node_modules/@testing-library/react/dist/pure.js:180:26)
        at render (../../node_modules/@testing-library/react/dist/pure.js:271:10)
        at Object.<anonymous> (src/screens/auth/login/login.test.tsx:7:9)
  FAIL src/screens/auth/login/login.test.tsx
    ✕ render login component (102 ms)
    ● render login component
      NextRouter was not mounted. https://nextjs.org/docs/messages/next-router-not-mounted
        36 |   const [token, setToken] = useState<string | null>(null);
        37 |   const [isLoading, setIsLoading] = useState<boolean>(true); // Start med loading true for at tjekke initial auth state
      > 38 |   const router = useRouter();
           |                           ^
        39 |
        40 |   // Funktion til at hente brugerprofil baseret på et token
        41 |   const fetchUserProfile = async (currentToken: string) => {
        at useRouter (../../node_modules/next/src/client/router.ts:135:11)
        at AuthProvider (src/context/AuthContext.tsx:38:27)
        at renderWithHooks (../../node_modules/react-dom/cjs/react-dom.development.js:16305:18)
        at mountIndeterminateComponent (../../node_modules/react-dom/cjs/react-dom.development.js:20074:13)
        at beginWork (../../node_modules/react-dom/cjs/react-dom.development.js:21587:16)
        at beginWork$1 (../../node_modules/react-dom/cjs/react-dom.development.js:27426:14)
        at performUnitOfWork (../../node_modules/react-dom/cjs/react-dom.development.js:26560:12)
        at workLoopSync (../../node_modules/react-dom/cjs/react-dom.development.js:26466:5)
        at renderRootSync (../../node_modules/react-dom/cjs/react-dom.development.js:26434:7)
        at recoverFromConcurrentError (../../node_modules/react-dom/cjs/react-dom.development.js:25850:20)
        at performConcurrentWorkOnRoot (../../node_modules/react-dom/cjs/react-dom.development.js:25750:22)
        at flushActQueue (../../node_modules/react/cjs/react.development.js:2667:24)
        at act (../../node_modules/react/cjs/react.development.js:2582:11)
        at ../../node_modules/@testing-library/react/dist/act-compat.js:47:25
        at renderRoot (../../node_modules/@testing-library/react/dist/pure.js:180:26)
        at render (../../node_modules/@testing-library/react/dist/pure.js:271:10)
        at Object.<anonymous> (src/screens/auth/login/login.test.tsx:7:9)
  Test Suites: 1 failed, 1 total
  Tests:       1 failed, 1 total
  Snapshots:   0 total
  Time:        1.54 s
  Ran all test suites.
  Error:  command finished with error: command (/home/runner/work/LearningLab/LearningLab/apps/web) yarn run test:ci exited (1)
@repo/config:build
 Tasks:    0 successful, 4 total
Cached:    0 cached, 4 total
  Time:    4.284s 
Failed:    web#test:ci
Error: Process completed with exit code 1.
0s
1s
Post job cleanup.
/usr/bin/git version
git version 2.49.0
Temporarily overriding HOME='/home/runner/work/_temp/59bdded1-7354-4741-a82a-13c0f9b2f7de' before making global git config changes
Adding repository directory to the temporary git global config as a safe directory
/usr/bin/git config --global --add safe.directory /home/runner/work/LearningLab/LearningLab
/usr/bin/git config --local --name-only --get-regexp core\.sshCommand
/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'core\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :"
/usr/bin/git config --local --name-only --get-regexp http\.https\:\/\/github\.com\/\.extraheader
http.https://github.com/.extraheader
/usr/bin/git config --local --unset-all http.https://github.com/.extraheader
/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'http\.https\:\/\/github\.com\/\.extraheader' && git config --local --unset-all 'http.https://github.com/.extraheader' || :"
</file>

<file path=".repomix/bundles.json">
{
  "bundles": {}
}
</file>

<file path="api/web.txt">
2.name: api-ci

on:
  push:
    branches: [master]
    paths:
      - "apps/api/**"
  pull_request:
    branches: [master]
    paths:
      - "apps/api/**"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: "postgresql://test:test@localhost:5433/mydb"

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - run: yarn global add turbo
      - run: npx nps prepare.ci.api
      - run: npx nps build.ci.api
      - run: npx nps test.ci.api

2. 
# This is a basic workflow to help you get started with Actions

name: web-ci

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [master]
    paths:
      - "apps/web/**"
  pull_request:
    branches: [master]
    paths:
      - "apps/web/**"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache node modules
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - run: yarn global add turbo
      - run: npx nps prepare.ci.web
      - run: npx nps build.ci.web
      - run: npx nps test.ci.web
</file>

<file path="apps/api/prisma/migrations/20220307034109_initial_migrate/migration.sql">
-- CreateTable
CREATE TABLE "User" (
    "id" SERIAL NOT NULL,
    "email" TEXT NOT NULL,
    "name" TEXT,

    CONSTRAINT "User_pkey" PRIMARY KEY ("id")
);

-- CreateIndex
CREATE UNIQUE INDEX "User_email_key" ON "User"("email");
</file>

<file path="apps/api/prisma/migrations/20250517073440_add_user_auth_fields/migration.sql">
/*
  Warnings:

  - Added the required column `passwordHash` to the `User` table without a default value. This is not possible if the table is not empty.
  - Added the required column `updatedAt` to the `User` table without a default value. This is not possible if the table is not empty.

*/
-- CreateEnum
CREATE TYPE "Role" AS ENUM ('USER', 'ADMIN');

-- AlterTable
ALTER TABLE "User" ADD COLUMN     "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
ADD COLUMN     "passwordHash" TEXT NOT NULL,
ADD COLUMN     "role" "Role" NOT NULL DEFAULT 'USER',
ADD COLUMN     "updatedAt" TIMESTAMP(3) NOT NULL;
</file>

<file path="apps/api/prisma/migrations/20250517122525_add_password_reset_fields/migration.sql">
/*
  Warnings:

  - A unique constraint covering the columns `[passwordResetToken]` on the table `User` will be added. If there are existing duplicate values, this will fail.

*/
-- AlterTable
ALTER TABLE "User" ADD COLUMN     "passwordResetExpires" TIMESTAMP(3),
ADD COLUMN     "passwordResetToken" TEXT;

-- CreateIndex
CREATE UNIQUE INDEX "User_passwordResetToken_key" ON "User"("passwordResetToken");
</file>

<file path="apps/api/prisma/migrations/migration_lock.toml">
# Please do not edit this file manually
# It should be added in your version-control system (i.e. Git)
provider = "postgresql"
</file>

<file path="apps/api/src/auth/dto/forgot-password.dto.ts">
// apps/api/src/auth/dto/forgot-password.dto.ts
import { IsEmail, IsNotEmpty } from 'class-validator';

export class ForgotPasswordDto {
  @IsEmail({}, { message: 'Email skal være en gyldig email-adresse.' })
  @IsNotEmpty({ message: 'Email må ikke være tom.' })
  email: string;
}
</file>

<file path="apps/api/src/auth/dto/login.dto.ts">
// apps/api/src/auth/dto/login.dto.ts
import { IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';

export class LoginDto {
  @IsEmail({}, { message: 'Email skal være en gyldig email-adresse.' })
  @IsNotEmpty({ message: 'Email må ikke være tom.' })
  email: string;

  @IsString({ message: 'Password skal være en streng.' })
  @MinLength(8, { message: 'Password skal være mindst 8 tegn langt.' }) // Juster evt. minLength baseret på dine krav
  @IsNotEmpty({ message: 'Password må ikke være tomt.' })
  password: string;
}
</file>

<file path="apps/api/src/auth/dto/reset-password.dto.ts">
// apps/api/src/auth/dto/reset-password.dto.ts
import { IsNotEmpty, IsString, MinLength } from 'class-validator'; // Matches er fjernet fra import

export class ResetPasswordDto {
  @IsString({ message: 'Reset token skal være en streng.' })
  @IsNotEmpty({ message: 'Reset token må ikke være tomt.' })
  token: string;

  @IsString({ message: 'Nyt password skal være en streng.' })
  @IsNotEmpty({ message: 'Nyt password må ikke være tomt.' })
  @MinLength(8, { message: 'Nyt password skal være mindst 8 tegn langt.' })
  // Valgfri: Tilføj en regex for at håndhæve password-kompleksitet, f.eks. mindst ét stort bogstav, ét lille bogstav, ét tal og ét specialtegn.
  // @Matches(/((?=.*\d)|(?=.*\W+))(?![.\n])(?=.*[A-Z])(?=.*[a-z]).*$/, { message: 'Passwordet er for svagt. Det skal indeholde store og små bogstaver, tal og specialtegn.'})
  newPassword: string;

  @IsString({ message: 'Bekræft password skal være en streng.' })
  @IsNotEmpty({ message: 'Bekræft password må ikke være tomt.' })
  // Validering af, om confirmPassword matcher newPassword, vil blive håndteret i AuthService.
  confirmPassword: string;
}
</file>

<file path="apps/api/src/auth/guards/local-auth.guard.ts">
// apps/api/src/auth/guards/local-auth.guard.ts
import { Injectable } from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';

/**
 * A guard that invokes the local Passport strategy.
 * It automatically handles the logic of calling the LocalStrategy's validate() method
 * and setting up req.user upon successful authentication.
 * If authentication fails, it automatically sends a 401 Unauthorized response.
 */
@Injectable()
export class LocalAuthGuard extends AuthGuard('local') {}
</file>

<file path="apps/api/src/config/environment-variables.ts">
import * as Joi from 'joi';

export interface EnvironmentVariables {
  DATABASE_URL: string;
}

export const validationSchemaForEnv = Joi.object<EnvironmentVariables, true>({
  DATABASE_URL: Joi.string().required(),
});
</file>

<file path="apps/api/src/persistence/prisma/prisma.service.spec.ts">
import { Test, TestingModule } from '@nestjs/testing';
import { PrismaService } from './prisma.service';

describe('PrismaService', () => {
  let service: PrismaService;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [PrismaService],
    }).compile();

    service = module.get<PrismaService>(PrismaService);
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });
});
</file>

<file path="apps/api/src/persistence/persistence.module.ts">
import { Module } from '@nestjs/common';
import { PrismaService } from './prisma/prisma.service';

@Module({
  providers: [PrismaService],
  exports: [PrismaService],
})
export class PersistenceModule {}
</file>

<file path="apps/api/src/users/users.controller.spec.ts">
import { Test, TestingModule } from '@nestjs/testing';
import { UsersController } from './users.controller';

describe('UsersController', () => {
  let controller: UsersController;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [UsersController],
    }).compile();

    controller = module.get<UsersController>(UsersController);
  });

  it('should be defined', () => {
    expect(controller).toBeDefined();
  });
});
</file>

<file path="apps/api/src/users/users.module.ts">
// apps/api/src/users/users.module.ts
import { Module } from '@nestjs/common';
import { UsersService } from './users.service';
import { UsersController } from './users.controller';
import { PersistenceModule } from '../persistence/persistence.module'; // Importer PersistenceModule, der indeholder PrismaService

@Module({
  imports: [PersistenceModule], // Gør PrismaService tilgængelig for UsersService
  controllers: [UsersController],
  providers: [UsersService],
  exports: [UsersService], // Gør UsersService tilgængelig for andre moduler (f.eks. AuthModule senere)
})
export class UsersModule {}
</file>

<file path="apps/api/src/users/users.service.spec.ts">
import { Test, TestingModule } from '@nestjs/testing';
import { UsersService } from './users.service';

describe('UsersService', () => {
  let service: UsersService;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [UsersService],
    }).compile();

    service = module.get<UsersService>(UsersService);
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });
});
</file>

<file path="apps/api/src/app.controller.spec.ts">
import { Test, TestingModule } from '@nestjs/testing';
import { AppController } from './app.controller';
import { AppService } from './app.service';
import { PersistenceModule } from './persistence/persistence.module';

describe('AppController', () => {
  let appController: AppController;

  beforeEach(async () => {
    const app: TestingModule = await Test.createTestingModule({
      imports: [PersistenceModule],
      controllers: [AppController],
      providers: [AppService],
    }).compile();

    appController = app.get<AppController>(AppController);
  });

  describe('root', () => {
    it('should return "Hello World!"', async () => {
      expect(await appController.getHello()).toEqual({
        message: 'Hello World',
      });
    });
  });
});
</file>

<file path="apps/api/src/app.controller.ts">
import { Controller, Get } from '@nestjs/common';
import { AppService } from './app.service';

@Controller()
export class AppController {
  constructor(private readonly appService: AppService) {}

  @Get()
  async getHello(): Promise<{ message: string }> {
    return await this.appService.getHello();
  }
}
</file>

<file path="apps/api/src/app.service.ts">
import { Injectable } from '@nestjs/common';

@Injectable()
export class AppService {
  async getHello(): Promise<{ message: string }> {
    return { message: 'Hello World' };
  }
}
</file>

<file path="apps/api/test/app.e2e-spec.ts">
import { Test, TestingModule } from '@nestjs/testing';
import { INestApplication } from '@nestjs/common';
import * as request from 'supertest';
import { AppModule } from './../src/app.module';

describe('AppController (e2e)', () => {
  let app: INestApplication;

  beforeEach(async () => {
    const moduleFixture: TestingModule = await Test.createTestingModule({
      imports: [AppModule],
    }).compile();

    app = moduleFixture.createNestApplication();
    await app.init();
  });

  it('/ (GET)', () => {
    return request(app.getHttpServer())
      .get('/')
      .expect(200)
      .expect('Hello World!');
  });
});
</file>

<file path="apps/api/test/jest-e2e.json">
{
  "moduleFileExtensions": ["js", "json", "ts"],
  "rootDir": ".",
  "testEnvironment": "node",
  "testRegex": ".e2e-spec.ts$",
  "transform": {
    "^.+\\.(t|j)s$": "ts-jest"
  }
}
</file>

<file path="apps/api/.eslintrc.js">
module.exports = {
  parser: '@typescript-eslint/parser',
  parserOptions: {
    project: 'tsconfig.json',
    sourceType: 'module',
    tsconfigRootDir: __dirname,
  },
  plugins: ['@typescript-eslint/eslint-plugin'],
  extends: [
    'plugin:@typescript-eslint/recommended',
    'plugin:prettier/recommended',
  ],
  root: true,
  env: {
    node: true,
    jest: true,
  },
  ignorePatterns: ['.eslintrc.js'],
  rules: {
    '@typescript-eslint/interface-name-prefix': 'off',
    '@typescript-eslint/explicit-function-return-type': 'off',
    '@typescript-eslint/explicit-module-boundary-types': 'off',
    '@typescript-eslint/no-explicit-any': 'off',
  },
};
</file>

<file path="apps/api/.prettierrc">
{
  "singleQuote": true,
  "trailingComma": "all"
}
</file>

<file path="apps/api/nest-cli.json">
{
  "collection": "@nestjs/schematics",
  "sourceRoot": "src"
}
</file>

<file path="apps/api/tsconfig.build.json">
{
  "extends": "./tsconfig.json",
  "exclude": [
    "node_modules",
    "../../node_modules",
    "test",
    "dist",
    "**/*spec.ts"
  ]
}
</file>

<file path="apps/web/pages/forgot-password.tsx">
// apps/web/pages/forgot-password.tsx
import { ForgotPasswordScreen } from '../src/screens/auth/forgot-password/forgot-password';

export default function ForgotPasswordPage() {
  return <ForgotPasswordScreen />;
}
</file>

<file path="apps/web/pages/index.tsx">
import { Button } from "ui";
import { useHelloQuery } from "../src/store/services/api";

export default function Web() {
  const { data } = useHelloQuery();

  return (
    <div>
      <h1>{data?.message}</h1>
      <Button />
    </div>
  );
}
</file>

<file path="apps/web/pages/login.tsx">
// apps/web/pages/login.tsx
import { LoginScreen } from '../src/screens/auth/login/login';

export default function LoginPage() {
  return <LoginScreen />;
}
</file>

<file path="apps/web/pages/reset-password.tsx">
// apps/web/pages/reset-password.tsx
import { ResetPasswordScreen } from '../src/screens/auth/reset-password/reset-password';

export default function ResetPasswordPage() {
  return <ResetPasswordScreen />;
}
</file>

<file path="apps/web/pages/signup.tsx">
// apps/web/pages/signup.tsx
    import { SignupScreen } from '../src/screens/auth/signup/signup'; // Sørg for at stien er korrekt

    export default function SignupPage() {
      return <SignupScreen />;
    }
</file>

<file path="apps/web/src/components/auth/ProtectedRoute.tsx">
// apps/web/src/components/auth/ProtectedRoute.tsx
import React, { ReactNode } from 'react';
import { useRouter } from 'next/router';
import { useAuth } from '../../context/AuthContext';

interface ProtectedRouteProps {
  children: ReactNode; // Den komponent/side, der skal beskyttes
}

export default function ProtectedRoute({ children }: ProtectedRouteProps) {
  const { user, isLoading: authIsLoading } = useAuth();
  const router = useRouter();

  // Mens AuthContext initialiserer og tjekker for bruger/token, vis en loading-tilstand.
  if (authIsLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-100 font-inter">
        <div className="p-8 text-center">
          <svg className="animate-spin h-10 w-10 text-indigo-600 mx-auto mb-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          <p className="text-lg text-gray-700">Verificerer adgang...</p>
        </div>
      </div>
    );
  }

  // Når AuthContext er færdig med at loade:
  // Hvis der ikke er en bruger, omdiriger til login-siden.
  // Vi bruger useEffect i selve komponenten for at undgå fejl under server-side rendering (SSR)
  // eller static generation, hvor routeren måske ikke er fuldt initialiseret.
  React.useEffect(() => {
    if (!authIsLoading && !user) {
      console.log('ProtectedRoute: Ingen bruger, omdirigerer til /login');
      router.replace('/login');
    }
  }, [authIsLoading, user, router]);

  // Hvis der er en bruger (og vi ikke længere loader), render den beskyttede komponent (children).
  if (user) {
    return <>{children}</>;
  }

  // Hvis brugeren ikke er logget ind og omdirigering endnu ikke er sket (eller som fallback),
  // kan vi returnere null eller en anden loading-indikator for at undgå at flashe den ubeskyttede side.
  // Ofte vil useEffect-hooken ovenfor håndtere omdirigeringen hurtigt.
  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100 font-inter">
        <div className="p-8 text-center">
          <svg className="animate-spin h-10 w-10 text-indigo-600 mx-auto mb-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          <p className="text-lg text-gray-700">Omdirigerer...</p>
        </div>
      </div>
  ); // Eller return null;
}
</file>

<file path="apps/web/src/context/AuthContext.tsx">
// apps/web/src/context/AuthContext.tsx
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { useRouter } from 'next/router';

// Definer en type for brugerobjektet, som vi forventer fra backend
// Denne type matcher den, vi brugte i ProfilePage og den, som vores /api/auth/profile returnerer
interface User {
  id: number;
  email: string;
  name?: string;
  role: string;
  // Tilføj andre felter, som dit backend /api/auth/profile endpoint returnerer
}

// Definer typen for værdierne i vores AuthContext
interface AuthContextType {
  user: User | null; // Den aktuelle bruger eller null, hvis ikke logget ind
  token: string | null; // JWT token
  isLoading: boolean; // Til at vise loading state under auth operationer
  login: (email: string, password: string) => Promise<void>; // Funktion til at logge ind
  logout: () => void; // Funktion til at logge ud
  // Vi kan tilføje signup, forgotPassword, resetPassword funktioner her senere
}

// Opret AuthContext med en default værdi (typisk undefined eller null)
// Vi bruger 'undefined' for at kunne tjekke, om provideren er brugt korrekt.
const AuthContext = createContext<AuthContextType | undefined>(undefined);

// Definer props for AuthProvider
interface AuthProviderProps {
  children: ReactNode; // Gør det muligt at wrappe andre komponenter
}

export function AuthProvider({ children }: AuthProviderProps) {
  const [user, setUser] = useState<User | null>(null);
  const [token, setToken] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(true); // Start med loading true for at tjekke initial auth state
  const router = useRouter();

  // Funktion til at hente brugerprofil baseret på et token
  const fetchUserProfile = async (currentToken: string) => {
    setIsLoading(true);
    try {
      const response = await fetch('/api/auth/profile', {
        headers: {
          'Authorization': `Bearer ${currentToken}`,
          'Content-Type': 'application/json',
        },
      });
      if (!response.ok) {
        // Hvis token er ugyldigt/udløbet, log ud
        if (response.status === 401) {
          console.error('AuthContext: Ugyldigt token ved hentning af profil. Logger ud.');
          localStorage.removeItem('accessToken');
          setToken(null);
          setUser(null);
        }
        throw new Error('Kunne ikke hente brugerprofil');
      }
      const userData: User = await response.json();
      setUser(userData);
      setToken(currentToken); // Sørg for at token state også er sat
      console.log('AuthContext: Brugerprofil hentet og sat:', userData);
    } catch (error) {
      console.error('AuthContext: Fejl ved hentning af brugerprofil:', error);
      localStorage.removeItem('accessToken'); // Ryd token ved fejl
      setToken(null);
      setUser(null);
    } finally {
      setIsLoading(false);
    }
  };
  
  // useEffect til at tjekke for token i localStorage ved app-start (kun én gang)
  useEffect(() => {
    console.log('AuthContext: Initialiserer auth state...');
    const storedToken = localStorage.getItem('accessToken');
    if (storedToken) {
      console.log('AuthContext: Token fundet i localStorage, forsøger at hente profil.');
      fetchUserProfile(storedToken);
    } else {
      console.log('AuthContext: Intet token fundet i localStorage.');
      setIsLoading(false); // Ingen token, så vi er ikke i gang med at loade bruger
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []); // Tomt dependency array sikrer, at dette kun kører ved mount

  const login = async (email: string, password: string) => {
    setIsLoading(true);
    try {
      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Login fejlede');
      }

      const data: { access_token: string } = await response.json();
      localStorage.setItem('accessToken', data.access_token);
      console.log('AuthContext: Token gemt efter login.');
      await fetchUserProfile(data.access_token); // Hent og sæt brugerprofil efter login
      router.push('/profile'); // Omdiriger til profil efter succesfuldt login
    } catch (error: any) {
      console.error('AuthContext: Login fejl:', error);
      localStorage.removeItem('accessToken');
      setToken(null);
      setUser(null);
      setIsLoading(false);
      throw error; // Kast fejlen videre, så LoginScreen kan fange den og vise den
    }
    // setIsLoading(false) håndteres i fetchUserProfile's finally block
  };

  const logout = () => {
    console.log('AuthContext: Logger ud...');
    localStorage.removeItem('accessToken');
    setToken(null);
    setUser(null);
    router.push('/login'); // Omdiriger til login-siden efter logout
  };

  // Værdien, der gøres tilgængelig for alle consumers af context'en
  const value = {
    user,
    token,
    isLoading,
    login,
    logout,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
}

// Custom hook for nem adgang til AuthContext
export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth skal bruges inden i en AuthProvider');
  }
  return context;
}
</file>

<file path="apps/web/src/screens/auth/forgot-password/forgot-password.tsx">
// apps/web/src/screens/auth/forgot-password/forgot-password.tsx
import React, { useState, FormEvent } from 'react';
import { useRouter } from 'next/router'; // Selvom vi ikke omdirigerer direkte her, kan den være nyttig

export function ForgotPasswordScreen() {
  const router = useRouter();
  const [email, setEmail] = useState<string>('');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);

  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    setIsLoading(true);
    setError(null);
    setSuccessMessage(null);

    try {
      const response = await fetch('/api/auth/forgot-password', { // Kalder dit backend endpoint
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email }),
      });

      // Backend returnerer altid 200 OK for forgot-password for ikke at afsløre om en email eksisterer.
      // Vi stoler på beskeden fra backend.
      const data = await response.json(); 

      if (!response.ok) {
        // Dette burde ikke ske ofte med forgot-password, medmindre der er en serverfejl
        // eller en uventet valideringsfejl, der ikke returnerer 200.
        let errorMessage = 'Anmodning om nulstilling af adgangskode fejlede.';
        if (data && data.message) {
          if (Array.isArray(data.message)) {
            errorMessage = data.message.join(', ');
          } else {
            errorMessage = data.message;
          }
        }
        throw new Error(errorMessage);
      }
      
      console.log('Anmodning om glemt adgangskode succesfuld:', data);
      // Backend sender en generisk succesbesked, som vi viser.
      setSuccessMessage(data.message || 'Hvis din email findes i systemet, vil du modtage et link til at nulstille dit password.');
      setEmail(''); // Ryd email feltet efter succes

    } catch (err: any) {
      console.error('Fejl ved glemt adgangskode:', err);
      setError(err.message || 'Der opstod en uventet fejl.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100 font-inter">
      <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-xl shadow-xl">
        <h2 className="text-3xl font-bold text-center text-gray-900">
          Glemt Adgangskode?
        </h2>
        <p className="text-center text-sm text-gray-600">
          Indtast din emailadresse, så sender vi dig et link til at nulstille din adgangskode.
        </p>
        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Email felt */}
          <div>
            <label
              htmlFor="email"
              className="block text-sm font-medium text-gray-700"
            >
              Emailadresse
            </label>
            <input
              id="email"
              name="email"
              type="email"
              autoComplete="email"
              required
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              disabled={isLoading || !!successMessage}
              className="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm disabled:bg-gray-50"
              placeholder="din@email.com"
            />
          </div>
          
          {/* Fejlmeddelelse */}
          {error && (
            <div className="p-3 text-sm text-red-700 bg-red-100 border border-red-400 rounded-md">
              {error}
            </div>
          )}

          {/* Succesmeddelelse */}
          {successMessage && (
            <div className="p-3 text-sm text-green-700 bg-green-100 border border-green-400 rounded-md">
              {successMessage}
            </div>
          )}

          {/* Submit knap */}
          <div>
            <button
              type="submit"
              disabled={isLoading || !!successMessage}
              className="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-indigo-400 disabled:cursor-not-allowed transition-colors duration-150"
            >
              {isLoading ? (
                <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              ) : (
                'Send Nulstillingslink'
              )}
            </button>
          </div>
        </form>
        <p className="text-sm text-center text-gray-600">
          Tilbage til{' '}
          <a href="/login" className="font-medium text-indigo-600 hover:text-indigo-500">
            Login
          </a>
        </p>
      </div>
    </div>
  );
}
</file>

<file path="apps/web/src/screens/auth/reset-password/reset-password.tsx">
// apps/web/src/screens/auth/reset-password/reset-password.tsx
import React, { useState, FormEvent, useEffect } from 'react';
import { useRouter } from 'next/router';

export function ResetPasswordScreen() {
  const router = useRouter();
  const { token: queryToken } = router.query; // Hent token fra URL query parameter

  const [token, setToken] = useState<string>('');
  const [newPassword, setNewPassword] = useState<string>('');
  const [confirmPassword, setConfirmPassword] = useState<string>('');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);

  // Sæt token fra URL, når komponenten mounter, hvis det findes
  useEffect(() => {
    if (queryToken && typeof queryToken === 'string') {
      setToken(queryToken);
    }
  }, [queryToken]);

  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    setIsLoading(true);
    setError(null);
    setSuccessMessage(null);

    if (newPassword !== confirmPassword) {
      setError('De nye adgangskoder matcher ikke.');
      setIsLoading(false);
      return;
    }

    if (!token) {
        setError('Password reset token mangler. Prøv at anmode om et nyt nulstillingslink.');
        setIsLoading(false);
        return;
    }

    try {
      const response = await fetch('/api/auth/reset-password', { // Kalder dit backend endpoint
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ token, newPassword, confirmPassword }), // confirmPassword sendes med, da backend DTO forventer det
      });

      const data = await response.json();

      if (!response.ok) {
        let errorMessage = 'Nulstilling af adgangskode fejlede.';
        if (data && data.message) {
          if (Array.isArray(data.message)) {
            errorMessage = data.message.join(', ');
          } else {
            errorMessage = data.message;
          }
        }
        throw new Error(errorMessage);
      }
      
      console.log('Nulstilling af adgangskode succesfuld:', data);
      setSuccessMessage(data.message || 'Din adgangskode er blevet nulstillet! Du bliver nu sendt til login-siden.');
      
      // Omdiriger til login-siden efter en kort pause
      setTimeout(() => {
        router.push('/login');
      }, 3000); // 3 sekunders forsinkelse

    } catch (err: any) {
      console.error('Fejl ved nulstilling af adgangskode:', err);
      setError(err.message || 'Der opstod en uventet fejl.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100 font-inter">
      <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-xl shadow-xl">
        <h2 className="text-3xl font-bold text-center text-gray-900">
          Nulstil Adgangskode
        </h2>
        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Token felt (kan være skjult eller forudfyldt fra URL) */}
          <div>
            <label
              htmlFor="token"
              className="block text-sm font-medium text-gray-700"
            >
              Nulstillings-token
            </label>
            <input
              id="token"
              name="token"
              type="text"
              required
              value={token}
              onChange={(e) => setToken(e.target.value)}
              disabled={isLoading || !!successMessage || !!queryToken} // Deaktiver hvis token kommer fra URL
              className="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm disabled:bg-gray-100"
              placeholder="Indsæt dit token her"
            />
             {queryToken && <p className="mt-1 text-xs text-gray-500">Token hentet fra URL.</p>}
          </div>

          {/* Nyt Password felt */}
          <div>
            <label
              htmlFor="newPassword"
              className="block text-sm font-medium text-gray-700"
            >
              Ny Adgangskode
            </label>
            <input
              id="newPassword"
              name="newPassword"
              type="password"
              autoComplete="new-password"
              required
              value={newPassword}
              onChange={(e) => setNewPassword(e.target.value)}
              disabled={isLoading || !!successMessage}
              className="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm disabled:bg-gray-50"
              placeholder="Din nye adgangskode"
            />
          </div>

          {/* Bekræft Nyt Password felt */}
          <div>
            <label
              htmlFor="confirmPassword"
              className="block text-sm font-medium text-gray-700"
            >
              Bekræft Ny Adgangskode
            </label>
            <input
              id="confirmPassword"
              name="confirmPassword"
              type="password"
              autoComplete="new-password"
              required
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              disabled={isLoading || !!successMessage}
              className="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm disabled:bg-gray-50"
              placeholder="Gentag ny adgangskode"
            />
          </div>
          
          {/* Fejlmeddelelse */}
          {error && (
            <div className="p-3 text-sm text-red-700 bg-red-100 border border-red-400 rounded-md">
              {error}
            </div>
          )}

          {/* Succesmeddelelse */}
          {successMessage && (
            <div className="p-3 text-sm text-green-700 bg-green-100 border border-green-400 rounded-md">
              {successMessage}
            </div>
          )}

          {/* Submit knap */}
          <div>
            <button
              type="submit"
              disabled={isLoading || !!successMessage}
              className="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-indigo-400 disabled:cursor-not-allowed transition-colors duration-150"
            >
              {isLoading ? (
                <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              ) : (
                'Nulstil Adgangskode'
              )}
            </button>
          </div>
        </form>
        <p className="text-sm text-center text-gray-600">
          Husker du din adgangskode?{' '}
          <a href="/login" className="font-medium text-indigo-600 hover:text-indigo-500">
            Log ind
          </a>
        </p>
      </div>
    </div>
  );
}
</file>

<file path="apps/web/src/screens/auth/signup/signup.tsx">
// apps/web/src/screens/auth/signup/signup.tsx
import React, { useState, FormEvent } from 'react';
import { useRouter } from 'next/router';
// Vi kan overveje at bruge useAuth() her, hvis vi vil logge brugeren ind automatisk efter signup,
// men lad os starte simpelt og bare omdirigere til login.
// import { useAuth } from '../../../context/AuthContext';

export function SignupScreen() {
  const router = useRouter();
  // const { login } = useAuth(); // Hvis du vil logge ind automatisk

  const [name, setName] = useState<string>('');
  const [email, setEmail] = useState<string>('');
  const [password, setPassword] = useState<string>('');
  const [confirmPassword, setConfirmPassword] = useState<string>('');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);

  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    setIsLoading(true);
    setError(null);
    setSuccessMessage(null);

    if (password !== confirmPassword) {
      setError('Adgangskoderne matcher ikke.');
      setIsLoading(false);
      return;
    }

    try {
      const response = await fetch('/api/users/signup', { // Kalder dit backend signup endpoint
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ name: name || undefined, email, password }), // Send name kun hvis det er udfyldt
      });

      if (!response.ok) {
        const errorData = await response.json();
        let errorMessage = 'Registrering fejlede.';
        if (errorData && errorData.message) {
          if (Array.isArray(errorData.message)) {
            errorMessage = errorData.message.join(', ');
          } else {
            errorMessage = errorData.message;
          }
        }
        throw new Error(errorMessage);
      }

      // const userData = await response.json(); // Brugerdata fra backend efter oprettelse
      console.log('Registrering succesfuld');
      setSuccessMessage('Din konto er blevet oprettet! Du bliver nu sendt til login-siden.');
      
      // Omdiriger til login-siden efter en kort pause, så brugeren kan se succesbeskeden.
      setTimeout(() => {
        router.push('/login');
      }, 3000); // 3 sekunders forsinkelse

      // Alternativt: Log brugeren direkte ind
      // try {
      //   await login(email, password); // Antager at din AuthContext's login er tilgængelig
      //   // router.push('/profile'); // AuthContext's login håndterer omdirigering
      // } catch (loginError: any) {
      //   setError(`Konto oprettet, men automatisk login fejlede: ${loginError.message}. Prøv at logge ind manuelt.`);
      // }

    } catch (err: any) {
      console.error('Registreringsfejl:', err);
      setError(err.message || 'Der opstod en uventet fejl under registrering.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100 font-inter">
      <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-xl shadow-xl">
        <h2 className="text-3xl font-bold text-center text-gray-900">
          Opret en ny konto
        </h2>
        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Navn felt (valgfrit) */}
          <div>
            <label
              htmlFor="name"
              className="block text-sm font-medium text-gray-700"
            >
              Navn (valgfrit)
            </label>
            <input
              id="name"
              name="name"
              type="text"
              autoComplete="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              disabled={isLoading}
              className="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm disabled:bg-gray-50"
              placeholder="Dit fulde navn"
            />
          </div>

          {/* Email felt */}
          <div>
            <label
              htmlFor="email"
              className="block text-sm font-medium text-gray-700"
            >
              Emailadresse
            </label>
            <input
              id="email"
              name="email"
              type="email"
              autoComplete="email"
              required
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              disabled={isLoading}
              className="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm disabled:bg-gray-50"
              placeholder="din@email.com"
            />
          </div>

          {/* Password felt */}
          <div>
            <label
              htmlFor="password"
              className="block text-sm font-medium text-gray-700"
            >
              Adgangskode
            </label>
            <input
              id="password"
              name="password"
              type="password"
              autoComplete="new-password"
              required
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              disabled={isLoading}
              className="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm disabled:bg-gray-50"
              placeholder="Vælg en stærk adgangskode"
            />
          </div>

          {/* Bekræft Password felt */}
          <div>
            <label
              htmlFor="confirmPassword"
              className="block text-sm font-medium text-gray-700"
            >
              Bekræft adgangskode
            </label>
            <input
              id="confirmPassword"
              name="confirmPassword"
              type="password"
              autoComplete="new-password"
              required
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              disabled={isLoading}
              className="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm disabled:bg-gray-50"
              placeholder="Gentag din adgangskode"
            />
          </div>
          
          {/* Fejlmeddelelse */}
          {error && (
            <div className="p-3 text-sm text-red-700 bg-red-100 border border-red-400 rounded-md">
              {error}
            </div>
          )}

          {/* Succesmeddelelse */}
          {successMessage && (
            <div className="p-3 text-sm text-green-700 bg-green-100 border border-green-400 rounded-md">
              {successMessage}
            </div>
          )}

          {/* Submit knap */}
          <div>
            <button
              type="submit"
              disabled={isLoading || !!successMessage} // Deaktiver også hvis succesbesked vises
              className="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-indigo-400 disabled:cursor-not-allowed transition-colors duration-150"
            >
              {isLoading ? (
                <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  {/* ... spinner SVG ... */}
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              ) : (
                'Opret konto'
              )}
            </button>
          </div>
        </form>
        <p className="text-sm text-center text-gray-600">
          Har du allerede en konto?{' '}
          <a href="/login" className="font-medium text-indigo-600 hover:text-indigo-500">
            Log ind her
          </a>
        </p>
      </div>
    </div>
  );
}
</file>

<file path="apps/web/src/store/index.ts">
import { configureStore } from "@reduxjs/toolkit";
import { TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";

import { api } from "./services/api";

export function makeStore() {
  return configureStore({
    reducer: {
      [api.reducerPath]: api.reducer,
    },

    middleware: (getDefaultMiddleware) =>
      getDefaultMiddleware().concat(api.middleware),
  });
}

const store = makeStore();

export type RootState = ReturnType<typeof store.getState>;

export type AppDispatch = typeof store.dispatch;

export const useAppDispatch = () => useDispatch<AppDispatch>();

export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;

export default store;
</file>

<file path="apps/web/src/styles/global.css">
@tailwind base;
@tailwind components;
@tailwind utilities;
</file>

<file path="apps/web/.eslintrc.js">
module.exports = require("config/eslint-preset");
</file>

<file path="apps/web/jest.config.js">
const nextJest = require("next/jest");

const createJestConfig = nextJest({
  // Provide the path to your Next.js app to load next.config.js and .env files in your test environment
  dir: "./",
});

// Add any custom config to be passed to Jest
const customJestConfig = {
  // Add more setup options before each test is run
  // setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
  // if using TypeScript with a baseUrl set to the root directory then you need the below for alias' to work
  moduleDirectories: ["node_modules", "<rootDir>/"],
  testEnvironment: "jest-environment-jsdom",
};

// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async
module.exports = createJestConfig(customJestConfig);
</file>

<file path="apps/web/jest.setup.js">
// Optional: configure or set up a testing framework before each test.
// If you delete this file, remove `setupFilesAfterEnv` from `jest.config.js`

// Used for __tests__/testing-library.js
// Learn more: https://github.com/testing-library/jest-dom
import "@testing-library/jest-dom/extend-expect";
</file>

<file path="apps/web/next-env.d.ts">
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.
</file>

<file path="apps/web/next.config.js">
const withTM = require("next-transpile-modules")(["ui"]);

module.exports = withTM({
  reactStrictMode: true,
});
</file>

<file path="apps/web/README.md">
## Getting Started

First, run the development server:

```bash
yarn dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `pages/index.js`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.js`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_source=github.com&utm_medium=referral&utm_campaign=turborepo-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.
</file>

<file path="apps/web/tsconfig.json">
{
  "extends": "tsconfig/nextjs.json",
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", "jest.setup.js"],
  "exclude": ["node_modules"]
}
</file>

<file path="packages/config/src/env.ts">
// packages/config/src/env.ts
import { z } from 'zod';

/**
 * Definerer skemaet for server-side miljøvariabler.
 * Brug .server() for at sikre, at disse ikke utilsigtet inkluderes i client-side bundles.
 */
const serverSchema = z.object({
  DATABASE_URL: z.string().url({ message: "DATABASE_URL skal være en gyldig URL." }),
  JWT_SECRET: z.string().min(32, { message: "JWT_SECRET skal være mindst 32 tegn lang." }),
  JWT_EXPIRES_IN: z.string().default('1h'), // Default værdi hvis ikke sat
  // NODE_ENV: z.enum(['development', 'production', 'test']).default('development'), // Eksempel
});

/**
 * Definerer skemaet for client-side (public) miljøvariabler.
 * Disse skal prefixxes med NEXT_PUBLIC_ for Next.js applikationer.
 */
const clientSchema = z.object({
  NEXT_PUBLIC_APP_NAME: z.string().default('Læringsplatform'),
  NEXT_PUBLIC_WS_URL: z.string().url({ message: "NEXT_PUBLIC_WS_URL skal være en gyldig URL." }).default('http://localhost:3001'),
  // Tilføj andre NEXT_PUBLIC_ variabler her efter behov
});

/**
 * Miljøvariabler, der er tilgængelige for både server og client.
 * Dette er typisk ikke anbefalet for følsomme variabler.
 * For Next.js, er det bedre at adskille dem klart.
 * Hvis en variabel skal bruges på både server og client (og ikke er følsom),
 * kan den defineres her eller i clientSchema (hvis public) og serverSchema (hvis server).
 */
// const sharedSchema = z.object({
//   // F.eks. en feature flag der kan læses af begge
// });


/**
 * Validerer og parser server-side miljøvariabler.
 * Kaster en fejl ved build/runtime hvis validering fejler.
 */
const parsedServerEnv = serverSchema.safeParse({
  DATABASE_URL: process.env.DATABASE_URL,
  JWT_SECRET: process.env.JWT_SECRET,
  JWT_EXPIRES_IN: process.env.JWT_EXPIRES_IN,
  // NODE_ENV: process.env.NODE_ENV,
});

if (!parsedServerEnv.success) {
  console.error(
    '❌ Ugyldige server-side miljøvariabler:',
    parsedServerEnv.error.flatten().fieldErrors,
  );
  // I et produktionsmiljø bør applikationen ikke starte med ugyldige env vars.
  // I udvikling kan man overveje at kaste fejlen for at stoppe processen.
  throw new Error('Ugyldige server-side miljøvariabler. Tjek .env filen og konsollen.');
}
export const serverEnv = parsedServerEnv.data;


/**
 * Validerer og parser client-side miljøvariabler.
 * For Next.js hentes disse typisk direkte via process.env.NEXT_PUBLIC_XXX i client-koden,
 * men at have et skema her hjælper med central definition og type-sikkerhed.
 * For at gøre disse typer globalt tilgængelige i Next.js client-side kode uden import,
 * kan man udvide NodeJS.ProcessEnv interfacet (se Next.js dokumentation).
 */
const parsedClientEnv = clientSchema.safeParse({
  NEXT_PUBLIC_APP_NAME: process.env.NEXT_PUBLIC_APP_NAME,
  NEXT_PUBLIC_WS_URL: process.env.NEXT_PUBLIC_WS_URL,
});

if (!parsedClientEnv.success) {
  console.error(
    '❌ Ugyldige client-side miljøvariabler:',
    parsedClientEnv.error.flatten().fieldErrors,
  );
  // Overvej at kaste en fejl her også, især under build-processen.
  throw new Error('Ugyldige client-side miljøvariabler. Tjek .env filen og konsollen.');
}
export const clientEnv = parsedClientEnv.data;

/**
 * Samlet objekt for alle miljøvariabler (kan være nyttigt i nogle sammenhænge,
 * men adskillelsen af serverEnv og clientEnv er ofte mere sikker og klar).
 */
export const env = {
  ...serverEnv,
  ...clientEnv,
  // ...parsedSharedEnv.data, // Hvis sharedSchema bruges
};

console.log('✅ Miljøvariabler valideret og indlæst.');
</file>

<file path="packages/config/src/index.ts">
// packages/config/src/index.ts

/**
 * Hoved-eksportfil for @repo/config TypeScript-delen.
 * Herfra eksporteres validerede miljøvariabler og potentielt andre konfigurationsfunktioner.
 */

export * from './env';
</file>

<file path="packages/config/eslint-preset.js">
module.exports = {
  extends: ["next", "prettier"],
  settings: {
    next: {
      rootDir: ["apps/*/", "packages/*/"],
    },
  },
  rules: {
    "@next/next/no-html-link-for-pages": "off",
    "react/jsx-key": "off",
  },
};
</file>

<file path="packages/config/postcss.config.js">
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};
</file>

<file path="packages/config/tailwind.config.js">
module.exports = {
  content: [
    "../../packages/ui/**/*.{js,ts,jsx,tsx}",
    "./pages/**/*.{js,ts,jsx,tsx}",
    "./components/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
};
</file>

<file path="packages/config/tsconfig.json">
{
  "extends": "tsconfig/base.json", // Eller tsconfig/react-library.json hvis relevant for fremtidig brug
  "compilerOptions": {
    "outDir": "dist",
    "rootDir": "src", // Specificerer roden af input-filerne
    "baseUrl": "./src",
    "paths": {
      "@/*": ["*"]
    }
  },
  "include": ["src"],
  "exclude": ["node_modules", "dist", "*.js", "*.conf"] // Ekskluder eksisterende .js og .conf filer fra TS-kompilering
}
</file>

<file path="packages/core/src/types/user.types.ts">
// packages/core/src/types/user.types.ts

/**
 * Definerer de mulige roller en bruger kan have i systemet.
 * Disse matcher værdierne defineret i Prisma schemaet.
 */
export enum Role {
  USER = 'USER',
  ADMIN = 'ADMIN',
}

/**
 * Interface for en bruger.
 * Dette er en ren data-kontrakt og indeholder ikke backend-specifikke felter som passwordHash.
 * Den er beregnet til at blive brugt på tværs af frontend og backend for type-sikkerhed.
 */
export interface User {
  id: number;
  email: string;
  name?: string | null; // Navn er valgfrit og kan være null
  role: Role;
  createdAt: Date; // Tidspunkt for oprettelse af brugeren
  updatedAt: Date; // Tidspunkt for seneste opdatering af brugeren
  // passwordResetToken, passwordResetExpires og passwordHash er udeladt,
  // da de er backend-specifikke og ikke bør være en del af den delte kerne-type.
}
</file>

<file path="packages/core/src/index.ts">
// packages/core/src/index.ts

/**
 * Dette er hoved-eksportfilen for @repo/core pakken.
 * Alle delte typer, interfaces, enums, og potentielt funktioner eller konstanter
 * bør eksporteres herfra, så de nemt kan importeres i andre pakker (apps/web, apps/api, etc.).
 */

export * from './types/user.types';
// Tilføj andre eksports her efterhånden som pakken vokser, f.eks.:
// export * from './types/course.types';
// export * from './utils/formatter.utils';
</file>

<file path="packages/core/tsconfig.json">
{
  "extends": "../tsconfig/base.json",
  "compilerOptions": {
    "outDir": "dist",
    "baseUrl": "./src", // Gør det nemmere at have absolutte imports inden for pakken hvis nødvendigt
    "paths": { // Eksempel på paths, kan justeres/fjernes efter behov
      "@/*": ["*"]
    }
  },
  "include": ["src"],
  "exclude": ["node_modules", "dist"]
}
</file>

<file path="packages/tsconfig/base.json">
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Default",
  "compilerOptions": {
    "composite": false,
    "declaration": true,
    "declarationMap": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "inlineSources": false,
    "isolatedModules": true,
    "moduleResolution": "node",
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "preserveWatchOutput": true,
    "skipLibCheck": true,
    "strict": true
  },
  "exclude": ["node_modules"]
}
</file>

<file path="packages/tsconfig/nestjs.json">
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "extends": "./base.json",
  "compilerOptions": {
    "module": "commonjs",
    "declaration": true,
    "removeComments": true,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "allowSyntheticDefaultImports": true,
    "target": "es2017",
    "sourceMap": true,
    "incremental": true,
    "skipLibCheck": true,
    "strictNullChecks": false,
    "noImplicitAny": false,
    "strictBindCallApply": false,
    "forceConsistentCasingInFileNames": false,
    "noFallthroughCasesInSwitch": false
  }
}
</file>

<file path="packages/tsconfig/nextjs.json">
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Next.js",
  "extends": "./base.json",
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": false,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "incremental": true,
    "esModuleInterop": true,
    "module": "esnext",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve"
  },
  "include": ["src", "next-env.d.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="packages/tsconfig/react-library.json">
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "React Library",
  "extends": "./base.json",
  "compilerOptions": {
    "lib": ["ES2015"],
    "module": "ESNext",
    "target": "ES6",
    "jsx": "react-jsx"
  }
}
</file>

<file path="packages/tsconfig/README.md">
# `tsconfig`

These are base shared `tsconfig.json`s from which all other `tsconfig.json`'s inherit from.
</file>

<file path="packages/ui/components/Button/Button.tsx">
export const Button = () => {
  return <button className="text-lg bg-red-500">boo</button>;
};
</file>

<file path="packages/ui/index.tsx">
export * from "./components/Button/Button";
</file>

<file path="packages/ui/tsconfig.json">
{
  "extends": "tsconfig/react-library.json",
  "include": ["."],
  "exclude": ["dist", "build", "node_modules"]
}
</file>

<file path=".node-version">
22
</file>

<file path="LICENSE">
MIT License

Copyright (c) 2022 Ejaz Ahmed

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</file>

<file path="turbo.json">
{
  "pipeline": {
    "build": {
      "dependsOn": ["^build"],
      "outputs": ["dist/**", ".next/**"]
    },
    "lint": {
      "outputs": []
    },
    "dev": {
      "cache": false
    },
    "test:ci": {
      "cache": false
    }
  }
}
</file>

<file path=".github/workflows/ci.yml">
# .github/workflows/ci.yml
# Komplet CI/CD pipeline til at bygge, teste og deploye både API og Web.

name: CI/CD Pipeline

on:
  push:
    branches:
      - main # Kør kun deploy-jobs på push til main-branchen
  pull_request:
    branches:
      - main # Kør build-and-test jobbet på pull requests til main-branchen

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Nødvendig for Turborepo remote caching, hvis du bruger det

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22 # Matcher projektets Node version (fra .node-version og package.json engines)
          cache: 'yarn' # Aktiver caching for Yarn

      - name: Enable Corepack
        # Sikrer at den korrekte Yarn version (defineret i package.json -> packageManager) bruges
        run: corepack enable

      - name: Install dependencies
        # Installerer alle afhængigheder for monorepoet baseret på yarn.lock
        # --immutable sikrer, at yarn.lock ikke ændres og er hurtigere for CI
        run: yarn install --immutable

      - name: Run tests and build
        # Dette kommando vil bruge Turborepo til at køre 'test:ci' og 'build' scripts
        # for alle workspaces (apps/api, apps/web, packages/*)
        # som defineret i deres respektive package.json filer og turbo.json.
        # Sørg for, at dine 'test:ci' og 'build' scripts er korrekt defineret i hver package.json.
        run: yarn turbo run test:ci build # <<< ÆNDRET HER

  deploy-render-api:
    name: Deploy API to Render
    needs: build-and-test # Kør kun hvis build-and-test er succesfuld
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Kør kun på direkte push til main
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Render Deploy
        # Sender en POST request til din Render Deploy Hook URL for at starte et nyt deploy af API-servicen.
        # Sørg for at RENDER_DEPLOY_HOOK_URL er sat som en secret i dit GitHub repository.
        run: curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_URL }}

  deploy-vercel-web:
    name: Deploy Web to Vercel
    needs: build-and-test # Kør kun hvis build-and-test er succesfuld
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Kør kun på direkte push til main
    runs-on: ubuntu-latest
    env:
      # Disse secrets skal være sat i dit GitHub repository.
      # VERCEL_TOKEN: Et Vercel access token.
      # VERCEL_PROJECT_ID: ID'et for dit 'web' projekt på Vercel.
      # VERCEL_ORG_ID: ID'et for din organisation eller personlige konto på Vercel.
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
    steps:
      - name: Checkout code
        # Nødvendig for Vercel CLI for at have projektets kontekst.
        uses: actions/checkout@v4

      - name: Setup Node.js
        # Selvom koden er bygget i 'build-and-test' jobbet,
        # skal Vercel CLI bruge Node til at køre.
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'yarn'

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        # Vercel CLI kan have brug for adgang til projektets dependencies.
        # Dette sikrer, at alt er sat op korrekt i CI-miljøet for Vercel CLI.
        run: yarn install --immutable

      - name: Deploy to Vercel Production
        # Vercel CLI vil automatisk bruge VERCEL_TOKEN, VERCEL_PROJECT_ID, og VERCEL_ORG_ID fra environment variables.
        # Den bygger og deployer automatisk baseret på Vercel projektets 'Root Directory' indstilling (apps/web).
        # '--prod' flaget sikrer, at det er et produktionsdeploy.
        run: npx vercel --prod
</file>

<file path="apps/api/src/auth/guards/jwt-auth.guard.ts">
// apps/api/src/auth/guards/jwt-auth.guard.ts
import {
  Injectable,
  ExecutionContext,
  UnauthorizedException,
} from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';
import { Observable } from 'rxjs';

/**
 * A guard that invokes the jwt Passport strategy.
 * It automatically handles the logic of verifying the JWT, calling the JwtStrategy's validate() method,
 * and setting up req.user upon successful authentication.
 * If authentication fails (e.g., invalid token, expired token), it automatically sends a 401 Unauthorized response.
 */
@Injectable()
export class JwtAuthGuard extends AuthGuard('jwt') {
  // Du kan overskrive handleRequest for at tilpasse fejlhåndtering eller logik efter validering.
  // For de fleste standardtilfælde er det dog ikke nødvendigt.
  canActivate(
    context: ExecutionContext,
  ): boolean | Promise<boolean> | Observable<boolean> {
    // Add your custom authentication logic here
    // for example, call super.logIn(request) to establish a session.
    return super.canActivate(context);
  }

  handleRequest<TUser = any>(
    err: any,
    user: any,
    info: any,
    context: ExecutionContext,
    status?: any,
  ): TUser {
    // Du kan smide en exception her baseret på 'info' eller 'err' argumenterne
    if (err || !user) {
      // Log eventuelle fejl eller information for debugging
      // console.error('JWT Auth Guard Error:', err);
      // console.error('JWT Auth Guard Info:', info);
      throw (
        err ||
        new UnauthorizedException(
          'Du har ikke adgang eller dit token er ugyldigt.',
        )
      );
    }
    return user;
  }
}
</file>

<file path="apps/api/src/persistence/prisma/prisma.service.ts">
import { Injectable, OnModuleInit } from '@nestjs/common';
import { PrismaClient } from '@prisma/client';

@Injectable()
export class PrismaService extends PrismaClient implements OnModuleInit {
  async onModuleInit() {
    await this.$connect();
  }
}
</file>

<file path="apps/api/tsconfig.json">
{
  "extends": "tsconfig/nestjs.json",
  "compilerOptions": {
    "outDir": "./dist",
    "baseUrl": "./"
  },
  "references": [
    { "path": "../../packages/core" },
    { "path": "../../packages/config" }
  ]
}
</file>

<file path="apps/api/webpack-hmr.config.js">
/* eslint-disable @typescript-eslint/no-var-requires */
const nodeExternals = require('webpack-node-externals');
const { RunScriptWebpackPlugin } = require('run-script-webpack-plugin');

module.exports = function (options, webpack) {
  return {
    ...options,
    entry: ['webpack/hot/poll?100', options.entry],
    externals: [
      nodeExternals({
        allowlist: ['webpack/hot/poll?100'],
        modulesDir: '../../node_modules',
      }),
    ],
    plugins: [
      ...options.plugins,
      new webpack.HotModuleReplacementPlugin(),
      new webpack.WatchIgnorePlugin({
        paths: [/\.js$/, /\.d\.ts$/],
      }),
      new RunScriptWebpackPlugin({ name: options.output.filename }),
    ],
  };
};
</file>

<file path="apps/web/pages/_app.tsx">
// apps/web/pages/_app.tsx
import type { AppProps } from "next/app";
import { Provider as ReduxProvider } from "react-redux"; // Omdøb for klarhed, hvis du bruger Redux
import store from "../src/store"; // Din Redux store
import { AuthProvider } from '../src/context/AuthContext'; // <--- TILFØJ DENNE LINJE
import "../src/styles/global.css";

function MyApp({ Component, pageProps }: AppProps) {
  return (
    // Yderst er ReduxProvider, hvis du bruger Redux
    <ReduxProvider store={store}>
      {/* Indeni ReduxProvider (eller yderst hvis du ikke bruger Redux), wrapper vi med AuthProvider */}
      <AuthProvider> 
        <Component {...pageProps} />
      </AuthProvider>
    </ReduxProvider>
  );
}

export default MyApp;
</file>

<file path="apps/web/src/screens/auth/login/login.test.tsx">
// apps/web/src/screens/auth/login/login.test.tsx
import { render } from "@testing-library/react";
import { LoginScreen } from "./login";
import { AuthProvider } from '../../../context/AuthContext'; // Sørg for korrekt importsti

test("render login component", () => {
  render(
    <AuthProvider>
      <LoginScreen />
    </AuthProvider>
  );
});
</file>

<file path="apps/web/src/store/services/api.ts">
// Filsti: apps/web/src/store/services/api.ts
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

// Hent API URL fra miljøvariabler.
// NEXT_PUBLIC_ foran navnet gør den tilgængelig i browseren for Next.js.
const baseUrl = process.env.NEXT_PUBLIC_API_URL;

if (!baseUrl) {
  console.error("FEJL: NEXT_PUBLIC_API_URL er ikke sat. API-kald vil fejle.");
  // Du kan vælge at kaste en fejl her eller have en fallback,
  // men det er bedst at sikre, at den altid er sat.
}

export const api = createApi({
  reducerPath: "baseApi",
  baseQuery: fetchBaseQuery({
    // Brug den hentede baseUrl.
    // Hvis baseUrl er undefined (ikke sat), vil kald relativt til nuværende host:port (f.eks. localhost:3003/hello)
    // hvilket er forkert, da API'et kører på localhost:5002.
    baseUrl: baseUrl || "/api", // Fallback til /api hvis den ikke er sat, men det bør den være.
  }),
  tagTypes: [],
  endpoints: (builder) => ({
    // Endpoint for at hente "Hello World" fra API'ets rod (/)
    // API'en er på http://localhost:5002/api, så query-URL'en skal være relativ til det.
    // Hvis baseUrl er "http://localhost:5002/api", så vil query: "/" kalde "http://localhost:5002/api/"
    hello: builder.query<{ message: string }, void>({
      query: () => ({
        url: "/", // Dette vil blive tilføjet til baseUrl, f.eks. http://localhost:5002/api/
      }),
    }),
  }),
});

export const { useHelloQuery } = api;
</file>

<file path="apps/web/postcss.config.js">
module.exports = require("@repo/config/postcss.config.js");
</file>

<file path="apps/web/tailwind.config.js">
module.exports = require("@repo/config/tailwind.config.js");
</file>

<file path="apps/api/prisma/schema.prisma">
// apps/api/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  passwordHash String
  name         String?
  role         Role     @default(USER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Nye felter til password reset
  passwordResetToken   String?   @unique // Gør tokenet unikt for at kunne slå det op
  passwordResetExpires DateTime?
}

enum Role {
  USER
  ADMIN
}
</file>

<file path="apps/api/src/auth/strategies/jwt/jwt.ts">
// apps/api/src/auth/strategies/jwt/jwt.ts
import { ExtractJwt, Strategy } from 'passport-jwt';
import { PassportStrategy } from '@nestjs/passport';
import { Injectable, UnauthorizedException } from '@nestjs/common';
import { UsersService } from '../../../users/users.service';
import { User as PrismaUser, Role as PrismaRole } from '@prisma/client'; // Prisma User for interaktion med UsersService
import { User as CoreUser, Role as CoreRole } from '@repo/core'; // CoreUser for payload og returtype
import { serverEnv } from '@repo/config';

export interface JwtPayload {
  email: string;
  sub: number; // Brugerens ID
}

@Injectable()
export class JwtStrategy extends PassportStrategy(Strategy) {
  constructor(
    private readonly usersService: UsersService,
  ) {
    super({
      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
      ignoreExpiration: false,
      secretOrKey: serverEnv.JWT_SECRET,
    });
  }

  /**
   * Helper function to map a PrismaUser object to a CoreUser object (omitting passwordHash).
   * @param user The PrismaUser object.
   * @returns A CoreUser object without the passwordHash.
   */
  private mapToCoreUser(user: PrismaUser): Omit<CoreUser, 'passwordHash'> {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const { passwordHash, passwordResetToken, passwordResetExpires, ...result } = user;
    return {
      ...result,
      name: result.name ?? undefined, // Sørg for at name er string | undefined
      role: user.role as CoreRole,
      createdAt: new Date(user.createdAt),
      updatedAt: new Date(user.updatedAt),
    };
  }

  async validate(payload: JwtPayload): Promise<Omit<CoreUser, 'passwordHash'>> {
    const prismaUser = await this.usersService.findOneById(payload.sub);

    if (!prismaUser) {
      throw new UnauthorizedException(
        'Bruger ikke fundet eller token er ugyldigt.',
      );
    }
    // Map PrismaUser til CoreUser format
    return this.mapToCoreUser(prismaUser);
  }
}
</file>

<file path="apps/api/src/auth/strategies/local/local.ts">
// apps/api/src/auth/strategies/local/local.ts
import { Strategy } from 'passport-local';
import { PassportStrategy } from '@nestjs/passport';
import { Injectable, UnauthorizedException } from '@nestjs/common';
import { AuthService } from '../../auth.service';
// Importer CoreUser for at specificere returtypen korrekt
import { User as CoreUser } from '@repo/core';

@Injectable()
export class LocalStrategy extends PassportStrategy(Strategy) {
  constructor(private authService: AuthService) {
    super({ usernameField: 'email' }); // Fortæller Passport at 'email' feltet skal bruges som brugernavn
  }

  // Denne metode kaldes automatisk af Passport, når LocalAuthGuard bruges
  // Returtypen er nu Omit<CoreUser, 'passwordHash'> for at matche AuthService.validateUser
  async validate(
    email: string,
    pass: string,
  ): Promise<Omit<CoreUser, 'passwordHash'>> {
    // authService.validateUser returnerer Omit<CoreUser, 'passwordHash'> | null
    const user = await this.authService.validateUser(email, pass);

    if (!user) {
      // Hvis brugeren ikke findes eller password er forkert, kast en UnauthorizedException
      throw new UnauthorizedException('Ugyldig email eller password.');
    }

    // Brugerobjektet 'user' er allerede i det korrekte CoreUser format (uden passwordHash)
    return user;
  }
}
</file>

<file path="apps/api/src/auth/auth.controller.ts">
// apps/api/src/auth/auth.controller.ts
    import {
      Controller,
      Request, // Standard Request type fra @nestjs/common
      Post,
      UseGuards,
      Get,
      HttpCode,
      HttpStatus,
      Body,
      ValidationPipe,
    } from '@nestjs/common';
    import { AuthService } from './auth.service';
    import { LocalAuthGuard } from './guards/local-auth.guard';
    import { JwtAuthGuard } from './guards/jwt-auth.guard';
    import { User as CoreUser } from '@repo/core'; // Importer CoreUser fra @repo/core
    import { LoginDto } from './dto/login.dto';
    import { ForgotPasswordDto } from './dto/forgot-password.dto';
    import { ResetPasswordDto } from './dto/reset-password.dto';

    // Definer en type for request objektet, der indeholder brugeren efter autentificering
    interface AuthenticatedRequest extends globalThis.Request { // Eller Express.Request hvis du bruger @types/express
      user: Omit<CoreUser, 'passwordHash'>; // req.user er nu af typen Omit<CoreUser, 'passwordHash'>
    }

    @Controller('auth')
    export class AuthController {
      constructor(private authService: AuthService) {}

      @UseGuards(LocalAuthGuard)
      @Post('login')
      @HttpCode(HttpStatus.OK)
      async login(
        @Request() req: AuthenticatedRequest,
        // loginDto er her for Swagger og klarhed, validering sker i LocalStrategy/AuthService
        @Body() loginDto: LoginDto,
      ): Promise<{ access_token: string }> {
        // req.user er sat af LocalStrategy (via AuthService.validateUser), som nu returnerer CoreUser formatet
        return this.authService.login(req.user);
      }

      @UseGuards(JwtAuthGuard)
      @Get('profile')
      getProfile(
        @Request() req: AuthenticatedRequest,
      ): Omit<CoreUser, 'passwordHash'> {
        // req.user er sat af JwtStrategy, som nu returnerer Omit<PrismaUser, 'passwordHash'>,
        // men for konsistens med CoreUser, bør JwtStrategy også mappe til CoreUser hvis der er forskelle.
        // I dette tilfælde er de ens nok efter fjernelse af passwordHash.
        return req.user;
      }

      @Post('forgot-password')
      @HttpCode(HttpStatus.OK)
      async forgotPassword(
        @Body(new ValidationPipe()) forgotPasswordDto: ForgotPasswordDto,
      ): Promise<{ message: string }> {
        return this.authService.forgotPassword(forgotPasswordDto.email);
      }

      @Post('reset-password')
      @HttpCode(HttpStatus.OK)
      async resetPassword(
        @Body(new ValidationPipe()) resetPasswordDto: ResetPasswordDto,
      ): Promise<{ message:string }> {
        return this.authService.resetPassword(resetPasswordDto);
      }
    }
</file>

<file path="apps/api/src/auth/auth.module.ts">
// apps/api/src/auth/auth.module.ts
import { Module } from '@nestjs/common';
import { AuthService } from './auth.service';
import { AuthController } from './auth.controller';
import { UsersModule } from '../users/users.module';
import { PassportModule } from '@nestjs/passport';
import { JwtModule } from '@nestjs/jwt';
import { LocalStrategy } from './strategies/local/local';
import { JwtStrategy } from './strategies/jwt/jwt';
import { ConfigModule } from '@nestjs/config'; // ConfigModule kan stadig være her, hvis andre dele har brug for den
import { PersistenceModule } from '../persistence/persistence.module';
import { serverEnv } from '@repo/config'; // Importer serverEnv for JWT secret og expires_in

@Module({
  imports: [
    UsersModule,
    PassportModule.register({ defaultStrategy: 'jwt' }),
    JwtModule.registerAsync({
      // imports: [ConfigModule], // Ikke længere nødvendigt at importere ConfigModule specifikt for JWT secret/expires her
      // inject: [ConfigService], // Ikke længere nødvendigt at injecte ConfigService specifikt for JWT secret/expires her
      useFactory: async () => ({ // ConfigService parameter fjernet, da vi bruger serverEnv direkte
        secret: serverEnv.JWT_SECRET,
        signOptions: {
          expiresIn: serverEnv.JWT_EXPIRES_IN,
        },
      }),
    }),
    ConfigModule, // Bevar hvis andre dele af AuthModule eller dens providers bruger ConfigService generelt
    PersistenceModule,
  ],
  controllers: [AuthController],
  providers: [AuthService, LocalStrategy, JwtStrategy],
  exports: [AuthService, JwtModule], // JwtModule eksporteres typisk, så andre moduler kan injecte JwtService
})
export class AuthModule {}
</file>

<file path="apps/api/src/auth/auth.service.ts">
// apps/api/src/auth/auth.service.ts
    import {
      Injectable,
      UnauthorizedException,
      BadRequestException,
      InternalServerErrorException,
    } from '@nestjs/common';
    import { UsersService } from '../users/users.service';
    import { JwtService } from '@nestjs/jwt';
    import * as bcrypt from 'bcryptjs';
    import { User as PrismaUser } from '@prisma/client'; // PrismaUser bruges internt
    import { User as CoreUser, Role as CoreRole } from '@repo/core'; // CoreUser for eksterne kontrakter
    import { JwtPayload } from './strategies/jwt/jwt';
    import { PrismaService } from '../persistence/prisma/prisma.service';
    import { v4 as uuidv4 } from 'uuid';
    import { ResetPasswordDto } from './dto/reset-password.dto';

    @Injectable()
    export class AuthService {
      constructor(
        private usersService: UsersService,
        private jwtService: JwtService,
        private prisma: PrismaService,
      ) {}

      /**
       * Validates a user based on email and password.
       * @param email The user's email.
       * @param pass The user's password.
       * @returns A CoreUser object (without passwordHash) if validation is successful, otherwise null.
       */
      async validateUser(
        email: string,
        pass: string,
      ): Promise<Omit<CoreUser, 'passwordHash'> | null> {
        const userEntity: PrismaUser | null = await this.usersService.findOneByEmail(email);

        if (userEntity) {
          const isPasswordMatching = await bcrypt.compare(pass, userEntity.passwordHash);
          if (isPasswordMatching) {
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            const { passwordHash, ...result } = userEntity;
            // Map til CoreUser format
            return {
              ...result,
              role: userEntity.role as CoreRole, // Type assertion
              createdAt: new Date(userEntity.createdAt),
              updatedAt: new Date(userEntity.updatedAt),
            };
          }
        }
        return null;
      }

      /**
       * Generates a JWT access token for a given user.
       * @param user The user object (CoreUser format, without passwordHash).
       * @returns An object containing the access_token.
       */
      async login(
        user: Omit<CoreUser, 'passwordHash'>, // Forventer CoreUser format
      ): Promise<{ access_token: string }> {
        const payload: JwtPayload = { email: user.email, sub: user.id };
        return {
          access_token: this.jwtService.sign(payload),
        };
      }

      async forgotPassword(email: string): Promise<{ message: string }> {
        const user = await this.usersService.findOneByEmail(email); // Returnerer PrismaUser
        if (!user) {
          return {
            message:
              'Hvis din email findes i systemet, vil du modtage et link til at nulstille dit password.',
          };
        }

        const resetToken = uuidv4();
        const expires = new Date();
        expires.setHours(expires.getHours() + 1); // Token udløber om 1 time

        try {
          await this.prisma.user.update({
            where: { email },
            data: {
              passwordResetToken: resetToken,
              passwordResetExpires: expires,
            },
          });

          // VIGTIGT: I en rigtig applikation, send email her!
          console.log(`Password Reset Token for ${email}: ${resetToken}`); // Kun til udvikling

          return {
            message:
              'Hvis din email findes i systemet, vil du modtage et link til at nulstille dit password.',
          };
        } catch (error) {
          console.error('Fejl under opdatering af bruger med reset token:', error);
          throw new InternalServerErrorException(
            'Der opstod en fejl under behandling af din anmodning.',
          );
        }
      }

      async resetPassword(
        resetPasswordDto: ResetPasswordDto,
      ): Promise<{ message: string }> {
        const { token, newPassword, confirmPassword } = resetPasswordDto;

        if (newPassword !== confirmPassword) {
          throw new BadRequestException('De nye passwords matcher ikke.');
        }

        const user = await this.prisma.user.findUnique({ // Arbejder med PrismaUser
          where: { passwordResetToken: token },
        });

        if (!user) {
          throw new BadRequestException(
            'Ugyldigt eller udløbet password reset token (bruger ikke fundet).',
          );
        }

        if (!user.passwordResetExpires || user.passwordResetExpires < new Date()) {
          await this.prisma.user.update({
            where: { id: user.id },
            data: { passwordResetToken: null, passwordResetExpires: null },
          });
          throw new BadRequestException(
            'Ugyldigt eller udløbet password reset token (token udløbet).',
          );
        }

        const saltRounds = 10;
        let hashedPassword;
        try {
          hashedPassword = await bcrypt.hash(newPassword, saltRounds);
        } catch (error) {
          console.error('Fejl under hashing af nyt password:', error);
          throw new InternalServerErrorException(
            'Der opstod en fejl under nulstilling af password (hashing).',
          );
        }

        try {
          await this.prisma.user.update({
            where: { id: user.id },
            data: {
              passwordHash: hashedPassword,
              passwordResetToken: null,
              passwordResetExpires: null,
            },
          });
          return { message: 'Dit password er blevet nulstillet succesfuldt.' };
        } catch (error) {
          console.error('Fejl under opdatering af brugers password:', error);
          throw new InternalServerErrorException(
            'Der opstod en fejl under nulstilling af password (database).',
          );
        }
      }
    }
</file>

<file path="apps/api/src/users/dto/create-user.dto.ts">
// apps/api/src/users/dto/create-user.dto.ts
    import {
      IsEmail,
      IsNotEmpty,
      IsString,
      MinLength,
      IsEnum,
      IsOptional,
    } from 'class-validator';
    import { Role } from '@repo/core'; // Importer Role enum fra @repo/core

    export class CreateUserDto {
      @IsEmail({}, { message: 'Email skal være en gyldig email-adresse.' })
      @IsNotEmpty({ message: 'Email må ikke være tom.' })
      email: string;

      @IsString({ message: 'Password skal være en streng.' })
      @MinLength(8, { message: 'Password skal være mindst 8 tegn langt.' })
      @IsNotEmpty({ message: 'Password må ikke være tomt.' })
      password: string;

      @IsString({ message: 'Navn skal være en streng.' })
      @IsOptional()
      name?: string;

      // Bruger nu Role enum fra @repo/core
      @IsEnum(Role, {
        message: 'Rolle skal være en gyldig værdi (USER eller ADMIN).',
      })
      @IsOptional() // Gør rollen valgfri ved oprettelse, så den kan falde tilbage til default i Prisma schema
      role?: Role;
    }
</file>

<file path="apps/api/src/users/users.controller.ts">
// apps/api/src/users/users.controller.ts
import {
  Controller,
  Post,
  Body,
  ValidationPipe,
  UsePipes,
  HttpCode,
  HttpStatus,
} from '@nestjs/common';
import { UsersService } from './users.service';
import { CreateUserDto } from './dto/create-user.dto';
// Importer CoreUser fra @repo/core for returtypen
import { User as CoreUser } from '@repo/core';

@Controller('users')
export class UsersController {
  constructor(private readonly usersService: UsersService) {}

  @Post('signup')
  @UsePipes(
    new ValidationPipe({
      transform: true,
      whitelist: true,
      forbidNonWhitelisted: true,
    }),
  )
  @HttpCode(HttpStatus.CREATED)
  // Returtypen er nu Omit<CoreUser, 'passwordHash'> for at matche UsersService.create
  async signUp(
    @Body() createUserDto: CreateUserDto,
  ): Promise<Omit<CoreUser, 'passwordHash'>> {
    return this.usersService.create(createUserDto);
  }
}
</file>

<file path="apps/api/src/users/users.service.ts">
// apps/api/src/users/users.service.ts
    import {
      Injectable,
      ConflictException,
      InternalServerErrorException,
    } from '@nestjs/common';
    import { PrismaService } from '../persistence/prisma/prisma.service';
    import { CreateUserDto } from './dto/create-user.dto';
    import * as bcrypt from 'bcryptjs';
    import { User as PrismaUser, Role as PrismaRole } from '@prisma/client'; // Omdøb Prisma types for klarhed
    import { User as CoreUser, Role as CoreRole } from '@repo/core'; // Importer Core types

    @Injectable()
    export class UsersService {
      constructor(private prisma: PrismaService) {}

      /**
       * Helper function to map a PrismaUser object to a CoreUser object (omitting passwordHash).
       * @param user The PrismaUser object.
       * @returns A CoreUser object without the passwordHash.
       */
      private mapToCoreUser(user: PrismaUser): Omit<CoreUser, 'passwordHash'> {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const { passwordHash, ...result } = user;
        return {
          ...result,
          // Ensure enum compatibility if names are identical (which they are: USER, ADMIN)
          role: user.role as CoreRole,
          // Ensure Date objects are correctly typed if they come from JSON,
          // though Prisma typically returns Date objects directly.
          createdAt: new Date(user.createdAt),
          updatedAt: new Date(user.updatedAt),
        };
      }

      async create(
        createUserDto: CreateUserDto,
      ): Promise<Omit<CoreUser, 'passwordHash'>> { // Returtype er nu baseret på CoreUser
        const { email, password, name, role } = createUserDto;

        const existingUser = await this.prisma.user.findUnique({
          where: { email },
        });

        if (existingUser) {
          throw new ConflictException(
            'En bruger med denne email eksisterer allerede.',
          );
        }

        const saltRounds = 10;
        let hashedPassword;
        try {
          hashedPassword = await bcrypt.hash(password, saltRounds);
        } catch (error) {
          console.error('Fejl under hashing af password:', error);
          throw new InternalServerErrorException(
            'Der opstod en intern fejl under brugeroprettelse (hashing).',
          );
        }

        try {
          const prismaUser = await this.prisma.user.create({
            data: {
              email,
              passwordHash: hashedPassword,
              name: name || null,
              // Map CoreRole from DTO to PrismaRole for database operation
              role: (role as unknown as PrismaRole) || PrismaRole.USER,
            },
          });
          // Map den oprettede PrismaUser til CoreUser format før returnering
          return this.mapToCoreUser(prismaUser);
        } catch (error) {
          if (
            error &&
            typeof error === 'object' &&
            'code' in error &&
            error.code === 'P2002'
          ) {
            throw new ConflictException(
              'En bruger med denne email eksisterer allerede (databasefejl).',
            );
          }
          console.error('Databasefejl under brugeroprettelse:', error);
          throw new InternalServerErrorException(
            'Der opstod en databasefejl under brugeroprettelse.',
          );
        }
      }

      // Metoder der bruges internt af f.eks. AuthService kan stadig returnere PrismaUser
      async findOneByEmail(email: string): Promise<PrismaUser | null> {
        return this.prisma.user.findUnique({
          where: { email },
        });
      }

      async findOneById(id: number): Promise<PrismaUser | null> {
        return this.prisma.user.findUnique({
          where: { id },
        });
      }

      // Valgfri: Hvis du vil have en metode, der eksplicit returnerer CoreUser for auth-formål
      async findOneByEmailForAuth(email: string): Promise<Omit<CoreUser, 'passwordHash'> | null> {
        const prismaUser = await this.findOneByEmail(email);
        return prismaUser ? this.mapToCoreUser(prismaUser) : null;
      }
    }
</file>

<file path="apps/web/pages/profile.tsx">
// apps/web/pages/profile.tsx
import React from 'react'; // useEffect er fjernet, da ProtectedRoute håndterer det
import { useAuth } from '../src/context/AuthContext';
import ProtectedRoute from '../src/components/auth/ProtectedRoute'; // Importer ProtectedRoute

// Den faktiske indholdskomponent for profilsiden
function ProfilePageContent() {
  const { user, logout } = useAuth();

  // På dette tidspunkt, hvis ProfilePageContent renderes,
  // har ProtectedRoute allerede sikret, at brugeren er logget ind,
  // og at authIsLoading er false.
  // Vi kan derfor trygt antage, at 'user' ikke er null.
  if (!user) {
    // Denne fallback burde sjældent rammes, hvis ProtectedRoute fungerer korrekt.
    // Det er en ekstra sikkerhedsforanstaltning.
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-100 font-inter">
        <p className="text-lg text-gray-700">Fejl: Brugerdata ikke tilgængelige, selvom ruten er beskyttet.</p>
      </div>
    );
  }

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100 font-inter p-4">
      <div className="w-full max-w-lg p-8 space-y-6 bg-white rounded-xl shadow-xl">
        <h1 className="text-3xl font-bold text-center text-gray-900">
          Velkommen til din Profil!
        </h1>
        <div className="mt-6 border-t border-gray-200">
          <dl className="divide-y divide-gray-200">
            <div className="py-4 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4">
              <dt className="text-sm font-medium text-gray-500">ID</dt>
              <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{user.id}</dd>
            </div>
            <div className="py-4 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4">
              <dt className="text-sm font-medium text-gray-500">Fulde Navn</dt>
              <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{user.name || 'Ikke angivet'}</dd>
            </div>
            <div className="py-4 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4">
              <dt className="text-sm font-medium text-gray-500">Emailadresse</dt>
              <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{user.email}</dd>
            </div>
            <div className="py-4 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4">
              <dt className="text-sm font-medium text-gray-500">Rolle</dt>
              <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{user.role}</dd>
            </div>
            {/* Tilføj flere felter her efter behov */}
          </dl>
        </div>
        <div className="mt-6 text-center">
            <button
                onClick={logout} // Brug logout funktionen fra AuthContext
                className="px-6 py-2 font-medium tracking-wide text-white capitalize transition-colors duration-300 transform bg-red-600 rounded-lg hover:bg-red-500 focus:outline-none focus:ring focus:ring-red-300 focus:ring-opacity-80"
            >
                Log ud
            </button>
        </div>
      </div>
    </div>
  );
}

// Default export er nu en wrapper-komponent, der anvender ProtectedRoute
export default function WrappedProfilePage() {
  return (
    <ProtectedRoute>
      <ProfilePageContent />
    </ProtectedRoute>
  );
}
</file>

<file path="apps/web/src/screens/auth/login/login.tsx">
// apps/web/src/screens/auth/login/login.tsx
import React, { useState, FormEvent } from 'react';
import { useAuth } from '../../../context/AuthContext'; // Importer useAuth hook'en
// useRouter er ikke længere nødvendig her, da AuthContext håndterer omdirigering efter login

export function LoginScreen() {
  // const router = useRouter(); // Fjernet, da AuthContext håndterer omdirigering
  const { login, isLoading: authIsLoading, user } = useAuth(); // Hent login funktion og auth loading state fra context

  // Lokal state for inputfelter og specifikke fejl for denne formular
  const [email, setEmail] = useState<string>('');
  const [password, setPassword] = useState<string>('');
  const [formError, setFormError] = useState<string | null>(null); // Lokal fejl state for denne formular

  // Omdiriger hvis brugeren allerede er logget ind
  // Dette er en simpel måde at forhindre adgang til login-siden, hvis man allerede er logget ind.
  // En mere robust løsning ville være en "public only" route.
  // useEffect(() => {
  //   if (user) {
  //     router.push('/profile'); // Eller en anden default side efter login
  //   }
  // }, [user, router]);


  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    setFormError(null); // Nulstil formularfejl

    try {
      console.log('LoginScreen: Forsøger login via AuthContext med:', { email, password });
      await login(email, password); // Kald login funktionen fra AuthContext
      // AuthContext's login funktion håndterer nu token lagring, bruger state opdatering, og omdirigering.
      console.log('LoginScreen: Login succesfuld (håndteret af AuthContext).');
    } catch (err: any) {
      console.error('LoginScreen: Login fejl fanget:', err);
      setFormError(err.message || 'Login fejlede. Tjek din email og adgangskode.');
    }
    // authIsLoading fra context vil styre knappens disabled state
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100 font-inter">
      <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-xl shadow-xl">
        <h2 className="text-3xl font-bold text-center text-gray-900">
          Log ind på Læringsplatformen
        </h2>
        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Email felt */}
          <div>
            <label
              htmlFor="email"
              className="block text-sm font-medium text-gray-700"
            >
              Emailadresse
            </label>
            <input
              id="email"
              name="email"
              type="email"
              autoComplete="email"
              required
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              disabled={authIsLoading} // Deaktiver input hvis auth operation er i gang
              className="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm disabled:bg-gray-50 disabled:text-gray-500"
              placeholder="din@email.com"
            />
          </div>

          {/* Password felt */}
          <div>
            <label
              htmlFor="password"
              className="block text-sm font-medium text-gray-700"
            >
              Adgangskode
            </label>
            <input
              id="password"
              name="password"
              type="password"
              autoComplete="current-password"
              required
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              disabled={authIsLoading} // Deaktiver input hvis auth operation er i gang
              className="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm disabled:bg-gray-50 disabled:text-gray-500"
              placeholder="Din adgangskode"
            />
          </div>

          {/* Fejlmeddelelse for formularen */}
          {formError && (
            <div className="p-3 text-sm text-red-700 bg-red-100 border border-red-400 rounded-md">
              {formError}
            </div>
          )}

          {/* Submit knap */}
          <div>
            <button
              type="submit"
              disabled={authIsLoading} // Brug authIsLoading fra context
              className="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-indigo-400 disabled:cursor-not-allowed transition-colors duration-150"
            >
              {authIsLoading ? (
                <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              ) : (
                'Log ind'
              )}
            </button>
          </div>
        </form>
        <p className="text-sm text-center text-gray-600">
          Har du ikke en konto?{' '}
          <a href="/signup" className="font-medium text-indigo-600 hover:text-indigo-500">
            Opret dig her
          </a>
        </p>
        <p className="text-sm text-center text-gray-600">
          <a href="/forgot-password" className="font-medium text-indigo-600 hover:text-indigo-500">
            Glemt adgangskode?
          </a>
        </p>
      </div>
    </div>
  );
}
</file>

<file path="packages/tsconfig/package.json">
{
  "name": "tsconfig",
  "version": "0.0.0",
  "private": true,
  "packageManager": "yarn@4.9.1",
  "main": "index.js",
  "files": [
    "base.json",
    "nestjs.json",
    "nextjs.json",
    "react-library.json"
  ]
}
</file>

<file path="apps/api/src/app.module.ts">
// apps/api/src/app.module.ts
import { Module } from '@nestjs/common';
import { ConfigModule } from '@nestjs/config'; // Kun ConfigModule
import { AppController } from './app.controller';
import { AppService } from './app.service';
// import { validationSchemaForEnv } from './config/environment-variables'; // Fjernet
import { PersistenceModule } from './persistence/persistence.module';
import { UsersModule } from './users/users.module';
import { AuthModule } from './auth/auth.module';

@Module({
  imports: [
    ConfigModule.forRoot({ // Ingen validationSchema her længere for de delte variabler
      isGlobal: true,
    }),
    PersistenceModule,
    UsersModule,
    AuthModule,
  ],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {}
</file>

<file path="packages/core/package.json">
{
  "name": "@repo/core",
  "version": "0.0.0",
  "private": true,
  "packageManager": "yarn@4.9.1",
  "main": "./dist/index.js",
  "types": "./dist/index.d.ts",
  "scripts": {
    "build": "tsc -p tsconfig.json",
    "lint": "eslint . --ext .ts,.tsx"
  },
  "devDependencies": {
    "eslint": "^8.57.1",
    "tsconfig": "workspace:*",
    "typescript": "^5.1.6"
  }
}
</file>

<file path=".gitignore">
# Node
node_modules

# Yarn Berry cache
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml

# Plug’n’Play files
.pnp.cjs
.pnp.loader.mjs

# Build output
.next
dist
out
build
coverage

# Misc
.env*
.DS_Store
</file>

<file path=".yarnrc.yml">
# .yarnrc.yml
cacheFolder: .yarn/cache

logFilters:
  - code: YN0086
    level: discard
  - code: YN0060
    level: discard
  - code: YN0002
    level: error

nodeLinker: node-modules

packageExtensions:
  "@angular-devkit/core@*":
    peerDependencies:
      "@types/ajv": "*"
      "@types/chokidar": "*"
  "@angular-devkit/schematics-cli@*":
    peerDependencies:
      "@types/chokidar": "*"
      chokidar: "*"
  "@angular-devkit/schematics@*":
    peerDependencies:
      "@types/chokidar": "*"
      chokidar: "*"

# Denne linje specificerer stien til din vendored Yarn-version
yarnPath: .yarn/releases/yarn-4.9.1.cjs
</file>

<file path="apps/api/src/main.ts">
// Filsti: apps/api/src/main.ts
import { Logger, ValidationPipe } from '@nestjs/common';
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';

declare const module: any; // For HMR (Hot Module Replacement)

async function bootstrap() {
  const logger = new Logger('EntryPoint');
  const app = await NestFactory.create(AppModule);

  // Sæt et globalt prefix for alle API-ruter
  app.setGlobalPrefix('api'); // <--- TILFØJET DENNE LINJE

  // Konfigurer CORS
  app.enableCors({
    origin: [
      'http://localhost:3000', // Standard Next.js port
      'http://localhost:3001', // Hvis port 3000 er optaget
      'http://localhost:3002', // Hvis port 3001 er optaget
      'http://localhost:3003', // Hvis port 3002 er optaget
      // Tilføj andre porte, din Next.js app måtte bruge under udvikling
    ],
    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS',
    credentials: true,
  });

  // Global Validation Pipe
  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true,
      forbidNonWhitelisted: true,
      transform: true,
      transformOptions: {
        enableImplicitConversion: true,
      },
    }),
  );

  // Swagger API Dokumentation Setup
  // Swagger UI vil nu være tilgængelig på /api/docs
  const swaggerConfig = new DocumentBuilder()
    .setTitle('Læringsplatform API')
    .setDescription('API Dokumentation for den avancerede læringsplatform')
    .setVersion('1.0')
    .addBearerAuth()
    .build();

  const document = SwaggerModule.createDocument(app, swaggerConfig);
  // Swagger UI er nu på /api/docs på grund af global prefix
  SwaggerModule.setup('docs', app, document);


  const PORT = process.env.PORT || 5002;

  await app.listen(PORT);

  if (module.hot) {
    module.hot.accept();
    module.hot.dispose(() => app.close());
  }

  logger.log(`NestJS API server kører internt på http://localhost:${PORT}`);
  logger.log(
    `API Dokumentation (internt) er tilgængelig på http://localhost:${PORT}/api/docs`, // Opdateret Swagger URL
  );
  // Nginx-relaterede logs er mindre relevante nu, da vi kører direkte
  // logger.log(
  //   `Hele applikationen (via Nginx) burde være tilgængelig på http://localhost`,
  // );
  // logger.log(
  //   `API'en (via Nginx) burde være tilgængelig på http://localhost/api/`,
  // );
}
bootstrap();
</file>

<file path="packages/config/nginx.conf">
# nginx.conf - Konfigureret til Docker-frit lokalt setup

# Grundlæggende event-blok (kan være tom for simple konfigurationer)
events {
    # worker_connections 1024; # Eksempel på en standardindstilling
}

# HTTP-blokken definerer servere og hvordan requests håndteres
http {

    # Definerer en server, der lytter på port 80 (standard HTTP port)
    server {
        listen 80;
        server_name localhost; # Serveren svarer på requests til localhost

        # Location block for API-kald (alt under /api/)
        location /api/ {
            # Sætter headers for at proxy'en fungerer korrekt
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # Viderestiller requests til NestJS API'en, der kører lokalt på port 5002
            # Ændret fra host.docker.internal til localhost
            proxy_pass http://localhost:5002/;

            # Nødvendigt for WebSockets, hvis din API bruger dem
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        # Location block for Next.js Hot Module Replacement (HMR) WebSockets
        # Dette er specifikt for Next.js udviklingsserverens live-reloading funktionalitet
        location /_next/webpack-hmr {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;

            # Viderestiller til Next.js dev serveren, der kører lokalt på port 3000
            # Ændret fra host.docker.internal til localhost
            proxy_pass http://localhost:3000;

            # Nødvendigt for WebSockets
            proxy_http_version 1.1;
            proxy_set_header Connection "upgrade";
            proxy_set_header Upgrade $http_upgrade;
        }

        # Location block for alle andre requests (rod-path og alt andet)
        # Disse vil blive håndteret af Next.js web-applikationen
        location / {
            # Viderestiller til Next.js appen, der kører lokalt på port 3000
            proxy_pass http://localhost:3000;

            # Standard headers for proxying
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
</file>

<file path="package-scripts.js">
// package-scripts.js
const path = require("path");

// Stier til de forskellige applikationer i monorepoet
// Bruges til at konstruere kommandoer, der køres i de specifikke mapper
const apiPath = path.resolve(__dirname, "apps/api");
const webPath = path.resolve(__dirname, "apps/web");

// Stier til output-mapper for CI (Continuous Integration) builds
// Bruges typisk efter 'turbo prune' har isoleret en app og dens dependencies
const ciApiPath = path.resolve(__dirname, "out/apps/api");
const ciWebPath = path.resolve(__dirname, "out/apps/web");

module.exports = {
  scripts: {
    // 'prepare' scripts køres typisk for at sætte projektet op
    prepare: {
      // Default 'prepare' script kører forberedelsesscripts for både web og api
      default: `nps prepare.web prepare.api`,
      // Forberedelsesscript for 'web' appen (kører 'yarn install')
      web: `yarn`,
      // Forberedelsesscript for 'api' appen (kører nu kun prisma migrate dev)
      api: `nps prisma.migrate.dev`, 
      // CI specifikke forberedelsesscripts
      ci: {
        // For 'web': Pruner monorepoet, navigerer til output mappen, og installerer dependencies
        web: `npx turbo prune --scope=web && cd out && yarn install --frozen-lockfile`,
        // For 'api': Pruner, navigerer, installerer, og genererer Prisma client
        api: `npx turbo prune --scope=api && cd out && yarn install --frozen-lockfile && nps prisma.generate`,
      },
    },
    // 'test' scripts til at køre tests for applikationerne
    test: {
      // Default 'test' script kører tests for både web og api
      default: `nps test.web test.api`,
      // Kører tests for 'web' appen
      web: `cd ${webPath} && yarn test`,
      // Kører tests for 'api' appen
      api: `cd ${apiPath} && yarn test`,
      // CI specifikke test scripts
      ci: {
        default: `nps test.ci.web test.ci.api`,
        web: `cd ${ciWebPath} && yarn test:ci`,
        api: `cd ${ciApiPath} && yarn test:ci`,
      },
      // Scripts til at køre tests i watch mode
      watch: {
        default: `nps test.watch.web test.watch.api`,
        web: `cd ${webPath} && yarn test:watch`,
        api: `cd ${apiPath} && yarn test:watch`,
      },
    },
    // 'prisma' scripts til database-relaterede operationer
    prisma: {
      // Genererer Prisma client
      generate: `cd ${apiPath} && npx prisma generate`,
      // Åbner Prisma Studio (GUI til databasen)
      studio: `cd ${apiPath} && npx prisma studio`,
      // Kører database migrationer i udviklingsmiljøet
      migrate: {
        dev: `cd ${apiPath} && npx prisma migrate dev`,
      },
    },
    // 'build' scripts til at bygge applikationerne
    build: {
      // Default 'build' script bruger Turborepo til at bygge alle apps/packages
      default: "npx turbo run build",
      // CI specifikke build scripts (kører i 'out' mappen efter 'turbo prune')
      ci: {
        web: "cd out && npm run build", // Bemærk: Bruger 'npm run build' her, overvej at ændre til 'yarn build' for konsistens
        api: "cd out && npm run build", // Bemærk: Bruger 'npm run build' her, overvej at ændre til 'yarn build' for konsistens
      },
    },
    // 'dev' script til at starte udviklingsservere for alle apps (typisk parallelt via Turborepo)
    dev: "npx turbo run dev",
  },
};
</file>

<file path="packages/ui/package.json">
{
  "name": "ui",
  "version": "0.0.0",
  "private": true,
  "packageManager": "yarn@4.9.1",
  "main": "./index.tsx",
  "types": "./index.tsx",
  "license": "MIT",
  "devDependencies": {
    "@repo/config": "workspace:*",
    "@types/react": "^18.2.18",
    "@types/react-dom": "^18.2.7",
    "tsconfig": "workspace:*",
    "typescript": "^5.1.6"
  }
}
</file>

<file path="README.md">
# Turborepo (NestJS + Prisma + NextJS + Tailwind + Typescript + Jest) Starter

This is fullstack turborepo starter. It comes with the following features. 

- ✅ Turborepo 
- ✅ Nestjs 
    - ✅ Env Config with Validation  
    - ✅ Prisma 
- ✅ NextJS 
    - ✅ Tailwind 
    - ✅ Redux Toolkit Query 
- ✅ Testing using Jest 
- ✅ Github Actions 
- ✅ Reverse Proxy using Nginx 
- ✅ Docker Integration 
- ✅ Postgres Database 
- ✅ Package scripts using NPS 

## What's inside?

This turborepo uses [Yarn](https://classic.yarnpkg.com/lang/en/) as a package manager. It includes the following packages/apps:

### Apps and Packages

- `api`: a [NestJS](https://nestjs.com/) app
- `web`: a [Next.js](https://nextjs.org) app
- `ui`: a stub React component library used by `web`.
- `config`: `eslint`, `nginx` and `tailwind` (includes `eslint-config-next` and `eslint-config-prettier`)
- `tsconfig`: `tsconfig.json`s used throughout the monorepo

Each package/app is 100% [TypeScript](https://www.typescriptlang.org/).

### Utilities

This turborepo has some additional tools already setup for you:

- [Node Package Scripts](https://github.com/sezna/nps#readme) for automation scripts
- [TypeScript](https://www.typescriptlang.org/) for static type checking
- [ESLint](https://eslint.org/) for code linting
- [Prettier](https://prettier.io) for code formatting

## Setup
This starter kit is using turborepo and yarn workspaces for monorepo workflow.

### Prerequisites 
- Install nps by running 
```
npm i -g nps
```
- Make sure docker and docker-compose are
 installed. Refer to docs for your operating system.

### Configure Environment
- Frontend 
    - `cd apps/web && cp .env.example .env`
- Backend 
    - `cd apps/api && cp .env.example .env`

### Install Dependencies
Make sure you are at root of the project and just run 

```
nps prepare
```
### Build

To build all apps and packages, run the following command at the root of project:

```
nps build
```

### Develop

To develop all apps and packages, run the following command at the root of project:

```
nps dev
```
The app should be running at `http://localhost` with reverse proxy configured.


## Other available commands
Run `nps` in the terminal to see list of all available commands.
</file>

<file path="Struktur.txt">
```
LearningLab
├─ .node-version
├─ .repomix
│  └─ bundles.json
├─ .yarn
│  ├─ install-state.gz
│  └─ releases
│     └─ yarn-4.9.1.cjs
├─ .yarnrc.yml
├─ LICENSE
├─ README.md
├─ api
│  └─ web.txt
├─ apps
│  ├─ api
│  │  ├─ .eslintrc.js
│  │  ├─ .prettierrc
│  │  ├─ .turbo
│  │  │  └─ turbo-lint.log
│  │  ├─ nest-cli.json
│  │  ├─ package.json
│  │  ├─ prisma
│  │  │  ├─ migrations
│  │  │  │  ├─ 20220307034109_initial_migrate
│  │  │  │  │  └─ migration.sql
│  │  │  │  ├─ 20250517073440_add_user_auth_fields
│  │  │  │  │  └─ migration.sql
│  │  │  │  ├─ 20250517122525_add_password_reset_fields
│  │  │  │  │  └─ migration.sql
│  │  │  │  └─ migration_lock.toml
│  │  │  └─ schema.prisma
│  │  ├─ src
│  │  │  ├─ app.controller.spec.ts
│  │  │  ├─ app.controller.ts
│  │  │  ├─ app.module.ts
│  │  │  ├─ app.service.ts
│  │  │  ├─ auth
│  │  │  │  ├─ auth.controller.ts
│  │  │  │  ├─ auth.module.ts
│  │  │  │  ├─ auth.service.ts
│  │  │  │  ├─ dto
│  │  │  │  │  ├─ forgot-password.dto.ts
│  │  │  │  │  ├─ login.dto.ts
│  │  │  │  │  └─ reset-password.dto.ts
│  │  │  │  ├─ guards
│  │  │  │  │  ├─ jwt-auth.guard.ts
│  │  │  │  │  └─ local-auth.guard.ts
│  │  │  │  └─ strategies
│  │  │  │     ├─ jwt
│  │  │  │     │  └─ jwt.ts
│  │  │  │     └─ local
│  │  │  │        └─ local.ts
│  │  │  ├─ config
│  │  │  │  └─ environment-variables.ts
│  │  │  ├─ main.ts
│  │  │  ├─ persistence
│  │  │  │  ├─ persistence.module.ts
│  │  │  │  └─ prisma
│  │  │  │     ├─ prisma.service.spec.ts
│  │  │  │     └─ prisma.service.ts
│  │  │  └─ users
│  │  │     ├─ dto
│  │  │     │  └─ create-user.dto.ts
│  │  │     ├─ users.controller.spec.ts
│  │  │     ├─ users.controller.ts
│  │  │     ├─ users.module.ts
│  │  │     ├─ users.service.spec.ts
│  │  │     └─ users.service.ts
│  │  ├─ test
│  │  │  ├─ app.e2e-spec.ts
│  │  │  └─ jest-e2e.json
│  │  ├─ tsconfig.json
│  │  └─ webpack-hmr.config.js
│  └─ web
│     ├─ .eslintrc.js
│     ├─ .swc
│     │  └─ plugins
│     │     └─ v7_macos_aarch64_0.98.5
│     ├─ .turbo
│     │  └─ turbo-lint.log
│     ├─ README.md
│     ├─ jest.config.js
│     ├─ jest.setup.js
│     ├─ next-env.d.ts
│     ├─ next.config.js
│     ├─ package.json
│     ├─ pages
│     │  ├─ _app.tsx
│     │  ├─ forgot-password.tsx
│     │  ├─ index.tsx
│     │  ├─ login.tsx
│     │  ├─ profile.tsx
│     │  ├─ reset-password.tsx
│     │  └─ signup.tsx
│     ├─ postcss.config.js
│     ├─ src
│     │  ├─ common
│     │  ├─ components
│     │  │  └─ auth
│     │  ├─ context
│     │  │  └─ AuthContext.tsx
│     │  ├─ screens
│     │  │  ├─ admin
│     │  │  ├─ auth
│     │  │  │  ├─ forgot-password
│     │  │  │  │  └─ forgot-password.tsx
│     │  │  │  ├─ login
│     │  │  │  │  ├─ login.test.tsx
│     │  │  │  │  └─ login.tsx
│     │  │  │  ├─ reset-password
│     │  │  │  │  └─ reset-password.tsx
│     │  │  │  └─ signup
│     │  │  │     └─ signup.tsx
│     │  │  ├─ common
│     │  │  └─ employee
│     │  ├─ store
│     │  │  ├─ index.ts
│     │  │  └─ services
│     │  │     └─ api.ts
│     │  └─ styles
│     │     └─ global.css
│     ├─ tailwind.config.js
│     └─ tsconfig.json
├─ package-scripts.js
├─ package.json
├─ packages
│  ├─ config
│  │  ├─ .turbo
│  │  ├─ eslint-preset.js
│  │  ├─ nginx.conf
│  │  ├─ package.json
│  │  ├─ postcss.config.js
│  │  ├─ src
│  │  │  ├─ env.ts
│  │  │  └─ index.ts
│  │  ├─ tailwind.config.js
│  │  └─ tsconfig.json
│  ├─ core
│  │  ├─ .turbo
│  │  ├─ package.json
│  │  ├─ src
│  │  │  ├─ index.ts
│  │  │  └─ types
│  │  │     └─ user.types.ts
│  │  └─ tsconfig.json
│  ├─ tsconfig
│  │  ├─ README.md
│  │  ├─ base.json
│  │  ├─ nestjs.json
│  │  ├─ nextjs.json
│  │  ├─ package.json
│  │  └─ react-library.json
│  └─ ui
│     ├─ components
│     │  └─ Button
│     │     └─ Button.tsx
│     ├─ index.tsx
│     ├─ package.json
│     └─ tsconfig.json
├─ render.yaml
├─ src
├─ turbo.json
└─ yarn.lock

```
</file>

<file path="packages/config/package.json">
{
  "name": "@repo/config",
  "version": "0.0.0",
  "private": true,
  "packageManager": "yarn@4.9.1",
  "main": "./dist/index.js",
  "types": "./dist/index.d.ts",
  "files": [
    "eslint-preset.js",
    "nginx.conf",
    "postcss.config.js",
    "tailwind.config.js",
    "src",
    "dist"
  ],
  "scripts": {
    "build": "tsc -p tsconfig.json",
    "lint": "eslint . --ext .ts,.tsx"
  },
  "dependencies": {
    "eslint-config-next": "^13.4.12",
    "eslint-config-prettier": "^8.9.0",
    "eslint-plugin-react": "7.33.1",
    "zod": "^3.24.4"
  },
  "devDependencies": {
    "eslint": "^8.57.1",
    "tsconfig": "workspace:*",
    "typescript": "^5.1.6"
  },
  "license": "MIT"
}
</file>

<file path="apps/api/package.json">
{
  "name": "api",
  "version": "0.0.1",
  "description": "",
  "author": "",
  "private": true,
  "license": "UNLICENSED",
  "packageManager": "yarn@4.9.1",
  "scripts": {
    "prebuild": "rimraf dist",
    "build": "nest build",
    "format": "prettier --write \"src/**/*.ts\" \"test/**/*.ts\"",
    "start": "nest start",
    "dev": "prisma generate && nest build --webpack --webpackPath webpack-hmr.config.js --watch",
    "start:debug": "nest start --debug --watch",
    "start:prod": "node dist/main",
    "lint": "eslint \"{src,apps,libs,test}/**/*.ts\" --fix",
    "test": "jest",
    "test:watch": "jest --watch --runInBand",
    "test:cov": "jest --coverage",
    "test:debug": "node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand",
    "test:e2e": "jest --config ./test/jest-e2e.json --runInBand",
    "test:ci": "jest --ci --runInBand"
  },
  "dependencies": {
    "@nestjs/common": "^10.1.3",
    "@nestjs/config": "^3.0.0",
    "@nestjs/core": "^10.1.3",
    "@nestjs/jwt": "^11.0.0",
    "@nestjs/passport": "^11.0.5",
    "@nestjs/platform-express": "^10.1.3",
    "@nestjs/swagger": "^7.1.6",
    "@prisma/client": "^5.1.0",
    "@repo/config": "workspace:*",
    "@repo/core": "workspace:*",
    "bcryptjs": "^3.0.2",
    "class-transformer": "^0.5.1",
    "class-validator": "^0.14.2",
    "joi": "^17.13.3",
    "passport": "^0.7.0",
    "passport-jwt": "^4.0.1",
    "passport-local": "^1.0.0",
    "reflect-metadata": "^0.1.13",
    "rimraf": "^5.0.1",
    "rxjs": "^7.8.2",
    "swagger-ui-express": "^5.0.0"
  },
  "devDependencies": {
    "@nestjs/cli": "^10.1.11",
    "@nestjs/schematics": "^10.0.1",
    "@nestjs/testing": "^10.1.3",
    "@swc/core": "^1.11.24",
    "@swc/types": "^0.1.21",
    "@types/babel__core": "^7.20.5",
    "@types/express": "^5.0.2",
    "@types/jest": "^29.5.3",
    "@types/node": "^20.4.5",
    "@types/node-notifier": "^8.0.5",
    "@types/passport": "^1.0.17",
    "@types/passport-jwt": "^4.0.1",
    "@types/passport-local": "^1.0.38",
    "@types/prettier": "^3.0.0",
    "@types/supertest": "^2.0.12",
    "@typescript-eslint/eslint-plugin": "^6.2.1",
    "@typescript-eslint/parser": "^6.2.1",
    "eslint": "^8.57.1",
    "eslint-config-prettier": "^8.9.0",
    "eslint-plugin-prettier": "^5.0.0",
    "express": "^5.1.0",
    "jest": "^29.6.2",
    "prettier": "^3.0.0",
    "prisma": "^5.1.0",
    "run-script-webpack-plugin": "^0.2.0",
    "source-map-support": "^0.5.21",
    "supertest": "^6.3.3",
    "ts-jest": "^29.1.1",
    "ts-loader": "^9.4.4",
    "ts-node": "^10.9.1",
    "tsconfig": "workspace:*",
    "tsconfig-paths": "^4.2.0",
    "typescript": "^5.1.6",
    "webpack": "^5.88.2",
    "webpack-node-externals": "^3.0.0"
  },
  "jest": {
    "moduleFileExtensions": [
      "js",
      "json",
      "ts"
    ],
    "rootDir": "src",
    "testRegex": ".*\\.spec\\.ts$",
    "transform": {
      "^.+\\.(t|j)s$": "ts-jest"
    },
    "collectCoverageFrom": [
      "**/*.(t|j)s"
    ],
    "coverageDirectory": "../coverage",
    "testEnvironment": "node"
  }
}
</file>

<file path="apps/web/package.json">
{
  "name": "web",
  "version": "0.0.0",
  "private": true,
  "packageManager": "yarn@4.9.1",
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:ci": "jest --ci"
  },
  "dependencies": {
    "@reduxjs/toolkit": "^1.9.5",
    "@repo/config": "workspace:*",
    "@repo/core": "workspace:*",
    "next": "13.4.12",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "react-redux": "^8.1.2",
    "ui": "workspace:*",
    "uuid": "^11.1.0"
  },
  "devDependencies": {
    "@repo/config": "workspace:*",
    "@testing-library/dom": "^10.4.0",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^14.0.0",
    "@testing-library/user-event": "14.4.3",
    "@types/babel__core": "^7.20.5",
    "@types/node": "^20.4.5",
    "@types/react": "18.2.18",
    "@types/uuid": "^10.0.0",
    "autoprefixer": "^10.4.14",
    "eslint": "8.46.0",
    "jest": "^29.6.2",
    "jest-environment-jsdom": "^29.6.2",
    "next-router-mock": "^1.0.2",
    "next-transpile-modules": "10.0.1",
    "postcss": "^8.4.27",
    "tailwindcss": "^3.3.3",
    "tsconfig": "workspace:*",
    "typescript": "^5.1.6"
  }
}
</file>

<file path="package.json">
{
  "name": "turborepo-basic-shared",
  "version": "0.0.0",
  "private": true,
  "packageManager": "yarn@4.9.1",
  "workspaces": [
    "apps/*",
    "packages/*"
  ],
  "scripts": {
    "build": "turbo run build",
    "dev": "turbo run dev --parallel",
    "lint": "turbo run lint",
    "format": "prettier --write \"**/*.{ts,tsx,md}\""
  },
  "devDependencies": {
    "@nestjs/common": "^11.1.1",
    "@types/eslint": "^9.6.1",
    "@types/jest": "^29.5.14",
    "@types/node": "^22.15.18",
    "prettier": "^3.0.0",
    "prisma": "^5.1.0",
    "rxjs": "^7.8.2",
    "turbo": "1.10.12",
    "typescript": "^5.8.3"
  },
  "dependencies": {
    "@nestjs/config": "^4.0.2",
    "reflect-metadata": "^0.2.2"
  },
  "engines": {
    "npm": ">=7.0.0",
    "node": ">=22 <23"
  }
}
</file>

<file path="render.yaml">
# render.yaml
services:
  - type: web
    name: api-service
    env: node
    rootDir: apps/api
    plan: free
    region: frankfurt

    buildCommand: |
      corepack enable
      yarn install --immutable
      yarn workspace api prisma generate
      # 🚀 Bygger core, config og api i korrekt rækkefølge
      npx turbo run build --filter=...api
      # 🗄 Kør databasmigrationer
      yarn workspace api prisma migrate deploy

    startCommand: node dist/main.js
    healthCheckPath: /api
    autoDeploy: true

    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: learning-db
          property: connectionString
      - key: JWT_SECRET
        generateValue: true
      - key: JWT_EXPIRES_IN
        value: 1h
      - key: NODE_ENV
        value: production

databases:
  - name: learning-db
    plan: free
    region: frankfurt
    ipAllowList: []
    postgresMajorVersion: "15"
</file>

</files>
