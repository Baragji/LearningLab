Compose: 
services:
  postgres:
    image: postgres:15
    container_name: learninglab-postgres
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"

  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    image: learninglab-api:latest
    container_name: learninglab-api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      # Eventuelt flere vars her eller via env_file
    ports:
      - "5002:5002"
    depends_on:
      - postgres

  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    image: learninglab-web:latest
    container_name: learninglab-web
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://api:5002
    ports:
      - "3000:3000"
    depends_on:
      - api

  reverse-proxy:
    image: nginx:latest
    container_name: nginx_container
    restart: unless-stopped
    depends_on:
      - api
      - web
    ports:
      - "80:80"
    volumes:
      - ./packages/config/nginx.conf:/etc/nginx/nginx.conf
    extra_hosts:
      - "host.docker.internal:host-gateway"

volumes:
  db_data:


Docker api:
# ─────────────────────────────────────────────────────────────────────────────
# Builder stage: Installer root-dependencies & pruner monorepo for 'api'
# ─────────────────────────────────────────────────────────────────────────────
FROM node:20-alpine AS builder
# Installer nødvendige OS-pakker
RUN apk update && apk add --no-cache git libc6-compat

WORKDIR /app

# Kopiér rod-konfiguration for cache og PnP
COPY package.json yarn.lock ./
COPY .yarnrc.yml .yarnrc.yml
COPY .yarn ./.yarn

# Installer alle dependencies (inkl. devDeps like turbo)
RUN yarn install --immutable --immutable-cache --check-cache

# Kopiér resten af kildekoden
COPY . .

# Prune monorepo til kun 'api' workspace
RUN yarn turbo prune --scope=api --docker

# ─────────────────────────────────────────────────────────────────────────────
# Installer stage: Installer kun dependencies for den prunede 'api' app
# ─────────────────────────────────────────────────────────────────────────────
FROM node:20-alpine AS installer
RUN apk update && apk add --no-cache libc6-compat

WORKDIR /app

# Hent Yarn-konfig fra builder
COPY --from=builder /app/.yarnrc.yml .yarnrc.yml
COPY --from=builder /app/.yarn ./.yarn

# Hent pruned manifest og kildekode
COPY --from=builder /app/out/json/ .
COPY --from=builder /app/out/yarn.lock ./yarn.lock
COPY --from=builder /app/out/full/ .

# Installer kun nødvendige dependencies
RUN yarn install --immutable --immutable-cache --check-cache

# Generer Prisma client i 'api' workspace
RUN yarn workspace api prisma generate

# ─────────────────────────────────────────────────────────────────────────────
# Sourcer stage: Byg 'api' appen og dens afhængigheder
# ─────────────────────────────────────────────────────────────────────────────
FROM node:20-alpine AS sourcer
WORKDIR /app

# Overfør installeret node_modules og kildekode
COPY --from=installer /app/ .

# Byg applikationen
RUN yarn turbo run build --scope=api --include-dependencies --no-deps

# ─────────────────────────────────────────────────────────────────────────────
# Runner stage: Letvægts-runtime-image til kørsel
# ─────────────────────────────────────────────────────────────────────────────
FROM node:20-alpine AS runner
WORKDIR /app

ENV NODE_ENV production

# Kopiér kun build-artifacts og runtime-modules
COPY --from=sourcer /app/apps/api/dist ./apps/api/dist
COPY --from=sourcer /app/apps/api/package.json ./apps/api/package.json
COPY --from=sourcer /app/node_modules ./node_modules

# Start kommando
CMD [ "node", "apps/api/dist/main.js" ]

Docker web: 

# ─────────────────────────────────────────────────────────────────────────────
# Builder stage: Installer root-dependencies & pruner monorepo for 'web'
# ─────────────────────────────────────────────────────────────────────────────
FROM node:20-alpine AS builder
RUN apk update && apk add --no-cache git libc6-compat

WORKDIR /app

# Kopiér rod-konfiguration for cache og PnP
COPY package.json yarn.lock ./
COPY .yarnrc.yml .yarnrc.yml
COPY .yarn ./.yarn

# Installer alle dependencies inkl. devDeps (f.eks. turbo, Next.js build-værktøjer)
RUN yarn install --immutable --immutable-cache --check-cache

# Kopiér resten af kildekoden
COPY . .

# Prune monorepo til kun 'web' workspace
RUN yarn turbo prune --scope=web --docker

# ─────────────────────────────────────────────────────────────────────────────
# Installer stage: Installer kun dependencies for den prunede 'web' app
# ─────────────────────────────────────────────────────────────────────────────
FROM node:20-alpine AS installer
RUN apk update && apk add --no-cache libc6-compat

WORKDIR /app

# Hent Yarn-konfig fra builder
COPY --from=builder /app/.yarnrc.yml .yarnrc.yml
COPY --from=builder /app/.yarn ./.yarn

# Hent pruned manifest og kildekode
COPY --from=builder /app/out/json/ .
COPY --from=builder /app/out/yarn.lock ./yarn.lock
COPY --from=builder /app/out/full/ .

# Installer kun nødvendige dependencies
RUN yarn install --immutable --immutable-cache --check-cache

# ─────────────────────────────────────────────────────────────────────────────
# Sourcer stage: Byg Next.js — produktion
# ─────────────────────────────────────────────────────────────────────────────
FROM node:20-alpine AS sourcer
WORKDIR /app

# Overfør installeret node_modules og kildekode
COPY --from=installer /app/ .

# Byg Next.js til produktion
RUN yarn workspace web next build

# ─────────────────────────────────────────────────────────────────────────────
# Runner stage: Letvægts-runtime-image til kørsel af Next.js
# ─────────────────────────────────────────────────────────────────────────────
FROM node:20-alpine AS runner
WORKDIR /app

ENV NODE_ENV production

# Kopiér kun nødvendige filer fra sourcer
COPY --from=sourcer /app/apps/web/.next ./.next
COPY --from=sourcer /app/apps/web/public ./public
COPY --from=sourcer /app/apps/web/package.json ./package.json
COPY --from=sourcer /app/node_modules ./node_modules

# Eksponer standard Next.js port
EXPOSE 3000

# Start kommando
CMD [ "yarn", "workspace", "web", "next", "start" ]
