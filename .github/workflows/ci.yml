# .github/workflows/ci.yml
name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    env: # Definer miljøvariabler her, så de er tilgængelige for alle steps i jobbet
      NEXT_PUBLIC_API_URL: http://localhost:5002/api # Bruges af web tests/build
      DATABASE_URL: ${{ secrets.DATABASE_URL_CI }} # Bruges af api tests/prisma (bør være en test-database)
      JWT_SECRET: ${{ secrets.JWT_SECRET_CI }} # Bruges af api tests
      JWT_EXPIRES_IN: "15m" # Bruges af api tests
      SALT_ROUNDS: "10" # Bruges af api tests
      # Tilføj andre nødvendige miljøvariabler for dine tests her

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22 # Matcher .node-version
          cache: "yarn"

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: yarn install --immutable

      - name: Build all packages and apps
        # Kør build for alle workspaces. Dette sikrer, at alle 'dist' mapper er oprettet.
        run: yarn turbo run build

      # Valgfrit: List indholdet af dist-mapper for debugging, hvis problemer fortsætter
      # - name: List @repo/core build output
      #   run: ls -la packages/core/dist || echo "packages/core/dist not found or empty"
      # - name: List @repo/config build output
      #   run: ls -la packages/config/dist || echo "packages/config/dist not found or empty"

      - name: Run all tests
        # Kør test:ci for alle workspaces.
        # Miljøvariabler defineret på job-niveau vil være tilgængelige her.
        run: yarn turbo run test:ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run Playwright E2E tests
        run: yarn workspace web test:e2e

      - name: Upload Playwright test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: apps/web/playwright-report/
          retention-days: 30

  deploy-render-api:
    name: Deploy API to Render
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Render Deploy
        run: curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_URL_API }} # Sørg for at navnet på secret er korrekt

  deploy-vercel-web:
    name: Deploy Web to Vercel
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_WEB }} # Sørg for at navnet på secret er korrekt
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      # Vercel build vil selv bruge NEXT_PUBLIC_API_URL fra Vercel's egne environment settings.
      # Hvis du har brug for at overskrive dem specifikt for Vercel build-steppet her, kan du gøre det.
      # NEXT_PUBLIC_API_URL: ${{ secrets.PROD_NEXT_PUBLIC_API_URL }} # Eksempel
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "yarn"

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: yarn install --immutable

      - name: Deploy to Vercel Production
        # For Vercel, er det ofte bedst at lade Vercel håndtere build-processen.
        # Vercel CLI vil typisk bygge appen baseret på dens konfiguration.
        # Sørg for at din `apps/web` er konfigureret som root directory i Vercel projekt-settings.
        run: npx vercel --prod --cwd ./apps/web # Tilføj --cwd for at specificere working directory for Vercel
