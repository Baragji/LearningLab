# .github/workflows/ci.yml
# Komplet CI/CD pipeline til at bygge, teste og deploye både API og Web.

name: CI/CD Pipeline

on:
  push:
    branches:
      - main # Kør kun deploy-jobs på push til main-branchen
  pull_request:
    branches:
      - main # Kør build-and-test jobbet på pull requests til main-branchen

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Nødvendig for Turborepo remote caching, hvis du bruger det

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22 # Matcher projektets Node version (fra .node-version og package.json engines)
          cache: 'yarn' # Aktiver caching for Yarn

      - name: Enable Corepack
        # Sikrer at den korrekte Yarn version (defineret i package.json -> packageManager) bruges
        run: corepack enable

      - name: Install dependencies
        # Installerer alle afhængigheder for monorepoet baseret på yarn.lock
        # --immutable sikrer, at yarn.lock ikke ændres og er hurtigere for CI
        run: yarn install --immutable

      - name: Run tests and build
        # Dette kommando vil bruge Turborepo til at køre 'test:ci' og 'build' scripts
        # for alle workspaces (apps/api, apps/web, packages/*)
        # som defineret i deres respektive package.json filer og turbo.json.
        # Sørg for, at dine 'test:ci' og 'build' scripts er korrekt defineret i hver package.json.
        run: yarn turbo run test:ci build # <<< ÆNDRET HER

  deploy-render-api:
    name: Deploy API to Render
    needs: build-and-test # Kør kun hvis build-and-test er succesfuld
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Kør kun på direkte push til main
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Render Deploy
        # Sender en POST request til din Render Deploy Hook URL for at starte et nyt deploy af API-servicen.
        # Sørg for at RENDER_DEPLOY_HOOK_URL er sat som en secret i dit GitHub repository.
        run: curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_URL }}

  deploy-vercel-web:
    name: Deploy Web to Vercel
    needs: build-and-test # Kør kun hvis build-and-test er succesfuld
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Kør kun på direkte push til main
    runs-on: ubuntu-latest
    env:
      # Disse secrets skal være sat i dit GitHub repository.
      # VERCEL_TOKEN: Et Vercel access token.
      # VERCEL_PROJECT_ID: ID'et for dit 'web' projekt på Vercel.
      # VERCEL_ORG_ID: ID'et for din organisation eller personlige konto på Vercel.
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
    steps:
      - name: Checkout code
        # Nødvendig for Vercel CLI for at have projektets kontekst.
        uses: actions/checkout@v4

      - name: Setup Node.js
        # Selvom koden er bygget i 'build-and-test' jobbet,
        # skal Vercel CLI bruge Node til at køre.
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'yarn'

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        # Vercel CLI kan have brug for adgang til projektets dependencies.
        # Dette sikrer, at alt er sat op korrekt i CI-miljøet for Vercel CLI.
        run: yarn install --immutable

      - name: Deploy to Vercel Production
        # Vercel CLI vil automatisk bruge VERCEL_TOKEN, VERCEL_PROJECT_ID, og VERCEL_ORG_ID fra environment variables.
        # Den bygger og deployer automatisk baseret på Vercel projektets 'Root Directory' indstilling (apps/web).
        # '--prod' flaget sikrer, at det er et produktionsdeploy.
        run: npx vercel --prod
