{"type":"entity","name":"MCPEnterprise Project","entityType":"project","observations":["Enterprise-level transformation of local RAG/MCP server to production-ready GCP solution","Current status: Phase 1 - Preparation and Architecture Design","Existing codebase: FastAPI server, stdio MCP server, OpenAI RAG engine","All 10 E2E tests passing successfully","Target: Cloud Run deployment with full observability and security"]}
{"type":"entity","name":"Current Architecture","entityType":"architecture","observations":["FastAPI HTTP server (mcp_server_with_rag.py) for web interface","MCP stdio server (mcp_server_stdio.py) for protocol compliance","RAG engine with ChromaDB + OpenAI API integration","Smart chunking for different file types (Python, JS, Markdown)","5 main tools: analyze_code, search_codebase, generate_code, explain_code, add_document"]}
{"type":"entity","name":"Phase 1 Requirements","entityType":"requirements","observations":["Performance: <500ms response time, 100+ concurrent requests, <2GB memory","Security: Bearer token auth, TLS encryption, Secret Manager, VPC isolation","Scalability: Horizontal scaling 1-10 instances, stateless design","Monitoring: Health checks, metrics, structured logging, alerting","Enterprise folder structure with infrastructure, tests, docs, CI/CD"]}
{"type":"entity","name":"Technology Stack","entityType":"technology","observations":["Backend: Python 3.13, FastAPI, asyncio","RAG: ChromaDB vector database, OpenAI embeddings (text-embedding-3-small)","LLM: OpenAI gpt-3.5-turbo for code analysis and generation","Protocol: MCP (Model Context Protocol) compliance","Target Platform: Google Cloud Platform (GCP)"]}