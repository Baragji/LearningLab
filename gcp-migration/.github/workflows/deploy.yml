name: MCPEnterprise CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: ${{ secrets.GCP_REGION || 'europe-north1' }}
  ARTIFACT_REGISTRY: ${{ secrets.GCP_REGION || 'europe-north1' }}-docker.pkg.dev
  IMAGE_NAME: mcp-rag-server

jobs:
  # Security and Quality Checks
  security-scan:
    name: Security & Quality Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          cd gcp-migration
          pip install -r requirements.txt
          pip install bandit safety pytest-cov

      - name: Run security scan with Bandit
        run: |
          cd gcp-migration
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ -f txt

      - name: Check for known vulnerabilities
        run: |
          cd gcp-migration
          safety check --json --output safety-report.json || true
          safety check

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            gcp-migration/bandit-report.json
            gcp-migration/safety-report.json

  # Unit and Integration Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          cd gcp-migration
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Run unit tests
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          MCP_BEARER_TOKEN: test-token
        run: |
          cd gcp-migration
          python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=html

      - name: Run E2E tests
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          MCP_BEARER_TOKEN: test-token
        run: |
          cd gcp-migration
          python test_e2e.py

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: gcp-migration/coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Build and Push Container Image
  build:
    name: Build Container Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/mcp-enterprise/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./gcp-migration
          file: ./gcp-migration/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Terraform Plan
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: |
          cd gcp-migration/infrastructure/terraform
          terraform init

      - name: Terraform Plan
        env:
          TF_VAR_gcp_project: ${{ env.GCP_PROJECT_ID }}
          TF_VAR_gcp_region: ${{ env.GCP_REGION }}
          TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          TF_VAR_mcp_bearer_token: ${{ secrets.MCP_BEARER_TOKEN }}
          TF_VAR_environment: ${{ github.event.inputs.environment || 'dev' }}
        run: |
          cd gcp-migration/infrastructure/terraform
          terraform plan -out=tfplan

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan
          path: gcp-migration/infrastructure/terraform/tfplan

  # Deploy to Environment
  deploy:
    name: Deploy to ${{ github.event.inputs.environment || 'dev' }}
    runs-on: ubuntu-latest
    needs: [build, terraform-plan]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: |
          cd gcp-migration/infrastructure/terraform
          terraform init

      - name: Terraform Apply
        env:
          TF_VAR_gcp_project: ${{ env.GCP_PROJECT_ID }}
          TF_VAR_gcp_region: ${{ env.GCP_REGION }}
          TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          TF_VAR_mcp_bearer_token: ${{ secrets.MCP_BEARER_TOKEN }}
          TF_VAR_environment: ${{ github.event.inputs.environment || 'dev' }}
        run: |
          cd gcp-migration/infrastructure/terraform
          terraform apply -auto-approve

      - name: Get deployment outputs
        id: terraform-outputs
        run: |
          cd gcp-migration/infrastructure/terraform
          echo "cloud_run_url=$(terraform output -raw cloud_run_url)" >> $GITHUB_OUTPUT
          echo "health_check_url=$(terraform output -raw health_check_url)" >> $GITHUB_OUTPUT

      - name: Wait for service to be ready
        run: |
          echo "Waiting for service to be ready..."
          for i in {1..30}; do
            if curl -f -s "${{ steps.terraform-outputs.outputs.health_check_url }}" > /dev/null; then
              echo "Service is ready!"
              exit 0
            fi
            echo "Attempt $i: Service not ready yet, waiting 10 seconds..."
            sleep 10
          done
          echo "Service failed to become ready within 5 minutes"
          exit 1

      - name: Run smoke tests
        env:
          SERVICE_URL: ${{ steps.terraform-outputs.outputs.cloud_run_url }}
          MCP_BEARER_TOKEN: ${{ secrets.MCP_BEARER_TOKEN }}
        run: |
          cd gcp-migration
          python -c "
          import requests
          import os
          import sys

          base_url = os.environ['SERVICE_URL']
          token = os.environ['MCP_BEARER_TOKEN']
          headers = {'Authorization': f'Bearer {token}'}

          # Test health endpoint
          response = requests.get(f'{base_url}/health')
          assert response.status_code == 200, f'Health check failed: {response.status_code}'
          print('‚úì Health check passed')

          # Test metrics endpoint
          response = requests.get(f'{base_url}/metrics', headers=headers)
          assert response.status_code == 200, f'Metrics check failed: {response.status_code}'
          print('‚úì Metrics endpoint accessible')

          print('‚úì All smoke tests passed!')
          "

  # Notify on Success/Failure
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
    steps:
      - name: Notify Success
        if: needs.deploy.result == 'success'
        run: |
          echo "üöÄ Deployment to ${{ github.event.inputs.environment || 'dev' }} successful!"
          echo "Service URL: ${{ needs.deploy.outputs.cloud_run_url }}"

      - name: Notify Failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "‚ùå Deployment to ${{ github.event.inputs.environment || 'dev' }} failed!"
          echo "Check the logs for details."
          exit 1
